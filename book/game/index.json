[
{
	"uri": "https://yujian1018.github.io/book/game/4.%E5%B7%A5%E5%85%B7/",
	"title": "1.设计",
	"tags": [],
	"description": "",
	"content": "技术点 "
},
{
	"uri": "https://yujian1018.github.io/book/game/1.-%E8%A7%84%E8%8C%83/",
	"title": "1. 规范",
	"tags": [],
	"description": "",
	"content": "技术点 优化  开关功能。（功能开放） 数据下发，一个协议中涉及到的所有需要同步的数据可以整合到一起，统一由一次sokect下发 事件机、触发器、否决机 统一资源产出、资源消耗  "
},
{
	"uri": "https://yujian1018.github.io/book/game/1.-%E8%A7%84%E8%8C%83/1.1.-%E7%89%88%E6%9C%AC%E5%8F%B7/",
	"title": "1.1. 版本号",
	"tags": [],
	"description": "",
	"content": "版本号 热更新有许多的必要条件，每个产品的需求可能都不太相同。\n例如，每个产品的版本号设计都不太相同，有的有大版本、小版本；有的则有主版本、次版本、编译版本。我以前的习惯，是在主版本变化的时候需要整包更新，而次版本变化代表逻辑更新，编译版本代表资源更新等等。这些需要自己来定义升级规则。\n再例如，有的产品希望逐个下载升级包，有的产品希望把所有资源打包成一个升级包；有的产品直接使用文件名作为资源名在游戏中调用，而有的产品会把资源名改为指纹码（例如MD5）形式来实现升级的多版本共存和实时回滚，还有的产品甚至要求能在用户玩游戏的过程中完成自动更新。\n虑使用这样的版本号格式：\nXYZ （主版本号.次版本号.修订号）\n进行不向下兼容的修改时，递增主版本号。\nAPI 保持向下兼容的新增及修改时，递增次版本号；\n修复问题但不影响API 时，递增修订号；\n"
},
{
	"uri": "https://yujian1018.github.io/book/game/2.-%E5%8A%9F%E8%83%BD/2.1-%E9%BA%BB%E5%B0%86%E7%AE%97%E6%B3%95/",
	"title": "2.1. 麻将算法",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://yujian1018.github.io/book/game/2.-%E5%8A%9F%E8%83%BD/2.1-%E9%BA%BB%E5%B0%86%E7%AE%97%E6%B3%95/2.1.1.-%E9%BA%BB%E5%B0%86%E7%AE%97%E6%B3%95/",
	"title": "2.1.1. 麻将算法",
	"tags": [],
	"description": "",
	"content": " 麻将检查胡牌算法 1）解释麻将的胡牌规则，简单描述为：1个对子加4副牌 2）检查胡牌的计算复杂度如下： C(14,2) *C(12,3)*C(9,3)*C(6, 3)*C(3,3) ~ 10的8次方，如果运气恰好非常差，需要进行大概是1亿次判断（两张牌相同、3张牌相同、3张牌连续） 实际检查过程中，大部分是不满足条件中间短返回的 我们再计算下实际运行时的计算复杂度： 以第一步检查对子为例，1手牌，对子最多出现7对，也就是C(14,2)最多有7种情况进入到下一步的检查，其他的都被裁剪掉了，计算复杂度更改为： C(14,2) + 7 C(12,3)C(9,3)C(6,3) 第二检查3个是否是1副牌，12张牌，最多有XX(10\u0026gt;=XX\u0026gt;=8)副牌的可能性，也就是C(12,3)最多有XX种情况进入到下一步检查，其他的都被裁减掉了，计算复杂度更改为： C(14,2) + 7 (C(12,3) + XX(C(9,3) + YY (C(6,3) + ZZ) 100 + 7 (300 + 10(80 + 7 *(20 + 3))) ~ 10的4次方，最差情况大概需要1万次判断 优化思路 为什么要优化? 1W次的判断，对于CPU来说，可以在万分之一秒中解决，也就是1秒中最差可以完成1W次以上的胡牌检查，这个数据看起来已经很好了，还有优化的必要吗？ 先看第一个场景： 赖子听牌检查 手里如果有3个赖子，3个赖子可以有343434种组合，每种组合放入现有的手牌中后，需要再14，50W左右的组合需要进行检查，嗯，看起来，5秒可以搞定，对于客户端来说可以通过分步处理来解决，但体验会打个折扣，对服务器来说，压力就有点大了 第二个场景： AI计算胡牌概率 AI在考虑打牌时，会模拟打牌，然后再计算手中新牌的胡牌概率，要算手中牌胡牌概率，首先要进行听牌检查，这是一个不断模拟和检查是否听牌的过程，以模拟打出3张牌为例，胡牌检查的数量，就是跟3个赖子的胡牌检查数量是一样的，AI要聪明，我们想模拟打出的牌越多，对胡牌的概率估算也就越精确，所以检查胡牌的算法需要越快越好 如何优化？ 1）并行 2）缓存 3）查表 第二个方法目前游戏中有使用，问题主要是第一次检查还是需要时间的，另外就是缓存的数量的问题，太多会占用较多内存 并行的方法可以考虑在后期加入，主要是把多核的优势发挥出来 查表这个方法很吸引我，因为可以在O(1)时间内返回胡牌的结果，所以决定尝试下 我们从屁胡的检查开始 先看下有多少屁胡的牌型？ 屁胡的牌是由1个对子和4副牌组成，简单计算如下： C(34,1) (C(33, 4) + C(33, 3) C(21, 1) + C(33, 2) C(21, 2) + C(33, 1) * C(21, 3) + C(21, 4)) ~1000万 嗯，这个量级，可以看下能否努力下，通过查表的方式实现 继续优化：如何减少表的尺寸 1000万 这么多胡牌的牌型，如果简单的以牌组成的字符串进行hash，我们可以估算下hash表的大小： 以1个牌被hash成1个int来计算，14 bytes -\u0026gt; 4 bytes 4 * 10M = 40M，这仅仅是键的存储，hash表的存储效率50%左右，这样算\u0026gt;100M是肯定的，对于客户端程序来说，这个开销是有点大，还没有算上值的开销 我们发现不同的胡牌牌型，实际上可以归为一类 我们对手牌进行一下编码 1）连续的或相同的被视为一段 2）段之间通过00间隔 3）连续的以连续的1表示 4）相同的以01表示 示例： 1;1;14;15;16;17;18;19;21;22;23;27;28;29 -\u0026gt; 10100 111111 00 111 00 111 7;7;16;16;16;17;18;19;21;22;23;27;28;29 -\u0026gt; 10100 10101 111 00 111 00 111 经过编码后，1000多W的牌型减少为1W多 我们的hash表的尺寸减少为40K 最终性能对比 胡牌牌型对比： 对比判定胡牌算法共耗时17.6秒 新的算法的判定时间是2.3秒，接近一个数量级的优化  "
},
{
	"uri": "https://yujian1018.github.io/book/game/2.-%E5%8A%9F%E8%83%BD/2.2.-%E5%88%A4%E6%96%AD%E7%82%B9%E6%98%AF%E5%90%A6%E5%9C%A8%E4%B8%89%E8%A7%92%E5%BD%A2%E5%86%85/",
	"title": "2.2. 判断点是否在三角形内",
	"tags": [],
	"description": "",
	"content": "本文只是翻译和整理，原文在此http://www.blackpawn.com/texts/pointinpoly/default.html 概述 给定三角形ABC和一点P(x,y,z)，判断点P是否在ABC内。这是游戏设计中一个常见的问题。需要注意的是，这里假定点和三角形位于同一个平面内。 本文介绍三种不同的方法，由浅入深 一 内角和法 连接点P和三角形的三个顶点得到三条线段PA，PB和PC，求出这三条线段与三角形各边的夹角，如果所有夹角之和为180度，那么点P在三角形内，否则不在，此法直观，但效率低下。\n二 同向法 假设点P位于三角形内，会有这样一个规律，当我们沿着ABCA的方向在三条边上行走时，你会发现点P始终位于边AB，BC和CA的右侧。我们就利用这一点，但是如何判断一个点在线段的左侧还是右侧呢？我们可以从另一个角度来思考，当选定线段AB时，点C位于AB的右侧，同理选定BC时，点A位于BC的右侧，最后选定CA时，点B位于CA的右侧，所以当选择某一条边时，我们只需验证点P与该边所对的点在同一侧即可。问题又来了，如何判断两个点在某条线段的同一侧呢？可以通过叉积来实现，连接PA，将PA和AB做叉积，再将CA和AB做叉积，如果两个叉积的结果方向一致，那么两个点在同一测。判断两个向量的是否同向可以用点积实现，如果点积大于0，则两向量夹角是锐角，否则是钝角。\n代码如下，为了实现程序功能，添加了一个Vector3类，该类表示三维空间中的一个向量。\n// 3D vector class Vector3 { public: Vector3(float fx, float fy, float fz) :x(fx), y(fy), z(fz) { } // Subtract Vector3 operator - (const Vector3\u0026amp; v) const { return Vector3(x - v.x, y - v.y, z - v.z) ; } // Dot product float Dot(const Vector3\u0026amp; v) const { return x * v.x + y * v.y + z * v.z ; } // Cross product Vector3 Cross(const Vector3\u0026amp; v) const { return Vector3( y * v.z - z * v.y, z * v.x - x * v.z, x * v.y - y * v.x ) ; } public: float x, y, z ; }; // Determine whether two vectors v1 and v2 point to the same direction // v1 = Cross(AB, AC) // v2 = Cross(AB, AP) bool SameSide(Vector3 A, Vector3 B, Vector3 C, Vector3 P) { Vector3 AB = B - A ; Vector3 AC = C - A ; Vector3 AP = P - A ; Vector3 v1 = AB.Cross(AC) ; Vector3 v2 = AB.Cross(AP) ; // v1 and v2 should point to the same direction return v1.Dot(v2) \u0026gt;= 0 ; } // Same side method // Determine whether point P in triangle ABC bool PointinTriangle1(Vector3 A, Vector3 B, Vector3 C, Vector3 P) { return SameSide(A, B, C, P) \u0026amp;\u0026amp; SameSide(B, C, A, P) \u0026amp;\u0026amp; SameSide(C, A, B, P) ; } 三 重心法 上面这个方法简单易懂，速度也快，下面这个方法速度更快，只是稍微多了一点数学而已 三角形的三个点在同一个平面上，如果选中其中一个点，其他两个点不过是相对该点的位移而已，比如选择点A作为起点，那么点B相当于在AB方向移动一段距离得到，而点C相当于在AC方向移动一段距离得到。\n所以对于平面内任意一点，都可以由如下方程来表示 P = A + u (C – A) + v (B - A) // 方程1 如果系数u或v为负值，那么相当于朝相反的方向移动，即BA或CA方向。那么如果想让P位于三角形ABC内部，u和v必须满足什么条件呢？有如下三个条件 u \u0026gt;= 0 v \u0026gt;= 0 u + v \u0026lt;= 1 几个边界情况，当u = 0且v = 0时，就是点A，当u = 0,v = 1时，就是点B，而当u = 1, v = 0时，就是点C 整理方程1得到P – A = u(C - A) + v(B - A) 令v0 = C – A, v1 = B – A, v2 = P – A，则v2 = u v0 + v v1，现在是一个方程，两个未知数，无法解出u和v，将等式两边分别点乘v0和v1的到两个等式 (v2) • v0 = (u v0 + v v1) • v0 (v2) • v1 = (u v0 + v v1) • v1 注意到这里u和v是数，而v0，v1和v2是向量，所以可以将点积展开得到下面的式子。 v2 • v0 = u (v0 • v0) + v (v1 • v0) // 式1 v2 • v1 = u (v0 • v1) + v (v1• v1) // 式2 解这个方程得到 u = ((v1•v1)(v2•v0)-(v1•v0)(v2•v1)) / ((v0•v0)(v1•v1) - (v0•v1)(v1•v0)) v = ((v0•v0)(v2•v1)-(v0•v1)(v2•v0)) / ((v0•v0)(v1•v1) - (v0•v1)(v1•v0)) 是时候上代码了，这段代码同样用到上面的Vector3类\n// Determine whether point P in triangle ABC bool PointinTriangle(Vector3 A, Vector3 B, Vector3 C, Vector3 P) { Vector3 v0 = C - A ; Vector3 v1 = B - A ; Vector3 v2 = P - A ;\nfloat dot00 = v0.Dot(v0) ; float dot01 = v0.Dot(v1) ; float dot02 = v0.Dot(v2) ; float dot11 = v1.Dot(v1) ; float dot12 = v1.Dot(v2) ;\nfloat inverDeno = 1 / (dot00 dot11 - dot01 dot01) ;\nfloat u = (dot11 dot02 - dot01 dot12) * inverDeno ; if (u \u0026lt; 0 || u \u0026gt; 1) // if u out of range, return directly { return false ; }\nfloat v = (dot00 dot12 - dot01 dot02) * inverDeno ; if (v \u0026lt; 0 || v \u0026gt; 1) // if v out of range, return directly { return false ; }\nreturn u + v \u0026lt;= 1 ; }\n关于重心坐标 http://mathworld.wolfram.com/BarycentricCoordinates.html Happy coding! ==The End==\n"
},
{
	"uri": "https://yujian1018.github.io/book/game/2.-%E5%8A%9F%E8%83%BD/2.2-%E7%BD%91%E7%BB%9C/",
	"title": "2.2. 网络",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://yujian1018.github.io/book/game/2.-%E5%8A%9F%E8%83%BD/2.2-%E7%BD%91%E7%BB%9C/2.2.2-%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BA%92%E8%81%94/",
	"title": "2.2.2 客户端服务端互联",
	"tags": [],
	"description": "",
	"content": "1.使用长连接 阻塞式、非阻塞式 2.使用短连接 "
},
{
	"uri": "https://yujian1018.github.io/book/game/2.-%E5%8A%9F%E8%83%BD/2.2-%E7%BD%91%E7%BB%9C/2.2.3.-%E5%B8%A7%E5%90%8C%E6%AD%A5/",
	"title": "2.2.3. 帧同步",
	"tags": [],
	"description": "",
	"content": "http://www.gameres.com/thread_476063_1_1.html\n1.帧同步\n原理\n设存在玩家A、B、C，服务器Server设为S，假设玩家A、B、C是一个状态机，一开始A、B、C都处于状态S1，这时候服务器S给A、B、C相同的输入I，此时A、B、C经过本地的运算，得到同一个状态S2。 在这短暂的时刻，可以理解成所有玩家从状态S1同步到状态S2，三个玩家便达到同步的目的。只要状态机函数模型Fun，初始S1，输入I是确定的，那么三个玩家得到的结果S2肯定也是确定的。\n如图中所示，玩家A、B、C在T1、T2、T3时刻都会收到服务器发送过来的输入，从而变成相同的状态S1,S2,S3，达到同步的目的。可以想象成这就是个回合制的游戏，每个T1、T2、T3间隔是一个回合，玩家在回合结束的时候，状态是一致同步的。那对于我们游戏来说，服务器的输入可以是玩家在这回合的操作序列，可以是状态信息，都可以，取决于客户端游戏方案的设计。只要这输入到达任何一个客户端那里，能把这数据模拟成真实的游戏场景就可以了。此时您可能会有这样的疑问，如果帧同步比作成一个回合制游戏的话，那会不会出现一卡一卡的情况出现呢。其实是不会的，一般游戏的帧数为30-60帧玩家认为是流畅的，对于帧同步来说，我们把里面的每一次输入的时间间隔足够短，人眼的反应是可以被欺骗的，就好像电影放映一样，一张张连续的图片快速播放，人眼就会感觉是连续发生的，同理帧同步虽然就像是一个回合制游戏，但是只要回合的时间足够短，玩家看起来就像是连续的一样。通常情况下，我们把这个回合称为逻辑帧，逻辑帧的设定可以根据游戏类型，自己打磨决定，一般情况下，4-6渲染帧左右为一逻辑帧比较合理，大概1S的时间内，客户端会收到服务器8-10个逻辑帧输入。\n后台实现\n1、核心思想\n对于后台开发来说，服务器主要起到控制作用，对客户端的帧信息进行输入输出管理，服务器就像是一个时间序列的驱动器，每隔一定间隔，会把在这段时间间隔收集到得客户端的输入，下发广播到所有客户端中去，从而驱动客户端执行帧同步处理，简而言之可以看作服务器在时间轴序列上，收集切片，每隔一定间隔，把这时间切片收集到的数据下发给客户端。\n1.对于帧同步来说，数据同步的频率较高，当然是希望越小的网络延迟越佳，由于TCP的滑动窗口和重传机制，导致延时无法控制，因此帧同步一般采用udp进行网络传输。提到udp这里就会衍生出可靠性的问题，对于客户端来说，如果某些udp包没有收到该怎么办呢，这就是帧同步客户端会出现的丢帧的情况，这时候得靠客户端与服务器指定针对性的重传机制.\n2.服务器单局中数据首先对每一帧下发客户端的数据进行编号，然后并保存下来，某某客户端网络不佳，中途丢了一些包，可以跟服务器发请求，我现在播放到哪一个序列号的帧了，服务器可以把这个客户端当前序号的帧和客户端缺省的帧一并下发，这样客户端拿到数据后，便可继续通过合帧快播的方式，加速播放，赶上当前时间。这样客户端的表现就是在快放一样。\n3.一般来说，帧同步的方案的包量都是比较小的，对于客户端在这个时间间隔没有上传任何数据，服务器也得帮该客户端构造空帧出来，免得其他客户端出现没有输入的情况出现。\n4.对于短时间的大量重传，服务器可以选择性的采取合并的策略，减少客户端的瞬间的收包数量。同时也可以利用好不超过mtu的包量大小，尽可能的携带一些之前若干个时间帧的信息，最大限度的把信息push到给客户端,减少客户端申请重传的概率.\n2、断线重连\n服务器单局可以把所有逻辑帧存储下来，当客户端断线，重新登陆的时候，服务器可以将所有的逻辑帧下发给客户端，客户端拿到所有的逻辑帧后，可以快速在后台跑完全部的逻辑帧，当跑完后，加载到画面，就重新回到游戏单局了。由于断线时，跑的是单局上所有客户端一样的逻辑帧，因此，等到恢复游戏的时候玩家的状态是一致的。\n3、反外挂\n服务器都是切逻辑帧，没有感知到客户端的逻辑，所以反外挂这块不方便校验，可以从以下两方面着手去校验 1.由于所有客户端的数据都是一致的，可以让客户端根据自身数据算出若干个特征值，严格来说， 所有的客户端算出来的特征值都应该是一样的，因为他们的数据是一样的，当有玩家不一致的时候，可以断定该玩家有作弊的嫌疑。 2.通过单局过程或者完成的时候，汇报统计信息给服务器，服务器通过若干个数据的关联关系，进行数据校验。（有点类似手游单机游戏的校验）\n4、特殊关注的点\n1.随机性：游戏中不可避免会有随机的逻辑，这时候伪随机就派上用场了，通过下发统一的随机种子，确保每个客户端都产生相同的随机序列。 war3中暴击就是使用的伪随机机制，同样是为了应付帧同步的问题而产生的解决方式。\n2.浮点数：浮点数尽可能的避免，还有特殊注意的是，如果用了第三方的库，要确保客户端在不同平台的计算结果是一致的，比方说用了某些物理引擎，在安卓和IOS的平台上会有可能计算出不同的结果，那就要在开发过程中，注意避免使用平台不一致的API了。\n3.调试难度\n帧同步调试比较困难，需要良好的Log系统，针对不一致的情况能通过Log追溯原因。\n尽早的搭建起录像功能通过录像回放可以反复观看逻辑上的不同步，方便问题定位。\n在单局中增加debug模式下不一致的检查，当发生不一致时，及时发现，定位原因。如果能引入自动化测试那效果就更佳了。\n"
},
{
	"uri": "https://yujian1018.github.io/book/game/2.-%E5%8A%9F%E8%83%BD/2.2-%E7%BD%91%E7%BB%9C/2.2.4.-cs%E5%90%8C%E6%AD%A5/",
	"title": "2.2.4. cs同步",
	"tags": [],
	"description": "",
	"content": "帧同步：客户端p2p方式\ncs同步：客户端采集input， 发送给服务器，广播给所有玩家\n"
},
{
	"uri": "https://yujian1018.github.io/book/game/2.-%E5%8A%9F%E8%83%BD/2.3-%E9%81%93%E5%85%B7/",
	"title": "2.3 道具",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://yujian1018.github.io/book/game/2.-%E5%8A%9F%E8%83%BD/",
	"title": "2.3 道具",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://yujian1018.github.io/book/game/2.-%E5%8A%9F%E8%83%BD/2.3.-%E9%87%8D%E5%BF%83%E5%9D%90%E6%A0%87/",
	"title": "2.3. 重心坐标",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://yujian1018.github.io/book/game/2.-%E5%8A%9F%E8%83%BD/2.4-%E4%BB%BB%E5%8A%A1/",
	"title": "2.4 任务",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://yujian1018.github.io/book/game/3.-%E6%8A%80%E6%9C%AF/",
	"title": "3. 技术",
	"tags": [],
	"description": "",
	"content": "技术 "
},
{
	"uri": "https://yujian1018.github.io/book/game/3.-%E6%8A%80%E6%9C%AF/3.1-ue/",
	"title": "3.1 UE",
	"tags": [],
	"description": "",
	"content": "安装 git clone https://github.com/EpicGames cd ./Setup.sh ./GenerateProjectFiles.sh %生成data和index make make SlateViewer %编译了一个SlateViewer make UE4Editor UE4Game UnrealPak CrashReportClient ShaderCompileWorker UnrealLightmass %编译Editor cd Engine/Binaries/Linux \u0026amp;\u0026amp; ./UE4Editor "
},
{
	"uri": "https://yujian1018.github.io/book/game/3.-%E6%8A%80%E6%9C%AF/3.2-%E6%9C%8D%E5%8A%A1%E7%AB%AF/",
	"title": "3.2 服务端",
	"tags": [],
	"description": "",
	"content": "技术点 优化  开关功能。（功能开放） 数据下发，一个协议中涉及到的所有需要同步的数据可以整合到一起，统一由一次sokect下发 事件机、触发器、否决机 统一资源产出、资源消耗  "
},
{
	"uri": "https://yujian1018.github.io/book/game/2.-%E5%8A%9F%E8%83%BD/2.3-%E9%81%93%E5%85%B7/%E8%A3%85%E5%A4%87/",
	"title": "7.1.1 代码片段",
	"tags": [],
	"description": "",
	"content": "可见对象 -》\n 道具 装备\n "
},
{
	"uri": "https://yujian1018.github.io/book/game/2.-%E5%8A%9F%E8%83%BD/2.4-%E4%BB%BB%E5%8A%A1/%E4%BB%BB%E5%8A%A1/",
	"title": "7.1.1 代码片段",
	"tags": [],
	"description": "",
	"content": "事件触发器 等级限制 前置限制 时间限制-到达某个时间开启任务\n接受任务触发新任务 完成任务触发新任务 提交任务触发新任务 等级触发\n任务框架设计 服务器与客户端协议设计直接使用任务索引\n"
},
{
	"uri": "https://yujian1018.github.io/book/game/3.-%E6%8A%80%E6%9C%AF/3.2-%E6%9C%8D%E5%8A%A1%E7%AB%AF/2.1.1%E6%80%AA%E7%89%A9ai%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8E%9F%E5%9E%8B/",
	"title": "7.1.1 代码片段",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://yujian1018.github.io/book/game/3.-%E6%8A%80%E6%9C%AF/3.2-%E6%9C%8D%E5%8A%A1%E7%AB%AF/2.1.2%E6%A8%AA%E6%9D%BF%E8%BF%87%E5%85%B3%E7%B1%BB%E6%B8%B8%E6%88%8F%E6%88%98%E6%96%97%E7%B1%BB%E5%9E%8B/",
	"title": "7.1.1 代码片段",
	"tags": [],
	"description": "",
	"content": " 正常战斗，根据消耗可以无限制进入副本 次数限制，进入副本消耗次数 次数限制，通关副本失败才消耗次数，只要通关不消耗次数 限时开启  "
},
{
	"uri": "https://yujian1018.github.io/book/game/3.-%E6%8A%80%E6%9C%AF/3.2-%E6%9C%8D%E5%8A%A1%E7%AB%AF/2.1.3%E6%B4%BB%E5%8A%A8%E7%AE%A1%E7%90%86%E5%99%A8/",
	"title": "7.1.1 代码片段",
	"tags": [],
	"description": "",
	"content": "活动管理器（跑马灯，活动前-活动开始-活动中-触发活动结束-活动马上结束-活动结束） 可以考虑服务器关闭重启的情况\n开服活动 运营活动 日常活动\n"
},
{
	"uri": "https://yujian1018.github.io/book/game/3.-%E6%8A%80%E6%9C%AF/3.2-%E6%9C%8D%E5%8A%A1%E7%AB%AF/2.1.4%E5%8D%B3%E6%97%B6%E5%88%B6%E6%88%98%E6%96%97/",
	"title": "7.1.1 代码片段",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://yujian1018.github.io/book/game/3.-%E6%8A%80%E6%9C%AF/3.2-%E6%9C%8D%E5%8A%A1%E7%AB%AF/aoi/",
	"title": "7.1.1 代码片段",
	"tags": [],
	"description": "",
	"content": "1.九宫格。玩家每走一步同步到某个格子中，计算出该格子可以看到的玩家。 统一计时器下发视野内玩家数据，所以客户端需要做预测\n2.aoi，场景玩家同步可以设定定时器，统一下发\n"
},
{
	"uri": "https://yujian1018.github.io/book/game/3.-%E6%8A%80%E6%9C%AF/3.2-%E6%9C%8D%E5%8A%A1%E7%AB%AF/%E4%BC%98%E5%8C%96/",
	"title": "7.1.1 代码片段",
	"tags": [],
	"description": "",
	"content": "   2.开关功能。（功能开放）\n3.数据下发，一个协议中涉及到的所有需要同步的数据可以整合到一起，统一由一次sokect下发\n4.事件机、触发器、否决机\n5.统一资源产出、资源消耗\n"
},
{
	"uri": "https://yujian1018.github.io/book/game/3.-%E6%8A%80%E6%9C%AF/3.2-%E6%9C%8D%E5%8A%A1%E7%AB%AF/%E6%88%98%E6%96%97%E7%B3%BB%E7%BB%9F/",
	"title": "7.1.1 代码片段",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://yujian1018.github.io/book/game/3.-%E6%8A%80%E6%9C%AF/3.2-%E6%9C%8D%E5%8A%A1%E7%AB%AF/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%E5%99%A8/",
	"title": "7.1.1 代码片段",
	"tags": [],
	"description": "",
	"content": "时间管理。 服务器时间管理， 设定服务器时间、停止服务器时间\u0026hellip;.. 加速时间流逝\n"
},
{
	"uri": "https://yujian1018.github.io/book/game/3.-%E6%8A%80%E6%9C%AF/3.2-%E6%9C%8D%E5%8A%A1%E7%AB%AF/%E7%8E%A9%E5%AE%B6%E5%B1%9E%E6%80%A7/",
	"title": "7.1.1 代码片段",
	"tags": [],
	"description": "",
	"content": "可以完成功能的设计 1.只使用数值来计算所有的属性。这样属性计算放在各个模块，在各个模块增减\n2.此时需要支持百分比的情况。 那么，属性统一维护可能是一个更清晰的设计。 设情况而定，需要多出一套甚至多套字段，用来存放百分比数值以及具体数值。 玩家升级具体数值、称号具体数值 活动百分比数值\u0026hellip;.\n"
},
{
	"uri": "https://yujian1018.github.io/book/game/4.%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7/",
	"title": "7.1.1 代码片段",
	"tags": [],
	"description": "",
	"content": "js压缩 java -jar compiler.jar \u0026ndash;js hello.js \u0026ndash;js_output_file hello-compiled.js\n"
},
{
	"uri": "https://yujian1018.github.io/book/game/5.%E8%B5%84%E6%BA%90/6.1-%E5%9B%BD%E5%86%85%E7%BD%91%E9%A1%B5%E6%B8%B8%E6%88%8F%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90/",
	"title": "7.1.1 代码片段",
	"tags": [],
	"description": "",
	"content": " 国内网页游戏使用的背景音乐,大量使用了经典的电影电视的OST,这里简单回顾一下:\n 首先,一大批网页游戏用的是中国武侠背景,大量的电视武侠电影为此提供了丰富的素材:\n 仙剑奇侠传（四） - 回梦游仙.wav\n 何占豪\u0026amp;陈钢 - 少年十五二十时.wav 卢冠廷 - 一生所爱.wav 吕秀龄 - 逆伦.wav 商易 - 小刀会组曲 .wav 喜多郎 - 孙文与庆玲.wav 宗次郎 - 故乡的原风景.wav 徐嘉良 - 仙侣奇缘主题曲音乐.wav 横山菁儿 - 英雄的黎明.wav 胡伟立 - 偷功.wav 胡伟立 - 市集.wav 陈勋奇 - 天地孤影任我行.wav 陈淑桦 - 流光飞舞.wav 鲍比达 - 凡心大动.wav 黄沾\u0026amp; 胡伟立 - 傲气傲笑万重浪.wav 黄英华 - OPENING.wav 黄霑\u0026amp; 鲍比达 - 定情.wav 黄霑\u0026amp;徐克\u0026amp;罗大佑 - 沧海一生笑.wav\n七剑战歌\n2012-6-28 19:51:18 更新:\nFolder PATH listing for volume Zen Volume serial number is 9ED7-E2AC E:. │ │ ├─01.武侠音乐系列之双雄对峙（对决） │ 01.熊熊圣火.lrc │ 01.熊熊圣火.mp3 │ 02.罗汉阵.mp3 │ 03.太极拳.mp3 │ 04.偷功.mp3 │ 05.傲气傲笑万重浪(終曲).mp3 │ 06.仙剑奇缘.mp3 │ 07.少林雄风.mp3 │ 08.阵法\u0026ndash;卧江子第九阵.mp3 │ 09.过馆人生.mp3 │ 10.蝶舞天涯片首曲.mp3 │ 11.主旋律音乐（一）.mp3 │ 12.醉起步云宵.mp3 │ 13.比剑.mp3 │ 14.挟枪试刀.mp3 │ 15.男儿当自强(主題音乐).mp3 │ 16.野霸王.mp3 │ 17.洗衣练功.mp3 │ 18.初识太极.mp3 │ 19.灵光宝剑.mp3 │ 20.彩剑竹水琉.mp3 │ ├─02.武侠音乐系列之缠绵悱恻（爱情） │ 01.孙文与庆龄.mp3 │ 02.初遇.lrc │ 02.初遇.mp3 │ 03.美丽的花朵-刘备的恋情.mp3 │ 04.玲珑玉磐心 识玲珑.mp3 │ 05.爱情I.mp3 │ 06 倾心.mp3 │ 07.珠帘半卷美人怨.mp3 │ 08.才子佳人.mp3 │ 09.千里姻缘一线牵.mp3 │ 10.温馨时刻.mp3 │ 11.道爱.mp3 │ 12.逆伦.mp3 │ 13.江湖心儿女情.mp3 │ 14.千层雪.mp3 │ 15.大団円.mp3 │ 16.情迷.mp3 │ 17.眷眷柔情（古筝）.mp3 │ 18.定情.mp3 │ 19.心动.lrc │ 19.心动.mp3 │ 20.义薄云天关云长.mp3 │ 21.相爱.mp3 │ ├─03.武侠音乐系列之晴天霹雳（震惊） │ 01.痴癫.mp3 │ 02.伤恸 (慕少艾悲曲).mp3 │ 03.赤裸醉龙街市受辱.mp3 │ 04.アシタカせっ记.mp3 │ 05.悲伤绝望.mp3 │ 06.晴天霹雳.mp3 │ 07.暮色音尘 (墨尘音悲曲).mp3 │ 08.响宴.mp3 │ 09.飞鸿谨受庭训.mp3 │ 10.悲恸.Mp3 │ 11.震惊2.mp3 │ 12 决战.lrc │ 12 决战.mp3 │ 13.Ishin Tenpuku Keikaku.mp3 │ ├─04.武侠音乐系列之黯然消魂（悲伤） │ 01.西天取经路遥遥.mp3 │ 02.雨夜诀别.mp3 │ 03.新婚别.mp3 │ 04.孙文之遗言.mp3 │ 05.永远的爱~丽花之死.mp3 │ 06.羽獍弦歌 (羽人非獍二胡曲).mp3 │ 07.孤独.mp3 │ 08.悲.mp3 │ 09.望夫女.mp3 │ 10.伤逝.mp3 │ 11.殇.mp3 │ 12.仙凡之爱.mp3 │ 13.紫霞苍烟 (赭杉军悲曲).mp3 │ 14.侠客的泪珠.wma │ 15.爱情主题.mp3 │ 16.寻夫.mp3 │ 17.父之死.mp3 │ 18.梦断剑斜 （剑邪悲曲).mp3 │ 19.沧凉血漠 沧凉 (无尽血漠).mp3 │ 20.六翼羽人 (羽人非獍).mp3 │ 21.等.mp3 │ 22. 断情殇.mp3 │ ├─05.武侠音乐系列之豪气中天（气魄） │ 01.序曲：天地孤影任我行.mp3 │ 02.小刀会序曲.mp3 │ 03.キリン参上す.mp3 │ 04.别れ.mp3 │ 05.祈祝.mp3 │ 06.第三楼阁.ウー.mp3 │ 07.小试拳脚.mp3 │ 08.袁绍决起~白马の戦い.mp3 │ 09.光芒之龙.mp3 │ 10.大江东去 (皇甫定涛).lrc │ 10.大江东去 (皇甫定涛).mp3 │ 11.邂逅.mp3 │ 12.欧阳金雕悲伤曲.mp3 │ 13.勇往直前.mp3 │ 14.浮云.mp3 │ 15.女儿当自强.mp3 │ 16 大军师-诸葛孔明.mp3 │ 17.中国龙序曲.mp3 │ 18.痴情剑客剑无情.Wma │ 19.英雄的黎明.mp3 │ 20.素还真新曲.mp3 │ 21.叱咤风云.lrc │ 21.叱咤风云.mp3 │ 22.七剑战歌.mp3 │ 23.风吹草动，风云飞扬.mp3 │ ├─06.武侠音乐系列之淡淡幽思（思念） │ 01.雪千寻.mp3 │ 02.追想~谨と孔明.mp3 │ 03.Nagisa to Kayoko.mp3 │ 04.素还真-阿轮钢琴独奏版.mp3 │ 05.温馨I.mp3 │ 06.莫问沧桑 (莫沧桑).mp3 │ 07.落叶.mp3 │ 08.笛子二重奏.mp3 │ 09.云涛梦笔.mp3 │ 10.姜氏孤儿.mp3 │ 11.永远难忘.mp3 │ 12.ひとひらの雪.mp3 │ 13.无期.mp3 │ 14.思.mp3 │ 15.昔情难追.mp3 │ 16.キリンの決意.mp3 │ 17.琴心.mp3 │ 18.思念.mp3 │ 19.柔和主题.mp3 │ 20.悬念与等待.mp3 │ 21.雨后天台.mp3 │ 22.Leaving Without Goodbye.mp3 │ 23.风云榜(二胡.排笛独奏曲).mp3 │ 24.金子陵-阿轮钢琴独奏版.mp3 │ 25.兵燹重回大雪原.mp3 │ 26.老宅.mp3 │ 27.思念之风 (皇甫定涛排箫曲).mp3 │ 28.雨中哭泣 (仙鹤情缘音乐).mp3 │ ├─07.武侠音乐系列之危机四伏（紧张） │ 01.伏击.mp3 │ 02.大蛇.mp3 │ 03.大地之母.mp3 │ 04.革命家们.mp3 │ 05.深陷噩梦.mp3 │ 06.拜月.mp3 │ 07.陷害.mp3 │ 08.血.mp3 │ 09.女娲之后.mp3 │ 10.修炼.mp3 │ 11.阴阳师 阴极之体.mp3 │ 12.奇幻古典·未知篇.mp3 │ 13.逃.mp3 │ 14.紧张.mp3 │ 15 力挽狂涛.mp3 │ 16.五浊恶世 (妖溺天).mp3 │ 17.追.mp3 │ 18 危机.mp3 │ 19.阴界.mp3 │ 20.玉玺遭窃.mp3 │ 21.校场比武.mp3 │ 22.杀手生涯.mp3 │ 23.阴谋.mp3 │ 24.荒人邪影 (人邪).mp3 │ 25.剑拔弩张.mp3 │ 26.相逼.mp3 │ ├─08.武侠音乐系列之古灵精怪（幽默） │ 01.欢沁.mp3 │ 02.母与子.mp3 │ 03.荫尸人.mp3 │ 04.poya no yoru.mp3 │ 05.市集.mp3 │ 06.轻松（倚天剑屠龙刀）.lrc │ 06.轻松（倚天剑屠龙刀）.mp3 │ 07.中原不败（音乐版）.Mp3 │ 08.求神（MMM）.mp3 │ 09.人间精灵.mp3 │ 10.麻将台上.mp3 │ 11.错把树根当人参.mp3 │ 12.黄飞鸿(无二胡,琵琶).lrc │ 12.黄飞鸿(无二胡,琵琶).mp3 │ 13.柳腰细裙儿荡.mp3 │ 14.快乐(十兄弟).mp3 │ 15.轻快（飞狐外传）.mp3 │ 16.轻松(新龙门客栈).mp3 │ 17.沉睡爱情.mp3 │ 18.为何不死.mp3 │ 19.西风紧.mp3 │ 20.小八妹.mp3 │ 21.小宝本色.mp3 │ 22.掌柜与店小二.mp3 │ 23.瓜瓜一族.mp3 │ 24.主题(Har.)2.mp3 │ 25.小祕（最新版）.mp3 │ ├─09.武侠音乐系列之后悔莫及（悔悟） │ 01.莫失莫忘.mp3 │ 02.悲愤.mp3 │ 03.Waters of Irrawaddy.mp3 │ 04.桃花岛.mp3 │ 05.血色.mp3 │ 06.途穷反遭俗眼白(落难英雄).mp3 │ 07.爱恨情仇命里去.mp3 │ 08.大圣娶妻之片头曲.mp3 │ 09.悟.mp3 │ 10.潇湘子.mp3 │ 11.大地之炎.mp3 │ 12.求师 - 卫清风悲愤求师.mp3 │ 13.梦三刀.mp3 │ 14.悔.mp3 │ 15.恨爱交加.mp3 │ 16.黄沙漫漫 天险刀藏之死 (唢呐版).mp3 │ 17.恍如隔世.mp3 │ 18.只要为你活一天.mp3 │ 19.悲惨.mp3 │ 20.悟.mp3 │ 21.爱恨浮沉.mp3 │ 22.逍遥游（配乐）.lrc │ 22.逍遥游（配乐）.mp3 │ 23.红楼梦序曲.mp3 │ 24.我的父亲母亲.lrc │ 24.我的父亲母亲.mp3 │ 25.武术精神.mp3 │ 26.败走.mp3 │ ├─10.武侠音乐系列之疗伤神法（疗养） │ 01.故乡的原风景.mp3 │ 02.笑傲江湖曲（琴箫合奏）.lrc │ 02.笑傲江湖曲（琴箫合奏）.mp3 │ 03.Nakasendo (The Old Road).mp3 │ 04.Tosa No Haru.mp3 │ 05.琴箫合奏（聊斋奇女子）.mp3 │ 06.宁月.mp3 │ 07.紫华弹筝.mp3 │ 08.万年风华 八趾麒麟-原曲.mp3 │ 09.昆仑.mp3 │ 10.双鹦.mp3 │ 11.世间情鸟.mp3 │ 12.琴箫合奏曲-射雕.mp3 │ 13.逍遙遊.lrc │ 13.逍遙遊.mp3 │ 14.湖心亭.mp3 │ 15.南海.mp3 │ 16.桃林.mp3 │ ├─11.武侠音乐系列之久别重逢（重逢） │ 01.Happy Arabia.mp3 │ 02.剑子仙迹.mp3 │ 03.相会.mp3 │ 04.仙境莲踪(琉璃仙境).mp3 │ 05.Dm08.mp3 │ 06.妙音鸟.mp3 │ 07.city_c1 完美世界.mp3 │ 08.白雪映月.mp3 │ 09.御笔丹青-悦兰芳.Mp3 │ 10.武松杀嫂.mp3 │ 11.隐隐青山.mp3 │ 12.疏楼龙宿.mp3 │ 13.结拜.mp3 │ 14.舞台重逢.mp3 │ 15.白莲还真 (新素还真).mp3 │ 16.旧游如梦空肠断.mp3 │ 17.叹风流 (西城风流子).mp3 │ └─原声大碟.-.[武侠音乐系列.喜气洋洋.Vol.12.高兴].专辑.(MP3) └─12.武侠音乐系列之喜气洋洋（高兴） 01.伽罗.mp3 02.金子陵.mp3 03.嬉戏.mp3 04.比翼鸟.lrc 04.比翼鸟.mp3 05.少年十五二十时.mp3 06.花爵百鍊生.mp3 07.o pura u pura.mp3 08.闲逸.mp3 09.可爱的老乞丐二胡演奏 (金包银).mp3 10.River Child.mp3 11.[书剑恩仇录]欣然.mp3 12.江南の大国-呉の参戦.mp3 13.从心所欲步怀真.mp3 14.Distantsuns.mp3 15.玩世不恭.mp3 16.相伴.mp3 17.阳春三月.mp3 18.非常女〈音乐版〉.mp3 19.成长.mp3 20.纵酒行.mp3 21.[聊斋]欢乐时光.mp3 22.快乐逍遥.lrc 22.快乐逍遥.mp3 23.Theme-Happy No.1.mp3 24.两小无情.Mp3 25. 新たなる誓い~刘备の婚礼.mp3 26.远い日.风はあおあお.mp3 27.舞鸟.mp3 28.开心做出戏.mp3\n然后是战争类游戏常用的: 石破惊天 Hans Zimmeren\n杀死bill原声第一张专辑的 09-tomoyasu hotei battle without honor or humanity\n加勒比海盗He\u0026rsquo;s a Pirate Chariots Of Fire 这张专辑在被\u0026laquo;士兵突击\u0026raquo;使用后,在网页游戏上再一次风靡\n一些比较面向女性玩家的游戏则大量选择了久石让的作品,太多了这里只说三个:\nSping\n The Journey to the West\nThe Legend of Ashitaka Theme\n 随着,背景选择西方的奇幻类游戏,则直接使用指环王,纳尼亚传奇,哈利波特等电影的OST.\n"
},
{
	"uri": "https://yujian1018.github.io/book/game/5.%E8%B5%84%E6%BA%90/",
	"title": "7.1.1 代码片段",
	"tags": [],
	"description": "",
	"content": "技术点 "
},
{
	"uri": "https://yujian1018.github.io/book/game/5.%E8%B5%84%E6%BA%90/storm1986%E7%BD%91%E6%B8%B8%E7%AD%96%E5%88%92%E8%AE%BE%E8%AE%A1%E7%A9%BA%E9%97%B4%E5%8E%9F%E5%88%9B%E6%96%87%E9%9B%862007-2010/",
	"title": "7.1.1 代码片段",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://yujian1018.github.io/book/game/2.-%E5%8A%9F%E8%83%BD/2.2-%E7%BD%91%E7%BB%9C/2.2.1-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86/",
	"title": "72.2.1 网络管理",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://yujian1018.github.io/book/game/5.%E8%B5%84%E6%BA%90/1.1%E7%8E%A9%E5%AE%B6%E5%88%A9%E7%9B%8A%E8%BD%AC%E6%8D%A2%E7%B3%BB%E7%BB%9F/",
	"title": "1.1玩家利益转换系统",
	"tags": [],
	"description": "",
	"content": "图片 "
},
{
	"uri": "https://yujian1018.github.io/book/game/",
	"title": "1.游戏",
	"tags": [],
	"description": "",
	"content": "game 好记性不如烂笔头 游戏笔记\n"
},
{
	"uri": "https://yujian1018.github.io/book/game/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
}]