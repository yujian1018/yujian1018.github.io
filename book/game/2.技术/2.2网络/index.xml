<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>http://example.org/2.%E6%8A%80%E6%9C%AF/2.2%E7%BD%91%E7%BB%9C/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 30 Aug 2019 15:13:01 +0800</lastBuildDate>
    
	<atom:link href="http://example.org/2.%E6%8A%80%E6%9C%AF/2.2%E7%BD%91%E7%BB%9C/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2</title>
      <link>http://example.org/2.%E6%8A%80%E6%9C%AF/2.2%E7%BD%91%E7%BB%9C/2.2.1-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>http://example.org/2.%E6%8A%80%E6%9C%AF/2.2%E7%BD%91%E7%BB%9C/2.2.1-%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86/</guid>
      <description></description>
    </item>
    
    <item>
      <title>cs同步</title>
      <link>http://example.org/2.%E6%8A%80%E6%9C%AF/2.2%E7%BD%91%E7%BB%9C/cs%E5%90%8C%E6%AD%A5/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>http://example.org/2.%E6%8A%80%E6%9C%AF/2.2%E7%BD%91%E7%BB%9C/cs%E5%90%8C%E6%AD%A5/</guid>
      <description>帧同步：客户端p2p方式
cs同步：客户端采集input， 发送给服务器，广播给所有玩家</description>
    </item>
    
    <item>
      <title>客户端服务端互联</title>
      <link>http://example.org/2.%E6%8A%80%E6%9C%AF/2.2%E7%BD%91%E7%BB%9C/2.2.2-%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BA%92%E8%81%94/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>http://example.org/2.%E6%8A%80%E6%9C%AF/2.2%E7%BD%91%E7%BB%9C/2.2.2-%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%BA%92%E8%81%94/</guid>
      <description>1.使用长连接 阻塞式、非阻塞式 2.使用短连接</description>
    </item>
    
    <item>
      <title>帧同步</title>
      <link>http://example.org/2.%E6%8A%80%E6%9C%AF/2.2%E7%BD%91%E7%BB%9C/%E5%B8%A7%E5%90%8C%E6%AD%A5/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>http://example.org/2.%E6%8A%80%E6%9C%AF/2.2%E7%BD%91%E7%BB%9C/%E5%B8%A7%E5%90%8C%E6%AD%A5/</guid>
      <description>http://www.gameres.com/thread_476063_1_1.html
1.帧同步
原理
设存在玩家A、B、C，服务器Server设为S，假设玩家A、B、C是一个状态机，一开始A、B、C都处于状态S1，这时候服务器S给A、B、C相同的输入I，此时A、B、C经过本地的运算，得到同一个状态S2。 在这短暂的时刻，可以理解成所有玩家从状态S1同步到状态S2，三个玩家便达到同步的目的。只要状态机函数模型Fun，初始S1，输入I是确定的，那么三个玩家得到的结果S2肯定也是确定的。
如图中所示，玩家A、B、C在T1、T2、T3时刻都会收到服务器发送过来的输入，从而变成相同的状态S1,S2,S3，达到同步的目的。可以想象成这就是个回合制的游戏，每个T1、T2、T3间隔是一个回合，玩家在回合结束的时候，状态是一致同步的。那对于我们游戏来说，服务器的输入可以是玩家在这回合的操作序列，可以是状态信息，都可以，取决于客户端游戏方案的设计。只要这输入到达任何一个客户端那里，能把这数据模拟成真实的游戏场景就可以了。此时您可能会有这样的疑问，如果帧同步比作成一个回合制游戏的话，那会不会出现一卡一卡的情况出现呢。其实是不会的，一般游戏的帧数为30-60帧玩家认为是流畅的，对于帧同步来说，我们把里面的每一次输入的时间间隔足够短，人眼的反应是可以被欺骗的，就好像电影放映一样，一张张连续的图片快速播放，人眼就会感觉是连续发生的，同理帧同步虽然就像是一个回合制游戏，但是只要回合的时间足够短，玩家看起来就像是连续的一样。通常情况下，我们把这个回合称为逻辑帧，逻辑帧的设定可以根据游戏类型，自己打磨决定，一般情况下，4-6渲染帧左右为一逻辑帧比较合理，大概1S的时间内，客户端会收到服务器8-10个逻辑帧输入。
后台实现
1、核心思想
对于后台开发来说，服务器主要起到控制作用，对客户端的帧信息进行输入输出管理，服务器就像是一个时间序列的驱动器，每隔一定间隔，会把在这段时间间隔收集到得客户端的输入，下发广播到所有客户端中去，从而驱动客户端执行帧同步处理，简而言之可以看作服务器在时间轴序列上，收集切片，每隔一定间隔，把这时间切片收集到的数据下发给客户端。
1.对于帧同步来说，数据同步的频率较高，当然是希望越小的网络延迟越佳，由于TCP的滑动窗口和重传机制，导致延时无法控制，因此帧同步一般采用udp进行网络传输。提到udp这里就会衍生出可靠性的问题，对于客户端来说，如果某些udp包没有收到该怎么办呢，这就是帧同步客户端会出现的丢帧的情况，这时候得靠客户端与服务器指定针对性的重传机制.
2.服务器单局中数据首先对每一帧下发客户端的数据进行编号，然后并保存下来，某某客户端网络不佳，中途丢了一些包，可以跟服务器发请求，我现在播放到哪一个序列号的帧了，服务器可以把这个客户端当前序号的帧和客户端缺省的帧一并下发，这样客户端拿到数据后，便可继续通过合帧快播的方式，加速播放，赶上当前时间。这样客户端的表现就是在快放一样。
3.一般来说，帧同步的方案的包量都是比较小的，对于客户端在这个时间间隔没有上传任何数据，服务器也得帮该客户端构造空帧出来，免得其他客户端出现没有输入的情况出现。
4.对于短时间的大量重传，服务器可以选择性的采取合并的策略，减少客户端的瞬间的收包数量。同时也可以利用好不超过mtu的包量大小，尽可能的携带一些之前若干个时间帧的信息，最大限度的把信息push到给客户端,减少客户端申请重传的概率.
2、断线重连
服务器单局可以把所有逻辑帧存储下来，当客户端断线，重新登陆的时候，服务器可以将所有的逻辑帧下发给客户端，客户端拿到所有的逻辑帧后，可以快速在后台跑完全部的逻辑帧，当跑完后，加载到画面，就重新回到游戏单局了。由于断线时，跑的是单局上所有客户端一样的逻辑帧，因此，等到恢复游戏的时候玩家的状态是一致的。
3、反外挂
服务器都是切逻辑帧，没有感知到客户端的逻辑，所以反外挂这块不方便校验，可以从以下两方面着手去校验 1.由于所有客户端的数据都是一致的，可以让客户端根据自身数据算出若干个特征值，严格来说， 所有的客户端算出来的特征值都应该是一样的，因为他们的数据是一样的，当有玩家不一致的时候，可以断定该玩家有作弊的嫌疑。 2.通过单局过程或者完成的时候，汇报统计信息给服务器，服务器通过若干个数据的关联关系，进行数据校验。（有点类似手游单机游戏的校验）
4、特殊关注的点
1.随机性：游戏中不可避免会有随机的逻辑，这时候伪随机就派上用场了，通过下发统一的随机种子，确保每个客户端都产生相同的随机序列。 war3中暴击就是使用的伪随机机制，同样是为了应付帧同步的问题而产生的解决方式。
2.浮点数：浮点数尽可能的避免，还有特殊注意的是，如果用了第三方的库，要确保客户端在不同平台的计算结果是一致的，比方说用了某些物理引擎，在安卓和IOS的平台上会有可能计算出不同的结果，那就要在开发过程中，注意避免使用平台不一致的API了。
3.调试难度
帧同步调试比较困难，需要良好的Log系统，针对不一致的情况能通过Log追溯原因。
尽早的搭建起录像功能通过录像回放可以反复观看逻辑上的不同步，方便问题定位。
在单局中增加debug模式下不一致的检查，当发生不一致时，及时发现，定位原因。如果能引入自动化测试那效果就更佳了。</description>
    </item>
    
  </channel>
</rss>