<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>项目资料 on 清水的小站</title>
    <link>https://yujian1018.github.io/book/pro/</link>
    <description>Recent content in 项目资料 on 清水的小站</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 30 Aug 2019 15:13:01 +0800</lastBuildDate>
    
	<atom:link href="https://yujian1018.github.io/book/pro/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>6.1 SOA</title>
      <link>https://yujian1018.github.io/book/pro/6.-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/6.1-soa/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/6.-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/6.1-soa/</guid>
      <description>![http://baike.baidu.com/view/453197.htm ]</description>
    </item>
    
    <item>
      <title>6.2 RESTful</title>
      <link>https://yujian1018.github.io/book/pro/6.-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/6.2-restful/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/6.-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/6.2-restful/</guid>
      <description>gitAPI: https://developer.github.com/ 域名 https://example.org/api/ 版本 Accept: vnd.example-com.foo+json; version=1.0 路径（Endpoint） https://api.example.com/v1/zoos https://api.example.com/v1/animals https://api.example.com/v1/employees HTTP动词 GET（SELECT）：从服务器取出资源（一项或多项）。 POST（CREATE</description>
    </item>
    
    <item>
      <title>6.3 架构</title>
      <link>https://yujian1018.github.io/book/pro/6.-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/6.3-%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/6.-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/6.3-%E6%9E%B6%E6%9E%84/</guid>
      <description>1．问题领域——我们的架构是为解决什么类型的问题而设计的？软件架构 一定不是通用的，而是为解决某一类特定问题而设计的。缺少了关于用 来解决哪类问</description>
    </item>
    
    <item>
      <title>6.4 版本管理</title>
      <link>https://yujian1018.github.io/book/pro/6.-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/6.4-%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/6.-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/6.4-%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</guid>
      <description>速度 简单的设计 对非线性开发模式的强力支持（允许上千个并行开发的分支） 完全分布式 有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）</description>
    </item>
    
    <item>
      <title>7.1.2 yawsapi</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.1-yaws/7.1.2-api/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.1-yaws/7.1.2-api/</guid>
      <description>1.check_cookie( A ) -&amp;gt; H = A#arg.headers, case yaws_api:find_cookie_val( ?Cook, H#headers.cookie ) of Val when Val /= [] -&amp;gt; case yaws_api:cookieval_to_opaque( Val ) of {ok, Sess} -&amp;gt; {ok, Sess, Val}; { error, { has_session, Sess }} -&amp;gt; {ok, Sess}; Else -&amp;gt; Else end; [] -&amp;gt; {error, nocookie} end. 2.{ok, _Sess, Cookie} -&amp;gt; yaws_api:delete_cookie_session( Cookie ); 删除session 3.yaws_api:new_cookie_session( Sess ). 新建s</description>
    </item>
    
    <item>
      <title>7.1.3 YawsSession用法</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.1-yaws/7.1.3-session%E7%94%A8%E6%B3%95/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.1-yaws/7.1.3-session%E7%94%A8%E6%B3%95/</guid>
      <description>设置session时，需要运行 1. Url = &amp;ldquo;/&amp;quot;, [{&amp;ldquo;action&amp;rdquo;, Action}|Data] = yaws_api:parse_query( A ), case Action of &amp;ldquo;reg&amp;rdquo; -&amp;gt; [ {&amp;ldquo;userlogin&amp;rdquo;, UserName}, {&amp;ldquo;password&amp;rdquo;, _Pwd}, {&amp;ldquo;passwordtoo&amp;rdquo;, Pwd}, {&amp;ldquo;Email&amp;rdquo;, Email}, {&amp;ldquo;val&amp;rdquo;,_Val} ] = yaws_api:parse_post( A ), try myuser_mod_manager:reg_user( UserName, erlang:md5( Pwd ), Email ) of Name -&amp;gt; Cookie = yaws_api:new_cookie_session(Name), [ yaws_api:redirect(Url), yaws_api:setcookie(&amp;ldquo;haowenjiao&amp;rdquo;,Cookie) ] catch _:_Why -&amp;gt; mnesiaDBA_pub_function:log( _Why, &amp;ldquo;../doc/logs/myuser.access&amp;rdquo; ),</description>
    </item>
    
    <item>
      <title>7.1.4 页面传值</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.1-yaws/7.1.4-%E9%A1%B5%E9%9D%A2%E4%BC%A0%E5%80%BC/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.1-yaws/7.1.4-%E9%A1%B5%E9%9D%A2%E4%BC%A0%E5%80%BC/</guid>
      <description>Post传值 Post = yaws_api:parse_post( A ), Data =[ X|| {, X} &amp;lt;-Post ]。 query 可以接受问好 out(A) -&amp;gt; [{&amp;ldquo;name&amp;rdquo;,Name}|] = yaws_api:parse_query( A ), {bindings, [{&amp;ldquo;A&amp;rdquo;, Name}]}. Post和？都可以使用 case postvar(A,&amp;ldquo;lang&amp;rdquo;) of undefined -&amp;gt; &amp;ldquo;None&amp;rdquo;; {ok, Val} -&amp;gt; Val end yaws_api:queryvar( A, &amp;ldquo;lang&amp;rdquo; ) lang代表fo</description>
    </item>
    
    <item>
      <title>7.1.5 Ehtml</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.1-yaws/7.1.5-ehtml/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.1-yaws/7.1.5-ehtml/</guid>
      <description>Data1 ={p, [{style, &amp;ldquo;display:none&amp;rdquo;},{id,&amp;ldquo;nowpage&amp;rdquo;}],[Page]}, {ehtml, Data1} {ehtml, {table, [], {tr, [], [{td, [{width, &amp;ldquo;30%&amp;quot;}], {table,[{border, &amp;ldquo;1&amp;rdquo;}, {bgcolor, beige},{bordercolor, black}], [{tr, [], {td, [], pb(&amp;ldquo;User: ~s&amp;rdquo;, [User])}}] } }, {td, [{align, right}], {img, [{src, &amp;ldquo;junk.jpg&amp;rdquo;}]} }] } } }.</description>
    </item>
    
    <item>
      <title>7.1.6 SSIbindings</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.1-yaws/7.1.6-ssibindings/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.1-yaws/7.1.6-ssibindings/</guid>
      <description>test.yaws out( A ) -&amp;gt; {ehtml,[{ssi,&amp;ldquo;ssi_ex1.txt&amp;rdquo;,&amp;quot;@&amp;quot;,[{&amp;ldquo;a&amp;r</description>
    </item>
    
    <item>
      <title>7.1.7 Bug</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.1-yaws/7.1.7-bug/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.1-yaws/7.1.7-bug/</guid>
      <description>1 Failed to load setuid_drv (from &amp;ldquo;/httx/yaws/lib/yaws/priv/lib&amp;rdquo;) : &amp;ldquo;Driver compiled with incorrect version of erl_driver.h&amp;rdquo; 疑似原因： 1.It looks like you&amp;rsquo;ve compiled on one version of Erlang and are trying to run it with different version.（由A版本编译，由B版本运行） 2.安装Aerla</description>
    </item>
    
    <item>
      <title>7.2.1 安装</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.2-leofs/7.2.1-%E5%AE%89%E8%A3%85/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.2-leofs/7.2.1-%E5%AE%89%E8%A3%85/</guid>
      <description>1.download 源码 git clone https://github.com/leo-project/leofs.git 2.需要的依赖项：Erlang 3.打开项目的readme，按照其中安装方法安装 cd leofs/ make make release cp -r package {LEOFS_DEPLOYED_DIR} cd {LEOFS_DEPLOYED_DIR}/</description>
    </item>
    
    <item>
      <title>7.2.2 端口占用</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.2-leofs/7.2.2-%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.2-leofs/7.2.2-%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/</guid>
      <description>http://leo-project.net/leofs/docs/installation/install_4.html Firewall Rules In order for LeoFS to work correctly, it is necessary to set and check the firewall rules in your environment as follows: Subsystem Direction Ports Notes LeoFS Manager-Master Incoming 10010/Manager console LeoFS Manager-Master Incoming 4369/ Erlang Port Mapper LeoFS Manager-Master Incoming 4020/SNMP Listen Port LeoFS Manager-Master Outgoing/4369 Erlang Port Mapper LeoFS Manager-Slave Incoming 10011/Manager console LeoFS Manager-Slave Incoming 4369/ Erlang Port Mapper LeoFS Manager-Slave Incoming 4021/SNMP Listen</description>
    </item>
    
    <item>
      <title>7.2.3 Shell命令</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.2-leofs/7.2.3-shell%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.2-leofs/7.2.3-shell%E5%91%BD%E4%BB%A4/</guid>
      <description>Shell Description 一般命令 leofs-adm status [] • Retrieve status of every node (default)检索所有节点的状态 • Retrieve status of the specified node 检索特定节点的状态 leofs-adm whereis • Retrieve an assigned object by the file-path 检索指定的object</description>
    </item>
    
    <item>
      <title>7.2.4 storageShell</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.2-leofs/7.2.4-storageshell/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.2-leofs/7.2.4-storageshell/</guid>
      <description>Shell Description 描述 leofs-adm detach • Remove the storage node from the LeoFS storage cluster 移除 • Current status: running | stop 可以使用 leofs-adm rollback storage_0@127.0.0.1 恢复（当node状态是detach时） leofs-adm suspend • Suspend a storage node for maintenance 挂起 • This command is NOT similar to the detach</description>
    </item>
    
    <item>
      <title>7.7.1.1 convert</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.7-graphicsmagick/7.7.1-%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/7.7.1.1-convert/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.7-graphicsmagick/7.7.1-%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/7.7.1.1-convert/</guid>
      <description>GraphicsMagick缩放比例的精准控制 原始图片是input.jpg，尺寸：160x120只缩小不放大 gm convert input.jpg -resize &amp;ldquo;500x500&amp;gt;&amp;rdquo; output_1.jpg 加了&amp;gt;,表示只</description>
    </item>
    
    <item>
      <title>7.7.2.1 安装</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.7-graphicsmagick/7.7.2-%E9%85%8D%E7%BD%AE/7.7.2.1-%E5%AE%89%E8%A3%85/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.7-graphicsmagick/7.7.2-%E9%85%8D%E7%BD%AE/7.7.2.1-%E5%AE%89%E8%A3%85/</guid>
      <description>1.编译成动态库。 ./configure &amp;ndash;enable-shared make sudo make install 编写一个例子 gcc -o demo demo.c -O GraphicsMagick-config --cppflags --ldflags --libs 执行时出现：libGraphicsMagick++.so.12: cannot open shared object file: No such file</description>
    </item>
    
    <item>
      <title>7.7.3.1 运行警告1</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.7-graphicsmagick/7.7.3-%E5%BC%82%E5%B8%B8%E6%83%85%E5%86%B5/7.7.3.1-%E8%BF%90%E8%A1%8C%E8%AD%A6%E5%91%8A1/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.7-graphicsmagick/7.7.3-%E5%BC%82%E5%B8%B8%E6%83%85%E5%86%B5/7.7.3.1-%E8%BF%90%E8%A1%8C%E8%AD%A6%E5%91%8A1/</guid>
      <description>terminate called after throwing an instance of &amp;lsquo;Magick::WarningCoder&amp;rsquo; what(): Magick: profile matches sRGB but writing iCCP instead (q1_80x80_100%.png) reported by coders/png.c:1076 (PNGWarningHandler) http://my.oschina.net/1pei/blog/479162#OSC_h1_1 libpng 1.6+更严格的检查会对original HP/MS sRGB profile报警。老的profile使用D50</description>
    </item>
    
    <item>
      <title>7.10.1 操作</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.10-mnesia/7.10.1-%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.10-mnesia/7.10.1-%E6%93%8D%E4%BD%9C/</guid>
      <description>mnesia:create_table(Name, Opts). [ {type, bag||set||ordered_set|| duplicate bag}, %默认值 set *{disc_only_copies||disc_copies||ram_copies, NodeList}, %默认值是 [node()],可以同时新建三种类型的表 {index,AttributeNameList}, %AttributeNameList 是一个原子类型的属性名列表 {snmp, SnmpStruct} %SnmpStruct 在 SNMP 用户指南中描述，表示</description>
    </item>
    
    <item>
      <title>7.10.2 增删改查</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.10-mnesia/7.10.2-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.10-mnesia/7.10.2-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</guid>
      <description>查询 mnesia:add_table_index( test, name). mnesia:del_table_index( test, name). mnesia:index_read(Table, Arg, Attr). 建表时，为该表建立索引使用元组{index, [attr1, attr2,....} mnesia:index_match_object( alias, Pattern, #alias.alias_name, read ). fun() -&amp;gt; mnesia:write( New ) end fun() -&amp;gt; mnesia:read( { table, Id } ) end fun() -&amp;gt; mnesia:delete( {product, Id} ) end fun() -&amp;gt; [R] = mnesia:read( table, Id,</description>
    </item>
    
    <item>
      <title>7.10.3 表分片</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.10-mnesia/7.10.3-%E8%A1%A8%E5%88%86%E7%89%87/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.10-mnesia/7.10.3-%E8%A1%A8%E5%88%86%E7%89%87/</guid>
      <description>数据分片：本质把一张表分成多张表， 当使用mnesia:activity/4操作数据时，分片属性被使用，会到多张表中进程操作 mnesia:activity/4 WriteFun = fun( Keys ) -&amp;gt; [ mnesia:write(</description>
    </item>
    
    <item>
      <title>7.10.4 锁</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.10-mnesia/7.10.4-%E9%94%81/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.10-mnesia/7.10.4-%E9%94%81/</guid>
      <description>读锁。在记录的副本能被读取之前设置读锁。. 写锁。当事务写一条记录时,首先在这条记录的所有副本上设置写锁。 读表锁。如果事务要扫描整张表来搜索一</description>
    </item>
    
    <item>
      <title>7.10.5 分布式</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.10-mnesia/7.10.5-%E5%88%86%E5%B8%83%E5%BC%8F/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.10-mnesia/7.10.5-%E5%88%86%E5%B8%83%E5%BC%8F/</guid>
      <description>解决方案：erl -name a@yujian 1.在两台机器上分别建立各自一个节点，我使用我的电脑和我后面的电脑 我的机器 test机器 这时运行： mnesia:create_schema( [ yujian@yujian, test@DP-201001010138 ]).出现错误 我</description>
    </item>
    
    <item>
      <title>7.10.6 高级特性</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.10-mnesia/7.10.6-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.10-mnesia/7.10.6-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/</guid>
      <description>原文链接：http://hideto.iteye.com/blog/235413 本章描述了构建分布式、容错的Mnesia数据库相关的高级特性</description>
    </item>
    
    <item>
      <title>7.10.7 ets</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.10-mnesia/7.10.7-ets/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.10-mnesia/7.10.7-ets/</guid>
      <description>ETS基础 ETS查询时间是常量,例外是如果使用ordered_set查询时间与logN成正比(N为存储的数据量) ETS Table由进程创建,进程</description>
    </item>
    
    <item>
      <title>7.11.1.1 代码片段</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.11-riak/7.11.1-%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/7.11.1.1-%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.11-riak/7.11.1-%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/7.11.1.1-%E5%91%BD%E4%BB%A4/</guid>
      <description>keys * Keys invite*</description>
    </item>
    
    <item>
      <title>7.11.2.1 配置</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.11-riak/7.11.2-%E9%85%8D%E7%BD%AE/7.11.2.1-%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 30 Aug 2019 10:56:29 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.11-riak/7.11.2-%E9%85%8D%E7%BD%AE/7.11.2.1-%E9%85%8D%E7%BD%AE/</guid>
      <description>配置 值 daemonize no 是否后台启动 yes requirepass foobared 登录密码 appendfsync no 当设置appendfsync为no的时候，Redis不会主动调用fsync去将AOF日志内容同步到磁</description>
    </item>
    
    <item>
      <title>7.12.1.1 关键字</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.12-mysql/7.12.1-sql%E7%89%87%E6%AE%B5/7.12.1.1-%E5%85%B3%E9%94%AE%E5%AD%97/</link>
      <pubDate>Fri, 30 Aug 2019 10:56:29 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.12-mysql/7.12.1-sql%E7%89%87%E6%AE%B5/7.12.1.1-%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
      <description>WITH -- WITH WITH ali AS (SELECT * FROM rpt_kh_amount_conf) SELECT ali.val FROM ali NOT EXISTS SELECT * FROM `account` a1 WHERE a1.deleted = 0 AND a1.status = 1 AND a1.created_time &amp;gt;= &amp;#39;2021-08-16 14:10:31&amp;#39; AND NOT EXISTS (SELECT 1 FROM account a2 WHERE a2.uid = a1.uid AND a2.deleted = 0 AND a2.created_time &amp;lt; &amp;#39;2021-08-16 14:10:31&amp;#39;) JSON SELECT JSON_EXTRACT(CHARGE_DATA, &amp;#34;$[0].amount&amp;#34;) as &amp;#39;取值&amp;#3</description>
    </item>
    
    <item>
      <title>7.12.1.2 常用语句</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.12-mysql/7.12.1-sql%E7%89%87%E6%AE%B5/7.12.1.2-%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Fri, 30 Aug 2019 10:56:29 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.12-mysql/7.12.1-sql%E7%89%87%E6%AE%B5/7.12.1.2-%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5/</guid>
      <description>-- 1.SELECT order by 字段 asc或desc（即升级或降序） SELECT * FROM attr -- 选择整张表的数据 SELECT uid FROM `attr` WHERE uid &amp;gt;= 163 LIMIT 5, 1; -- 从attr表选择uid字段，并且uid&amp;gt;</description>
    </item>
    
    <item>
      <title>7.12.2.1 my.cnf</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.12-mysql/7.12.2-%E9%85%8D%E7%BD%AE/7.12.2.1-my.cnf/</link>
      <pubDate>Fri, 30 Aug 2019 10:56:29 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.12-mysql/7.12.2-%E9%85%8D%E7%BD%AE/7.12.2.1-my.cnf/</guid>
      <description>cnf [mysqld] port = 63099 #端口 max_connections = 1024 #最大连接数量 default-storage-engine=INNODB character-set-server=utf8mb4 collation-server = utf8mb4_unicode_ci slow_query_log = on #开启慢查询日志 long_query_time=3 #3秒以上 #slow-query-log-file = /home/db/madb/log/slow-query.log default-authentication-plugin=mysql_native_password table_open_cache=2000 #表文件句柄缓存（表数据是存储在磁盘上的，缓存磁盘</description>
    </item>
    
    <item>
      <title>7.12.3 日志</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.12-mysql/7.12.3-%E6%97%A5%E5%BF%97/</link>
      <pubDate>Fri, 30 Aug 2019 10:56:29 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.12-mysql/7.12.3-%E6%97%A5%E5%BF%97/</guid>
      <description>日志 #日志 SHOW MASTER LOGS; #获取bin日志 SHOW MASTER STATUS;#日志状态 SHOW BINLOG EVENTS [IN &amp;#39;log_name&amp;#39;] [FROM pos] [LIMIT [OFFSET,] ROW_COUNT]; SHOW BINLOG EVENTS IN &amp;#39;mysql-bin.000001&amp;#39; LIMIT 0, 1000;#日志文件内容 FLUSH LOGS;#自此刻开</description>
    </item>
    
    <item>
      <title>7.12.4 主从</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.12-mysql/7.12.4-%E4%B8%BB%E4%BB%8E/</link>
      <pubDate>Fri, 30 Aug 2019 10:56:29 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.12-mysql/7.12.4-%E4%B8%BB%E4%BB%8E/</guid>
      <description>主从 修改/etc/my.cnf，实现主主配置。 如果不存在/etc/my.cnf，则复制support-files/my-default.cn</description>
    </item>
    
    <item>
      <title>7.12.5 msyqldump</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.12-mysql/7.12.5-msyqldump/</link>
      <pubDate>Fri, 30 Aug 2019 10:56:29 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.12-mysql/7.12.5-msyqldump/</guid>
      <description>msyqldump # 导出数据到文件 mysqldump -uroot -p123456 --host=127.0.0.1 --port=3306 -C --all-databases &amp;gt; /backup/test/${DATE}.sql # 导出数据到远程数据库 mysqldump --default-character-set=utf8mb4 --host=127.0.0.1 -uusername -ppassword --opt dbname | mysql --host=127.0.0.2 -uusernameb -ppasswordb --default-character-set=utf8mb4 -C dbnamenew mysqldump --default-character-set=utf8mb4 --host=192.168.1.46 -P 55001 -uroot -p123456 --opt test | mysql --host=192.168.1.85 -P 55001 -uroot -p123456 --default-character-set=utf8mb4 -C test # --opt命</description>
    </item>
    
    <item>
      <title>7.12.6 查询计划Explain</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.12-mysql/7.12.6-%E6%9F%A5%E8%AF%A2%E8%AE%A1%E5%88%92explain/</link>
      <pubDate>Fri, 30 Aug 2019 10:56:29 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.12-mysql/7.12.6-%E6%9F%A5%E8%AF%A2%E8%AE%A1%E5%88%92explain/</guid>
      <description>id SELECT识别符。这是SELECT查询序列号。这个不重要 select_type 1、 SIMPLE 表示简单查询，其中不包含连接查询和子查询。 2、 PRIMARY 表示主查询，或者是最外面</description>
    </item>
    
    <item>
      <title>7.12.7 存储引擎</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.12-mysql/7.12.7-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</link>
      <pubDate>Fri, 30 Aug 2019 10:56:29 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.12-mysql/7.12.7-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</guid>
      <description>特点 Myisam BDB Memory InnoDB Archive 存储限制 没有 没有 有 64TB 没有 事务安全 支持 支持 锁机制 表锁 页锁 表锁 行锁 行锁 B树索引 支持 支持 支持 支持 哈希索引 支持 支持 全文索引 支持 集群索引</description>
    </item>
    
    <item>
      <title>7.14.2.1 配置</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.14-postgresql/7.14.2-%E9%85%8D%E7%BD%AE/7.14.2.1-%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 30 Aug 2019 10:56:29 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.14-postgresql/7.14.2-%E9%85%8D%E7%BD%AE/7.14.2.1-%E9%85%8D%E7%BD%AE/</guid>
      <description>选项 默认值 说明 是否优化 原因 max_connections 100 允许客户端连接的最大数目 否 因为在测试的过程中，100个连接已经足够 fsync on 强制把数据同步更新到磁盘 是 因为系统的IO</description>
    </item>
    
    <item>
      <title>7.8.2.1 分布式</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.8-mongodb/7.8.2-%E9%85%8D%E7%BD%AE/7.8.2.1-%E5%88%86%E5%B8%83%E5%BC%8F/</link>
      <pubDate>Fri, 30 Aug 2019 10:56:29 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.8-mongodb/7.8.2-%E9%85%8D%E7%BD%AE/7.8.2.1-%E5%88%86%E5%B8%83%E5%BC%8F/</guid>
      <description>分片，根据分片数据库做该分片的集群 mongo分布式：Replica Set / Sharding 参考档案： http://blog.csdn.net/luonanqin/article/details/8497860 《MongoDB权威指南》第九章 集群方式： 主节点（pri</description>
    </item>
    
    <item>
      <title>7.10.8 dets</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.10-mnesia/7.10.8-dets/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.10-mnesia/7.10.8-dets/</guid>
      <description>select(Name, MatchSpec, N) dets:delete_all_objects(Name) </description>
    </item>
    
    <item>
      <title>7.10.9 过载分析</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.10-mnesia/7.10.9-%E8%BF%87%E8%BD%BD%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.10-mnesia/7.10.9-%E8%BF%87%E8%BD%BD%E5%88%86%E6%9E%90/</guid>
      <description>dump_log_time_threshold %转储间隔次数 dump_log_write_threshold %转储次数 dc_dump_limit %出发dump的默认值，当filesize(.DCL) &amp;gt; filesize(.DCD) / dc_dump_limit，把*.DCL的记录存储</description>
    </item>
    
    <item>
      <title>7.12.8 命令操作</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.12-mysql/7.12.8-%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Fri, 30 Aug 2019 10:56:29 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.12-mysql/7.12.8-%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/</guid>
      <description>Linux中进入mysql mysql -u root mysql -u root::用户名 -p 回车 password::输入密码 Linux中退出mysql quit; 回车 查看进程中带有mys</description>
    </item>
    
    <item>
      <title>Eventslist</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.3-ejabberd/eventslist/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.3-ejabberd/eventslist/</guid>
      <description>Here is the list of available events in ejabberd. The types of the corresponding hooks parameters is described below.
adhoc_local_items(Acc, From, To, Lang) -&amp;gt; Adhoc adhoc_sm_items(Acc, From, To, Lang) -&amp;gt; Adhoc anonymous_purge_hook(User, Server) -&amp;gt; ok c2s_auth_result(bool(), User, Server, IP) -&amp;gt; ok c2s_broadcast_recipients(Acc, Server, StateData, Type, From, Packet) -&amp;gt; [] c2s_filter_packet(Acc, Server, C2SState, Feature, To, Packet) -&amp;gt; bool() c2s_filter_packet_in(Acc, JID, From, To) -&amp;gt; FixedPacket c2s_loop_debug({route, From, To, Packet}) -&amp;gt; ok c2s_loop_debug(Text) -&amp;gt; ok c2s_loop_debug({xmlstreamelement, Packet}) -&amp;gt; ok c2s_post_auth_features(Acc, Server) -&amp;gt; [] c2s_presence_in(Acc, {From, To, Packet}) -&amp;gt; C2SState c2s_stream_features(Acc, Server) -&amp;gt; [] c2s_unauthenticated_iq(Acc, Server, IQ, IP) -&amp;gt; empty | Packet c2s_update_presence(Acc, User, Server) -&amp;gt; Packet caps_update(From, To, get_features(Server, Caps)) -&amp;gt; ok csi_filter_stanza(Acc, Stanza) -&amp;gt; send disco_info(Acc, Host, Module, Node, Lang) -&amp;gt; [] disco_local_features(Acc, From, To, Node, Lang) -&amp;gt; Disco disco_local_identity(Acc, From, To, Node, Lang) -&amp;gt; [] disco_local_items(Acc, From, To, Node, Lang) -&amp;gt; Disco disco_sm_features(Acc, From, To, Node, Lang) -&amp;gt; Disco disco_sm_identity(Acc, From, To, Node, Lang) -&amp;gt; [] disco_sm_items(Acc, From, To, Node, Lang) -&amp;gt; Disco filter_packet(Acc) -&amp;gt; OrigPacket forbidden_session_hook(JID) -&amp;gt; ok http_request_debug({LocalPath, Request}) -&amp;gt; ok local_send_to_resource_hook(From, To, Packet) -&amp;gt; ok muc_filter_message(Stanza, MUCState, RoomJID, FromJID, FromNick) -&amp;gt; Stanza drop muc_filter_presence(Stanza, MUCState, RoomJID, FromJID, FromNick) -&amp;gt; Stanza drop offline_message_hook(From, To, Packet) -&amp;gt; ok presence_probe_hook(From, To, Pid) -&amp;gt; ok privacy_check_packet(Acc, User, Server, PrivacyList, {From, To, Packet}, Dir) -&amp;gt; Auth privacy_get_user_list(Acc, User, Server) -&amp;gt; #userlist{} privacy_iq_get(Acc, From, To, IQ, PrivacyList) -&amp;gt; {result, Packet} | {error, Error} privacy_iq_set(Acc, From, To, IQ) -&amp;gt; {result, Packet} | {error, Error} privacy_updated_list(Acc, PrivacyList, PrivList) -&amp;gt; bool() pubsub_create_node(ServerHost, Host, Node, NodeId, NodeOptions) -&amp;gt; ok pubsub_delete_node(ServerHost, Host, Node, NodeId) -&amp;gt; ok pubsub_publish_item(ServerHost, Node, Publisher, service_jid(Host), ItemId, Payload) -&amp;gt; ok register_user(User, Server) -&amp;gt; ok remove_user(User, Server) -&amp;gt; ok reopen_log_hook() -&amp;gt; ok resend_offline_messages_hook(Acc, User, Server) -&amp;gt; [] resend_subscription_requests_hook(Acc, User, Server) -&amp;gt; [] roster_get(Acc, {User, Server}) -&amp;gt; [] roster_get_jid_info(Acc, User, Server, From) -&amp;gt; []} roster_get_subscription_lists(Acc, User, Server) -&amp;gt; []} roster_get_versioning_feature(Acc, Server) -&amp;gt; [] roster_groups(Acc, ServerHost) -&amp;gt; [] roster_in_subscription(Acc, User, Server, From, SubscriptionInType, Reason) -&amp;gt; bool() roster_out_subscription(User, Server, To, SubscriptionOutType) -&amp;gt; ok roster_process_item(Acc, Server) -&amp;gt; RosterItem s2s_allow_host(Acc, Host, Host) -&amp;gt; Auth s2s_connect_hook(Host, Server) -&amp;gt; ok s2s_loop_debug({xmlstreamelement, Packet}) -&amp;gt; ok s2s_receive_packet(From, To, Packet) -&amp;gt; ok s2s_send_packet(From, To, Packet) -&amp;gt; ok s2s_stream_features(Acc, Server) -&amp;gt; [] set_presence_hook(User, Server, Resource, Presence) -&amp;gt; ok sm_register_connection_hook(SID, JID, Info) -&amp;gt; ok sm_remove_connection_hook(SID, JID, Info) -&amp;gt; ok unset_presence_hook(User, Server, Resource, Status) -&amp;gt; ok user_available_hook(JID) -&amp;gt; ok user_ping_timeout(JID) -&amp;gt; ok user_receive_packet(Packet, C2SState, JID, From, To) -&amp;gt; Packet user_send_packet(Packet, C2SState, From, To) -&amp;gt; Packet vcard_set(User, Server, VCARD) -&amp;gt; ok webadmin_menu_host(Acc, Host, Lang) -&amp;gt; [] webadmin_menu_hostnode(Acc, Host, Node, Lang) -&amp;gt; [] webadmin_user(Acc, User, Server, Lang) -&amp;gt; [] webadmin_user_parse_query(Acc, Action, User, Server, Query) -&amp;gt; []</description>
    </item>
    
    <item>
      <title>first-content</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.17-hugo/first-content/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.17-hugo/first-content/</guid>
      <description>Get Grav   Get Grav with icon  Get Grav with icon right      test expand   Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.</description>
    </item>
    
    <item>
      <title>hooksformoduledevelopers</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.3-ejabberd/hooksformoduledevelopers/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.3-ejabberd/hooksformoduledevelopers/</guid>
      <description>filter_packet (run_hook) ejabberd_hooks:run_fold(filter_packet, {OrigFrom, OrigTo, OrigPacket}, []).</description>
    </item>
    
    <item>
      <title>mod_echo</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.3-ejabberd/mod_echo.erl/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.3-ejabberd/mod_echo.erl/</guid>
      <description>Ejabberd扩展案例 源码：https://github.com/processone/ejabberd/blob/master/src/</description>
    </item>
    
    <item>
      <title>yaws</title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.1-yaws/7.1.1-yaws.conf/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.1-yaws/7.1.1-yaws.conf/</guid>
      <description>http://yaws.hyber.org/yman.yaws?page=yaws.conf yaws默认上传文件大小为：2048 partial_post_size = nolimit 上传的文件无限大 post限制 partial_post_size = 2048 缓存机制 max_num_cached_files max_num_cached_bytes max_size_cached_file cache_refresh_secs max_connections list_dir errormod_crash = Module errormod_401 = Module errormod_404 = Module Module:out404(Arg, GC, SC) Arg - a #arg{} record GC - a #gconf{}</description>
    </item>
    
    <item>
      <title></title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.14-postgresql/postgresql_%E5%9D%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.14-postgresql/postgresql_%E5%9D%91/</guid>
      <description>使用中出现的问题 NOT IN 使用 LEFT JOIN / IS NULL或NOT EXISTS而不是NOT IN NOT IN正如我们之前讨论的那样，由于它处理NULL列表中的值的方式，</description>
    </item>
    
    <item>
      <title></title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.14-postgresql/postgresql%E5%A4%96%E9%83%A8%E8%A1%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.14-postgresql/postgresql%E5%A4%96%E9%83%A8%E8%A1%A8/</guid>
      <description>外部表 postgres_fdw 添加extension create extension postgres_fdw; select * from pg_foreign_data_wrapper; 创建远端数据库 create database dblink TEMPLATE template0; 本地创建server select * from pg_foreign_server; create server ex_db foreign data wrapper postgres_fdw options(host &amp;lsquo;127.0.0.1&amp;rsquo;,port &amp;lsquo;5866&amp;rsquo;,dbname &amp;lsquo;highgo&amp;rsquo;); create server mysql_config foreign data wrapper postgres_fdw options(host &amp;lsquo;192.168.69.161&amp;rsquo;,port &amp;lsquo;3306&amp;rsquo;,dbname &amp;lsquo;config&amp;rsquo;);</description>
    </item>
    
    <item>
      <title></title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.14-postgresql/postgresql%E6%97%B6%E5%BA%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BE%8B%E5%AD%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.14-postgresql/postgresql%E6%97%B6%E5%BA%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BE%8B%E5%AD%90/</guid>
      <description>时序数据库插件 psql -U postgres -h 127.0.0.1 create database nyc_data; \c nyc_data CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE; CREATE TABLE conditions ( time TIMESTAMPTZ NOT NULL, location TEXT NOT NULL, temperature DOUBLE PRECISION NULL, humidity DOUBLE PRECISION NULL ); SELECT create_hypertable(&amp;#39;conditions&amp;#39;, &amp;#39;time&amp;#39;); INSERT INTO conditions(time, location, temperature, humidity) VALUES (NOW(), &amp;#39;office&amp;#39;, 70.0, 50.0); SELECT * FROM conditions ORDER BY time DESC LIMIT 100;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.15-elk/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.15-elk/install/</guid>
      <description>安装 docker安装 docker run -d --restart=always --privileged=true -p 9200:9200 -p 9300:9300 -e &amp;#34;discovery.type=single-node&amp;#34; --name elasticsearch1 -v /data1/project/elk/elasticsearch/config:/usr/share/elasticsearch/config/ docker.elastic.co/elasticsearch/elasticsearch:7.10.2 docker run -d --restart=always --privileged=true --link elasticsearch-1:elasticsearch -p 5601:5601 --name kibana1 docker.elastic.co/kibana/kibana:7.10.2</description>
    </item>
    
    <item>
      <title></title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.16-clickhouse/http/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.16-clickhouse/http/</guid>
      <description>curl ping curl &amp;#39;http://localhost:8123/ping&amp;#39; select echo &amp;#39;SELECT 1&amp;#39; | curl &amp;#39;http://192.168.1.185:8123/?user=default&amp;amp;password=1Aa_abbccd&amp;#39; -d @- echo &amp;#39;SELECT number FROM numbers LIMIT 10&amp;#39; | curl &amp;#39;http://192.168.1.185:8123/?user=default&amp;amp;password=1Aa_abbccd&amp;amp;database=system&amp;#39; --data-binary @- insert echo &#39;INSERT INTO t VALUES (1),(2),(3)&#39; | POST &#39;http://localhost:8123/?database=test_db&#39; </description>
    </item>
    
    <item>
      <title></title>
      <link>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.16-clickhouse/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.16-clickhouse/install/</guid>
      <description>Quick start 安装 https://clickhouse.tech/#quick-start 配置 &amp;lt;http_port&amp;gt;8123&amp;lt;/http_port&amp;gt; &amp;lt;tcp_port&amp;gt;8124&amp;lt;/tcp_port&amp;gt; &amp;lt;mysql_port&amp;gt;8125&amp;lt;/mysql_port&amp;gt; &amp;lt;listen_host&amp;gt;::&amp;lt;/listen_host&amp;gt; 用户 如何生成密码 PASSWORD=$(base64 &amp;lt; /dev/urandom | head -c8); echo &amp;#34;$PASSWORD&amp;#34;; echo -n &amp;#34;$PASSWORD&amp;#34; | sha256sum | tr -d &amp;#39;-&amp;#39; &amp;lt;users&amp;gt; &amp;lt;default&amp;gt; &amp;lt;password&amp;gt;705c37761366c70774b786a9d800af2369759c1fc73ff61f2396648dd5daa5aa&amp;lt;/password&amp;gt; &amp;lt;networks incl=&amp;#34;networks&amp;#34; replace=&amp;#34;replace&amp;#34;&amp;gt; &amp;lt;ip&amp;gt;::/0&amp;lt;/ip&amp;gt; &amp;lt;/networks&amp;gt; &amp;lt;profile&amp;gt;default&amp;lt;/profile&amp;gt; &amp;lt;quota&amp;gt;default&amp;lt;/quota&amp;gt; &amp;lt;/default&amp;gt; &amp;lt;ck&amp;gt; &amp;lt;password_sha256_hex&amp;gt;967f3bf355dddfabfca1c9f5cab39352b2ec1cd0b05f9e1e6b8f629705fe7d6e&amp;lt;/password_sha256_hex&amp;gt; &amp;lt;networks incl=&amp;#34;networks&amp;#34; replace=&amp;#34;replace&amp;#34;&amp;gt; &amp;lt;ip&amp;gt;::/0&amp;lt;/ip&amp;gt; &amp;lt;/networks&amp;gt; &amp;lt;profile&amp;gt;readonly&amp;lt;/profile&amp;gt; &amp;lt;quota&amp;gt;default&amp;lt;/quota&amp;gt; &amp;lt;/ck&amp;gt; &amp;lt;/users&amp;gt; clickhouse-client -h 127.0.0.1 -u log --port 8124 --password ldsLjNhB clickhouse-client -h 127.0.0.1</description>
    </item>
    
  </channel>
</rss>