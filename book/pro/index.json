[
{
	"uri": "https://yujian1018.github.io/book/pro/1.-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",
	"title": "1. 基础知识",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://yujian1018.github.io/book/pro/1.-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.1-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/",
	"title": "1.1 正则表达式",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://yujian1018.github.io/book/pro/2.-%E7%BD%91%E7%BB%9C/",
	"title": "2. 网络",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://yujian1018.github.io/book/pro/3.-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/",
	"title": "3. 操作系统",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://yujian1018.github.io/book/pro/4.-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",
	"title": "4. 数据结构",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://yujian1018.github.io/book/pro/5.-%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/",
	"title": "5. 数据挖掘",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://yujian1018.github.io/book/pro/6.-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/",
	"title": "6. 软件架构",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://yujian1018.github.io/book/pro/6.-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/6.1-soa/",
	"title": "6.1 SOA",
	"tags": [],
	"description": "",
	"content": "![http://baike.baidu.com/view/453197.htm ]\n"
},
{
	"uri": "https://yujian1018.github.io/book/pro/6.-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/6.2-restful/",
	"title": "6.2 RESTful",
	"tags": [],
	"description": "",
	"content": "gitAPI: https://developer.github.com/\n域名\nhttps://example.org/api/\n版本\nAccept: vnd.example-com.foo+json; version=1.0\n路径（Endpoint）\nhttps://api.example.com/v1/zoos https://api.example.com/v1/animals https://api.example.com/v1/employees\nHTTP动词\nGET（SELECT）：从服务器取出资源（一项或多项）。 POST（CREATE）：在服务器新建一个资源。 PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。 PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。 DELETE（DELETE）：从服务器删除资源。 HEAD：获取资源的元数据。 OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。\nGET /zoos：列出所有动物园 POST /zoos：新建一个动物园 GET /zoos/ID：获取某个指定动物园的信息 PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息） PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息） DELETE /zoos/ID：删除某个动物园 GET /zoos/ID/animals：列出某个指定动物园的所有动物 DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物\n过滤信息（Filtering）\n?limit=10：指定返回记录的数量 ?offset=10：指定返回记录的开始位置。 ?page=2\u0026amp;per_page=100：指定第几页，以及每页的记录数。 ?sortby=name\u0026amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。 ?animal_type_id=1：指定筛选条件\n状态码\n200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。 201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。 202 Accepted - []：表示一个请求已经进入后台排队（异步任务） 204 NO CONTENT - [DELETE]：用户删除数据成功。 400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。 401 Unauthorized - []：表示用户没有权限（令牌、用户名、密码错误）。 403 Forbidden - [] 表示用户得到授权（与401错误相对），但是访问是被禁止的。 404 NOT FOUND - []：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。 406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。 410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。 422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。 500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。\n返回结果\nGET /collection：返回资源对象的列表（数组） GET /collection/resource：返回单个资源对象 POST /collection：返回新生成的资源对象 PUT /collection/resource：返回完整的资源对象 PATCH /collection/resource：返回完整的资源对象 DELETE /collection/resource：返回一个空文档\n最常见的一种设计错误，就是URI包含动词。因为\u0026quot;资源\u0026quot;表示一种实体，所以应该是名词，URI不应该有动词，动词应该放在HTTP协议中。 POST /transaction HTTP/1.1 Host: 127.0.0.1 from=1\u0026amp;to=2\u0026amp;amount=500.00\n"
},
{
	"uri": "https://yujian1018.github.io/book/pro/6.-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/6.3-%E6%9E%B6%E6%9E%84/",
	"title": "6.3 架构",
	"tags": [],
	"description": "",
	"content": "1．问题领域——我们的架构是为解决什么类型的问题而设计的？软件架构 一定不是通用的，而是为解决某一类特定问题而设计的。缺少了关于用 来解决哪类问题的描述的架构是不完整的。 2．哲学—— 软件构造方法背后的原理是什么？架构的核心思想是什么？ 3．软件构造指南——我们如何来规划一个系统？我们需要一个明确的软件 构造指南集。我们的系统将由一个程序员团队来编写和维护——所以对 所有的程序员和系统设计者来说，理解系统的架构和它的潜在哲学是很 重要的。从实用性的角度来讲，这些知识以软件构造指南的方式表现出 来更便于维持。一个完整的软件构造指南集包括编程规则集、例子程序 和培训资料等等。 4．预先定义好的部件——以“从一组预先定义好的部件中选择”的方式进 行设计远比“从头设计”的方式要来得容易。Erlang 的 OTP 库包含了一 个完整的现成部件集（称之 behaviour 库），一些常用的系统都可以使用 这些部件构建起来。例如 gen_server 这种 behaviour 就可以用来构建 client-server 系统，gen_event 这种 behaviour 可以用来构建基于事件 （event-based）的程序。关于预定义部件的更完整的讨论见 6.1 节。6.2.2 节将给出一个关于如何使用 gen_server 这种 behaviour 来编写一个服务器 软件的简单例子。 5．描述方式——我们如何描述某一部件的接口？我们如何描述系统中两个 部件之间的通信协议？我们如何来描述系统中的静态和动态结构？为了 回答这些问题，我们将介绍一些专门的符号。其中一些用来描述程序的 API，而其他的则用来描述协议和系统结构。 6．配置方式——我们如何来启动、停止和配置我们的系统？我们可以在系 统工作过程中进行重配置吗？\n"
},
{
	"uri": "https://yujian1018.github.io/book/pro/6.-%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/6.4-%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/",
	"title": "6.4 版本管理",
	"tags": [],
	"description": "",
	"content": " 速度 简单的设计 对非线性开发模式的强力支持（允许上千个并行开发的分支） 完全分布式 有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）  "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/",
	"title": "7. 项目",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.1-yaws/",
	"title": "7.1 yaws",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.1-yaws/7.1.2-api/",
	"title": "7.1.2 yawsapi",
	"tags": [],
	"description": "",
	"content": "1.check_cookie( A ) -\u0026gt; H = A#arg.headers, case yaws_api:find_cookie_val( ?Cook, H#headers.cookie ) of Val when Val /= [] -\u0026gt; case yaws_api:cookieval_to_opaque( Val ) of {ok, Sess} -\u0026gt; {ok, Sess, Val}; { error, { has_session, Sess }} -\u0026gt; {ok, Sess}; Else -\u0026gt; Else end; [] -\u0026gt; {error, nocookie} end. 2.{ok, _Sess, Cookie} -\u0026gt; yaws_api:delete_cookie_session( Cookie ); 删除session 3.yaws_api:new_cookie_session( Sess ). 新建session yaws_api:new_cookie_session( Sess, TTL ). yaws_api:new_cookie_session( Sess, TTL, CleanupPid ). 4.yaws_api:setcookie(\u0026ldquo;haowenjiao\u0026rdquo;,Cookie) -\u0026gt; 估计默认权限为当前文件夹下的所有目录 yaws_api:setcookie( \u0026ldquo;haowenjiao\u0026rdquo;, Cookie, Path ). Path -\u0026gt; session在站点中的权限范围 5.yaws_api:cookieval_to_opaque( CookieVal ). 6.yaws_api:print_cookie_sessions(). 7.yaws_api:replace_cookie_session(Cookie, NewCookie). 替换session\n页面的值的传递 ID = yaws_api:binding(\u0026ldquo;B\u0026rdquo;) P = yaws_api:parse_query(A), L = case lists:keysearch(page, 1, P) of {value, {page, Page}} -\u0026gt; \u0026hellip;.. 当form表单没用method时默认？传值\n1.yaws_api:url_decode(Url), yaws_api:url_encode(Url), 2. out(_Arg) -\u0026gt; L=\u0026quot;http://www.google.com/search?num=20\u0026amp;hl=en\u0026amp;lr=lang_en%7Clang_sv\u0026amp;q=yaws\u0026rdquo;, {redirect, L}. out(_Arg) -\u0026gt; {redirect_local, \u0026ldquo;/redirect2.yaws\u0026rdquo;}.本服务器上 out(_Arg) -\u0026gt; {redirect_local, {any_path, \u0026ldquo;redirect2.yaws\u0026rdquo;}}. [yaws_api:redirect(\u0026quot;/userLogin.yaws\u0026rdquo;)]\n3.yaws_api:binding(\u0026ldquo;A\u0026rdquo;)\n"
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.1-yaws/7.1.3-session%E7%94%A8%E6%B3%95/",
	"title": "7.1.3 YawsSession用法",
	"tags": [],
	"description": "",
	"content": "设置session时，需要运行 1.\nUrl = \u0026ldquo;/\u0026quot;, [{\u0026ldquo;action\u0026rdquo;, Action}|Data] = yaws_api:parse_query( A ), case Action of \u0026ldquo;reg\u0026rdquo; -\u0026gt; [ {\u0026ldquo;userlogin\u0026rdquo;, UserName}, {\u0026ldquo;password\u0026rdquo;, _Pwd}, {\u0026ldquo;passwordtoo\u0026rdquo;, Pwd}, {\u0026ldquo;Email\u0026rdquo;, Email}, {\u0026ldquo;val\u0026rdquo;,_Val} ] = yaws_api:parse_post( A ), try myuser_mod_manager:reg_user( UserName, erlang:md5( Pwd ), Email ) of Name -\u0026gt; Cookie = yaws_api:new_cookie_session(Name), [ yaws_api:redirect(Url), yaws_api:setcookie(\u0026ldquo;haowenjiao\u0026rdquo;,Cookie) ] catch _:_Why -\u0026gt; mnesiaDBA_pub_function:log( _Why, \u0026ldquo;../doc/logs/myuser.access\u0026rdquo; ), {redirect, \u0026ldquo;/userLogin/userLogin.yaws\u0026rdquo;} end; \u0026ldquo;login\u0026rdquo; -\u0026gt; [ {\u0026ldquo;userlogin\u0026rdquo;, UserName}, {\u0026ldquo;password\u0026rdquo;, Pwd} ] = yaws_api:parse_post( A ), case myuser_mod_manager:login_user( UserName, erlang:md5( Pwd ) ) of true -\u0026gt; {redirect, \u0026ldquo;/\u0026quot;}; false -\u0026gt; {redirect, \u0026ldquo;/userLogin/userLogin.yaws?name=\u0026quot;++UserName++\u0026rdquo;\u0026amp;msg=账户名或密码错误\u0026rdquo;} end end. 2.\n"
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.1-yaws/7.1.4-%E9%A1%B5%E9%9D%A2%E4%BC%A0%E5%80%BC/",
	"title": "7.1.4 页面传值",
	"tags": [],
	"description": "",
	"content": "Post传值 Post = yaws_api:parse_post( A ), Data =[ X|| {, X} \u0026lt;-Post ]。 query 可以接受问好 out(A) -\u0026gt; [{\u0026ldquo;name\u0026rdquo;,Name}|] = yaws_api:parse_query( A ), {bindings, [{\u0026ldquo;A\u0026rdquo;, Name}]}. Post和？都可以使用 case postvar(A,\u0026ldquo;lang\u0026rdquo;) of undefined -\u0026gt; \u0026ldquo;None\u0026rdquo;; {ok, Val} -\u0026gt; Val end yaws_api:queryvar( A, \u0026ldquo;lang\u0026rdquo; ) lang代表form表单的一个name case yaws_api:queryvar(A, \u0026ldquo;userlogin\u0026rdquo;) of undefined -\u0026gt; \u0026ldquo;None\u0026rdquo;; {ok, Val} -\u0026gt; Val\nuserlogin代表form表单的一个name\ncase postvar(A,\u0026ldquo;lang\u0026rdquo;) of undefined -\u0026gt; \u0026ldquo;None\u0026rdquo;; {ok, Val} -\u0026gt; Val\n页面的值的传递 ID = yaws_api:binding(\u0026ldquo;B\u0026rdquo;) P = yaws_api:parse_query(A), L = case lists:keysearch(page, 1, P) of {value, {page, Page}} -\u0026gt; \u0026hellip;.. 当form表单没用method时默认？传值 "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.1-yaws/7.1.5-ehtml/",
	"title": "7.1.5 Ehtml",
	"tags": [],
	"description": "",
	"content": "Data1 ={p, [{style, \u0026ldquo;display:none\u0026rdquo;},{id,\u0026ldquo;nowpage\u0026rdquo;}],[Page]}, {ehtml, Data1} {ehtml, {table, [], {tr, [], [{td, [{width, \u0026ldquo;30%\u0026quot;}], {table,[{border, \u0026ldquo;1\u0026rdquo;}, {bgcolor, beige},{bordercolor, black}], [{tr, [], {td, [], pb(\u0026ldquo;User: ~s\u0026rdquo;, [User])}}] } }, {td, [{align, right}], {img, [{src, \u0026ldquo;junk.jpg\u0026rdquo;}]} }] } } }. "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.1-yaws/7.1.6-ssibindings/",
	"title": "7.1.6 SSIbindings",
	"tags": [],
	"description": "",
	"content": "test.yaws out( A ) -\u0026gt; {ehtml,[{ssi,\u0026ldquo;ssi_ex1.txt\u0026rdquo;,\u0026quot;@\u0026quot;,[{\u0026ldquo;a\u0026rdquo;,\u0026ldquo;zippo\u0026rdquo;},{\u0026ldquo;b\u0026rdquo;,\u0026ldquo;我有一头小毛驴\u0026rdquo;}]}]}. ssi_ex1.txt variable a = @a@,b=@b@ test.yaws variable a = zippo,b=我有一头小毛驴\n{ssi, \u0026ldquo;/inc/health_text.inc\u0026rdquo;, \u0026ldquo;%\u0026quot;,[{\u0026ldquo;embed\u0026rdquo;, \u0026ldquo;choosen\u0026rdquo;}]}; {ssi, \u0026ldquo;/inc/health_text.inc\u0026rdquo;, \u0026ldquo;\u0026quot;,[{\u0026quot;\u0026quot;, \u0026ldquo;\u0026quot;}]};\n"
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.1-yaws/7.1.7-bug/",
	"title": "7.1.7 Bug",
	"tags": [],
	"description": "",
	"content": "1 Failed to load setuid_drv (from \u0026ldquo;/httx/yaws/lib/yaws/priv/lib\u0026rdquo;) : \u0026ldquo;Driver compiled with incorrect version of erl_driver.h\u0026rdquo; 疑似原因： 1.It looks like you\u0026rsquo;ve compiled on one version of Erlang and are trying to run it with different version.（由A版本编译，由B版本运行） 2.安装Aerlang版本，卸载不全，由安装B版本 环境： 1.Erlang版本：R15B01（安装成功） 2.yaws：1.91（安装失败） 目前解决办法：安装yaws1.96版本成功\n2 epam.c:2:22: fatal error: pam_appl.h: 没有那个文件或目录 yum -y install pam-devel\n下载 openpam wget http://nchc.dl.sourceforge.net/sourceforge/openpam/openpam-20130907.tar.gz 编译/安装 openpam tar zxvf openpam-20130907.tar.gz cd openpam-20130907 ./configure sudo make install 修改 YAWS cd yaws-1.97/c_src vim epam.c 修改#include \u0026lt;pam_appl.h\u0026gt; 为 #include \u0026lt;security/pam_appl.h\u0026gt; ./configure sudo make install\n"
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.2-leofs/",
	"title": "7.2 leofs",
	"tags": [],
	"description": "",
	"content": "LeoFS is a highly available, distributed, eventually consistent object/blob store. If you are searching a storage system that is able to store huge amount and various kind of files such as photo, movie, log data and so on, LeoFS is suitable for that. Leofs是一个高可靠性、分布式、最终一致性的对应存储。如果你需要一个存储系统用来存储巨量的各种类型的文件比如图片、视频、大文件等等。leofs适用于这种情况\n功能设计\n"
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.2-leofs/7.2.1-%E5%AE%89%E8%A3%85/",
	"title": "7.2.1 安装",
	"tags": [],
	"description": "",
	"content": "1.download 源码 git clone https://github.com/leo-project/leofs.git\n2.需要的依赖项：Erlang\n3.打开项目的readme，按照其中安装方法安装\n  cd leofs/ make make release cp -r package {LEOFS_DEPLOYED_DIR} cd {LEOFS_DEPLOYED_DIR}/\n"
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.2-leofs/7.2.2-%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8/",
	"title": "7.2.2 端口占用",
	"tags": [],
	"description": "",
	"content": "http://leo-project.net/leofs/docs/installation/install_4.html\nFirewall Rules In order for LeoFS to work correctly, it is necessary to set and check the firewall rules in your environment as follows: Subsystem Direction Ports Notes LeoFS Manager-Master Incoming 10010/Manager console LeoFS Manager-Master Incoming 4369/ Erlang Port Mapper LeoFS Manager-Master Incoming 4020/SNMP Listen Port LeoFS Manager-Master Outgoing/4369 Erlang Port Mapper LeoFS Manager-Slave Incoming 10011/Manager console LeoFS Manager-Slave Incoming 4369/ Erlang Port Mapper LeoFS Manager-Slave Incoming 4021/SNMP Listen Port LeoFS Manager-Slave Outgoing/4369 Erlang Port Mapper LeoFS Storage Incoming 4369/Erlang Port Mapper LeoFS Storage Incoming 4010/ SNMP Listen Port LeoFS Storage Outgoing /4369 Erlang Port Mapper LeoFS Gateway Incoming 8080/ HTTP listen port LeoFS Gateway Incoming 8443/HTTPS listen port LeoFS Gateway Incoming 4369/ Erlang Port Mapper LeoFS Gateway Incoming 4000/SNMP Listen Port LeoFS Gateway Outgoing/4369 Erlang Port Mapper ALL Both [1] Erlang RPC to others [1] Port range can be specified by setting the kernel variables ‘inet_dist_listen_min’ AND ‘inet_dist_listen_max’ Example %%% This forces Erlang to use only ports 9100\u0026ndash;9105 for distributed Erlang traffic. application:set_env(kernel, inet_dist_listen_min, 9100). application:set_env(kernel, inet_dist_listen_max, 9105).\n"
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.2-leofs/7.2.3-shell%E5%91%BD%E4%BB%A4/",
	"title": "7.2.3 Shell命令",
	"tags": [],
	"description": "",
	"content": "Shell Description 一般命令 leofs-adm status [] • Retrieve status of every node (default)检索所有节点的状态 • Retrieve status of the specified node 检索特定节点的状态 leofs-adm whereis • Retrieve an assigned object by the file-path 检索指定的object的路径 LeoFS Storage MQ Operation [1.2.0-] leofs-adm mq-stats • See the statuses of message queues used in LeoFS Storage leofs-adm mq-suspend • Suspend a process consuming a message queue • Active message queues only can be suspended • While suspending, no messages are consumed leofs-adm mq-resume • Resume a process consuming a message queue Recover Commands leofs-adm recover-file • Recover an inconsistent object specified by the file-path leofs-adm recover-node • Recover all inconsistent objects in the specified node leofs-adm recover-ring • Recover rings of the specified node leofs-adm recover-cluster • v1.0.0- Recover all inconsistent objects in the specified cluster Data Compaction Commands Disk Usage leofs-adm du • See the current disk usages leofs-adm du detail • See the current disk usages in the details LeoFS Gateway Operation leofs-adm purge-cache • Remove the cache from each LeoFS gateway leofs-adm remove-gateway • Remove the LeoFS Gateway node, which is already stopped LeoFS Manager Maintenance leofs-adm backup-mnesia • Copy LeoFS’s Manager data to the filepath leofs-adm restore-mnesia • Restore LeoFS’s Manager data from the backup file leofs-adm update-managers • Update LeoFS Manager nodes • Destribute the new LeoFS Manager nodes to LeoFS Storage and Gateway leofs-adm dump-ring (||) • Dump the ring data to the local disk S3-API Commands - User leofs-adm create-user • Register the new user • Generate an S3 key pair (AccessKeyID and SecretAccessKey) leofs-adm delete-user • Remove the user leofs-adm get-users • Retrieve the list of users leofs-adm update-user-role • Update the user’s role • Currently, we are supporting two kinds of roles • 1: General user, 9: Administrator S3-API Commands - Endpoint leofs-adm add-endpoint • Register a new S3 Endpoint • LeoFS’ domains are ruled by this rule leofs-adm delete-endpoint • Remove the endpoint leofs-adm get-endpoints • Retrieve the list of endpoints S3-API Commands - Bucket leofs-adm add-bucket • Create the new bucket leofs-adm delete-bucket • Remove the bucket and all files stored in the bucket leofs-adm get-buckets • Retrieve the list of the buckets registered leofs-adm get-bucket • Retrieve the list of the buckets owned by the specified user leofs-adm chown-bucket • v0.16.5- Change the owner of the bucket leofs-adm update-acl (private | public-read | public-read-write) • v0.16.0- Update the ACL (Access Control List) for the bucket • Available ACL list: ○ private (default) : No one except the owner has access rights ○ public-read : All users have READ access ○ public-read-write : All users have READ and WRITE access Multi Data Center Operation leofs-adm join-cluster 1.0.0- Begin to communicate between the local cluster and the remote cluster leofs-adm remove-cluster 1.0.0- Terminate to communicate between the local cluster and the remote cluster leofs-adm cluster-status 1.0.0- See the current state of cluster(s)\n"
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.2-leofs/7.2.4-storageshell/",
	"title": "7.2.4 storageShell",
	"tags": [],
	"description": "",
	"content": "Shell Description 描述 leofs-adm detach • Remove the storage node from the LeoFS storage cluster 移除 • Current status: running | stop 可以使用 leofs-adm rollback storage_0@127.0.0.1 恢复（当node状态是detach时）\nleofs-adm suspend • Suspend a storage node for maintenance 挂起 • This command is NOT similar to the detach command, just only to suspend the node. • While suspending, it rejects any requests • Current status: running leofs-adm resume • Resume a storage node until a finished maintenance 恢复 • Current status: suspended | restarted leofs-adm start • Start LeoFS after distributing the RING from LeoFS Manager to LeoFS Storage and Gateway 第一次启动时，初始化数据库以及数据 leofs-adm rebalance • Commit detached and attached nodes to update the cluster and Ring(routing-table) 在node加入集群或者离开集群时，需要调用该命令来重新刷新ring • Rebalance objects in the cluster which is based on the updated cluster topology • Current status: attached\nleofs-adm compact-start (all|) [] • Remove unnecessary objects from the node delete操作无法删除持久化的数据， • num-of-targets: It controls the number of containers in parallel 使用该命令移除多余的数据 • num-of-compaction-procs: It controls the number of procs to execute the compaction in parallel leofs-adm compact-suspend • Suspend the compaction 压缩挂起 leofs-adm compact-resume • Resume the compaction 压缩重新启动 leofs-adm compact-status • See the current compaction status 目前的状态，包括压缩状态，目前正在压缩的containers in parallel，等待压缩哦containers in parallel • Compaction’s status: idle, running, suspend leofs-adm diagnose-start • v1.1.5- Diagnose data of a target storage node 诊断\n"
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.3-ejabberd/",
	"title": "7.3 Ejabberd",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.4-cowboy/",
	"title": "7.4 cowboy",
	"tags": [],
	"description": "",
	"content": "Web服务器，basho出品 git地址:https://github.com/ninenines/cowboy\nDispatch组合\n静态文件 erlydtl模块动态文件\n"
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.5-kbengine/",
	"title": "7.5 kbengine",
	"tags": [],
	"description": "",
	"content": "    http://www.kbengine.org/ C++ python           "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.6-rebar/",
	"title": "7.6 Rebar",
	"tags": [],
	"description": "",
	"content": "https://github.com/basho/rebar/\n配置文件说明：https://github.com/basho/rebar/blob/master/rebar.config.sample\n使用案例： http://dhq.me/build-compile-eunit-release-erlang-application-with-rebar\n1.git clone git://github.com/basho/rebar.git\n2.cd rebar ./bootstrap\nRecompile: src/rebar ==\u0026gt; rebar (compile) ==\u0026gt; rebar (escriptize) Congratulations! You now have a self-contained script called \u0026ldquo;rebar\u0026rdquo; in your current working directory. Place this script anywhere in your path and you can use rebar to build OTP-compliant apps.\n3.rebar commond ./rebar -h ./rebar compile eunit\n注意：rebar编译一定需要是application的文件结构，即必须包含：_app.erl_app.src_sup.erl\n"
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.7-graphicsmagick/",
	"title": "7.7 GraphicsMagick",
	"tags": [],
	"description": "",
	"content": "开源的图像处理软件 GraphicsMagick官网 GraphicsMagick编程接口\nGraphicsMagick 命令行参数，说明文档\nGraphicsMagick的命令概览\n [ convert | identify | mogrify | composite | montage | compare | display | animate | import | conjure ]\nconvert：转换图像格式和大小，模糊，裁剪，驱除污点，抖动，临近，图片上画图片，加入新图片，生成缩略图等。 identify：描述一个或较多图像文件的格式和特性。 mogrify：按规定尺寸一个图像，模糊，裁剪，抖动等。Mogrify改写最初的图像文件然后写到一个不同的图像文件。 composite：根据一个图片或多个图片组合生成图片。 montage：创建一些分开的要素图像。在含有要素图像任意的装饰图片，如边框、结构、图片名称等。 compare：在算术上和视觉上评估不同的图片其它的改造图片。 display：如果你拥有一个X server的系统，它可以按次序的显示图片 animate：利用X server显示动画图片 import：在X server或任何可见的窗口上输出图片文件。 你可以捕获单一窗口，整个的荧屏或任何荧屏的矩形部分。 conjure：解释执行 MSL (Magick Scripting Language) 写的脚本。\n需要安装的依赖库函数 png http://www.libpng.org/pub/png/pngcode.html apt-get install libpng www.zlib.net yum install libpng-devel jpg http://www.remotesensing.org/libtiff/ apt-get install libtiff yum install libtiff-devel\n"
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.7-graphicsmagick/7.7.1-%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/",
	"title": "7.7.1 代码片段",
	"tags": [],
	"description": "",
	"content": "   显示图像文件详细信息 gm identify a.jpg     更改当前目录下*.jpg的尺寸大小，并保存于目录.thumb里面 gm mogrify -output-directory .thumbs -resize 320x200 *.jpg   将三幅图像和并为一副图像 gm montage -mode concatenate -tile 3x1 image1.ppm image2.ppm image3.ppm concatenated.miff   显示图像 gm display \u0026lsquo;vid:*.jpg\u0026rsquo;   格式转换 gm convert a.bmp a.jpg || gm convert a.bmp a.pdf（转换为pdf)   调整图像dpi和大小 gm convert -density 288 -geometry 25% image.gif image.gif（缩小为原先的1／4，并且dpi为288）gm convert -resize 640x480 image.gif image.gif（转换为640x480的图像)   在图像上添加文字 gm convert -font Arial -fill blue -pointsize 18 -draw \u0026ldquo;text 10,10 \u0026lsquo;your text here\u0026rsquo;\u0026rdquo; test.tif test.png   从gif文件中抽取第一帧 gm convert \u0026ldquo;Image.gif[0]\u0026rdquo; first.gif   建立gif图像 gm convert -delay 20 frame*.gif animation.gif gm convert -loop 50 frame*.gif animation.gif（让动画循环50次）gm convert -delay 20 frame1.gif -delay 10 frame2.gif -delay 5 frame3.gif animation.gif（对每一帧手动指定延时）   截屏 gm import a.jpg 用鼠标点击所要截取的窗口，或者选择截屏区域，保存为a.jpg gm import -frame a.jpg 保留窗口的边框    "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.7-graphicsmagick/7.7.1-%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/7.7.1.1-convert/",
	"title": "7.7.1.1 convert",
	"tags": [],
	"description": "",
	"content": "GraphicsMagick缩放比例的精准控制 原始图片是input.jpg，尺寸：160x120只缩小不放大 gm convert input.jpg -resize \u0026ldquo;500x500\u0026gt;\u0026rdquo; output_1.jpg 加了\u0026gt;,表示只有当图片的宽与高，大于给定的宽与高时，才进行“缩小”操作。 生成的图片大小是：160x120，未进行操作 如果不加\u0026gt;,会导致图片被比等放大。\n等比缩图 （缺点：产生白边） gm convert input.jpg -thumbnail \u0026ldquo;100x100\u0026rdquo; output_1.jpg\n生成的图片大小是：100x75 非等比缩图，按给定的参数缩图 gm convert input.jpg -thumbnail \u0026ldquo;100x100!\u0026rdquo; output_2.jpg\n生成的图片大小是：100x100 （缺点：长宽比会变化） 裁剪后保证等比缩图\ngm convert input.jpg -thumbnail \u0026ldquo;100x100^\u0026rdquo; -gravity center -extent 100x100 output_3.jpg 生成的图片大小是：100x100，还保证了比例。不过图片经过了裁剪，剪了图片左右两边才达到1:1 （缺点：裁剪了图片的一部分） 填充后保证等比缩图\ngm convert input.jpg -thumbnail \u0026ldquo;100x100\u0026rdquo; -background gray -gravity center -extent 100x100 output_4.jpg 生成的图片大小是：100x100，还保证了比例，同时没有对图片进行任何裁剪，缺失的部分按指定颜色进行填充。 （缺点：要填充颜色，和第一种方法基本一样） 裁剪、填充相结合\ngm convert input.jpg -thumbnail \u0026ldquo;10000@ -background gray -gravity center -extent 100x100 output_5.jpg 生成的图片大小是：\n100x100，这次保证了大小和比例，其中的10000就是100x100的乘积，同时在填充和裁剪之间做了一个平衡。 （缺点：最差的方法） 位深度32 转为24 IE6,7,8不支持显示“位深度32”的图片，但IE9、火狐、谷歌浏览器就可以显示。 使用GM,把“位深度32”的图片转换为“位深度24”的图片 输入图片zzz.jpg就是“位深度32”的图片，输出图片 zzz_out.jpg就是“位深度24”的图片 gm convert -resize 100x100 -colorspace RGB zzz.jpg zzz_out.jpg 转完后，图片的颜色会有轻微变化。\n原始图片（input.jpg：160x120）\n缩略图1 gm convert input.jpg -thumbnail \u0026lsquo;100x100\u0026rsquo; output_1.jpg 实际生成的图片大小是：100x75，也就是说说按此命令，会保持图片比例不变生成缩略图。这样很不错，但是有一个潜在的问题：我们不能简单明 了的知道图片的最终大小，结果是前端显示的时候，无法设置img标签的width和height属性，如果我没记错的话，一般是推荐设定width和 height属性的，否则浏览器渲染起来可能会稍稍慢一点 缩略图2 gm convert input.jpg -thumbnail \u0026lsquo;100x100!\u0026rsquo; output_2.jpg 这次实际生成的图片大小按定义来，但图片变形了，有时候这是不能接受的。 缩略图3 gm convert input.jpg -thumbnail \u0026lsquo;100x100^\u0026rsquo; \\ -gravity center -extent 100x100 output_3.jpg 这次不仅保证了大小，还保证了比例。不过图片经过了裁剪。 缩略图4 gm convert input.jpg -thumbnail \u0026lsquo;100x100\u0026rsquo; \\ -background gray -gravity center -extent 100x100 output_4.jpg 这次不仅保证了大小，还保证了比例，同时没有对图片进行任何裁剪，多余的部分按指定颜色进行填充。 缩略图5 gm convert input.jpg -thumbnail \u0026lsquo;10000@\u0026rsquo; \\ -background gray -gravity center -extent 100x100 output_5.jpg 这次保证了大小和比例，其中的10000就是100x100的乘积，同时在填充和裁剪之间做了一个平衡。\n补充：如果想让用户手动裁剪头片的话，imgAreaSelect是个好选择。\n"
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.7-graphicsmagick/7.7.2-%E9%85%8D%E7%BD%AE/",
	"title": "7.7.2 配置",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.7-graphicsmagick/7.7.2-%E9%85%8D%E7%BD%AE/7.7.2.1-%E5%AE%89%E8%A3%85/",
	"title": "7.7.2.1 安装",
	"tags": [],
	"description": "",
	"content": "1.编译成动态库。 ./configure \u0026ndash;enable-shared make sudo make install\n编写一个例子 gcc -o demo demo.c -O GraphicsMagick-config --cppflags --ldflags --libs 执行时出现：libGraphicsMagick++.so.12: cannot open shared object file: No such file or directory\n原因应该是“原因可以归结为一句话：程序没有找到动态链接库，虽然这个动态链接库存在，但是默认情况下，编译器只会使用/lib和/usr/lib这两个目录下的库文件\n所以需要添加lib库的路径 vim /etc/ld.so.conf\n加入路径： /usr/local/lib\nldconfig\n然后就可以正常使用了\n动态库：在程序执行时加载，所以可以编译成功，在执行时提示没有找到该动态库链接\n2.多核心 OpenMP export OMP_NUM_THREADS=4 %用来设置使用几个核心\n"
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.7-graphicsmagick/7.7.3-%E5%BC%82%E5%B8%B8%E6%83%85%E5%86%B5/",
	"title": "7.7.3 异常情况",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.7-graphicsmagick/7.7.3-%E5%BC%82%E5%B8%B8%E6%83%85%E5%86%B5/7.7.3.1-%E8%BF%90%E8%A1%8C%E8%AD%A6%E5%91%8A1/",
	"title": "7.7.3.1 运行警告1",
	"tags": [],
	"description": "",
	"content": "terminate called after throwing an instance of \u0026lsquo;Magick::WarningCoder\u0026rsquo; what(): Magick: profile matches sRGB but writing iCCP instead (q1_80x80_100%.png) reported by coders/png.c:1076 (PNGWarningHandler)\nhttp://my.oschina.net/1pei/blog/479162#OSC_h1_1\nlibpng 1.6+更严格的检查会对original HP/MS sRGB profile报警。老的profile使用D50 whitepoint, 而D65才是标准。这种profile由Adobe Photoshop使用, 虽然缺省在png图片中并不嵌入该profile。最简单的方法是从图片中删除内嵌的profile，但这会导致颜色有稍许偏差（当有颜色校正系统时）。但如果不希望颜色有偏差（例如用于打印输出）， 可以嵌入另一种不同的颜色profile。\n解决方案1: 删除png图片内嵌的iCCP profile sRGB gm convert -strip "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.10-mnesia/",
	"title": "7.10 Mnesia",
	"tags": [],
	"description": "",
	"content": "schema -\u0026gt; 分布式信息\nmnesia:create_schema(NodeList). 该函数用来初始化一个新的空模式,在 Mnesia 启动之前这是一个强制性的必要步骤。 Mnesia 是一个真正分布式的数据库管理系统,而模式是一个系统表,它被复制到 Mnesia 系统的所有节点上。 如果 NodeList 中某一个节点已经有模式,则该函数会失败。该函数需要 NodeList 中所有节点上的 Mnesia 都停止之后才执行。应用程序只需调用该函数一次,因为通常只需要初始化数据库模式一次 mnesia:delete_schema(DiscNodeList) 该函数在 DiscNodeList 节点上删除旧的模式, 它也删除所有旧的表和数据。 该函数需要在所有数据库节点(db_nodes)上的Mnesia 都停止后才能执行 mnesia:delete_table(Tab). 该函数永久删除表 Tab 的所有副本 。 mnesia:clear_table(Tab). 该函数永久删除表 Tab 的全部记录 mnesia:move_table_copy(Tab, From, To). 该函数将表 Tab 的拷贝从 From 节点移动到 To 节点。表的存储类型{type}被保留,这样当移动一个 RAM 表到另一个节点时,在新节点上也维持一个 RAM 表。在表移动的过程中仍然可以有事务执行读和写操作 。 mnesia:add_table_copy(Tab, Node, Type). 该函数在 Node 节点上创建 Tab 表的 备份。Type 参数必须是 ram_copies 、 disc_copies 或者是 disc_only_copies。如果我们加一个系统表 schema 的拷贝到某个节点上,这意味着我们要 Mnesia 模式也驻留在那里。这个 动作扩展了组成特定 Mnesia 系统节点的集合 。 mnesia:del_table_copy(Tab, Node). 该函数在 Node 节点上删除 Tab 表的备份,当 最后一个备份被删除后,表本身也被删除。 mnesia:transform_table(Tab, Fun,NewAttributeList, NewRecordName). 该函数改变表 Tab 中所有记录的格式。它对表里所有记录调用参数 Fun 指明的函数进行处理,从表中取得旧的记录类型处理后返回新的纪录类型,表的键(key)可以不被改变。 T= fun({test, A1,A2::test所有记录}) -\u0026gt; { test， A1,A2,\u0026#34;add_clumn\u0026#34;::对每一个记录进行修改|添加|删除 } end. mnesia:transform_table(test,T,[id,name,age]--新的字段). Fun = fun({person, Name, Age}) -\u0026gt; {person, Name, Age, 0} end, NewAttr = [name, age, money], mnesia:transform_table(person, Fun, NewAttr, person). change_table_copy_type(Tab, Node, ToType). 该函数改变表的存储类型。例如,将在 Node 节点上指定的内存类型的表 Tab 改为磁盘类型的表 disc_only_copies -\u0026gt;建立磁盘表 disc_copies -\u0026gt; 磁盘加内存表 ram_copies -\u0026gt; 内存表 mnesia:change_config (extra_db_nodes, NodeList) "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.10-mnesia/7.10.1-%E6%93%8D%E4%BD%9C/",
	"title": "7.10.1 操作",
	"tags": [],
	"description": "",
	"content": "mnesia:create_table(Name, Opts). [ {type, bag||set||ordered_set|| duplicate bag}, %默认值 set *{disc_only_copies||disc_copies||ram_copies, NodeList}, %默认值是 [node()],可以同时新建三种类型的表  {index,AttributeNameList}, %AttributeNameList 是一个原子类型的属性名列表  {snmp, SnmpStruct} %SnmpStruct 在 SNMP 用户指南中描述，表示该表可以立即通过简单网络管理协议(SNMP)来访问  {local_content, true} %表名对所有 Mnesia 点可见,但是内容对每个节点都是唯一的。这种类型的表只能在本地进行存取 *{attributes, record_info( fields, itemGene )}, {record_name, Name}, %指定表中所有记录的通用名  [{frag_properties, [{n_fragments, 20}, {n_disc_copies, 1}, {node_pool, [node()]}]}, ] set -\u0026gt; 每一个元组的键值都不能相同 ordered_set -\u0026gt; 元组会进行排序 bag -\u0026gt; 多个元组可以有相同的键值,一条记录确定唯一性 duplicate_bag -\u0026gt; 多个元组可以有相同的键值，同一个元组可以在表中出现多次 local_content -\u0026gt; 应用需要一个其内容对每个节点来说在本地都是唯一的表，这种类型的表只能在本地进行存取 frag_properties %分片属性  mnesia:create_table( table_name, [{ram_copies, [a@yujian,b@yujian]}] ).建表 mnesia:system_info(). mnesia:table_info(Tab, Attr) mnesia:system_info( running_db_nodes ). mnesia:table_info( table_name, frag_properties ). mnesia:dump_to_textfile(Filename) mnesia:load_textfile/1 mnesia:backup(\u0026#34;./backup.log\u0026#34;).%二进制数据创建检查点，不受后面写数据影响 mnesia:restore(\u0026#34;./backup.log\u0026#34;, Args).%表写锁,必须要存在表  mnesia:install_fallback(Opaque, Args) -\u0026gt; ok | {error,Reason} mnesia:uninstall_fallback(Args) -\u0026gt; ok | {error,Reason} mnesia:dump_tables(TabList). ets转储到磁盘上 Mnesia 事件处理 mnesia:subscribe(Event-Category) %确保所有 Event-Category 类型事件的副本会发送给调用进程 mnesia:unsubscribe(Event-Category) %删除对 Event-Category 类型事件的订阅  Event-Category 可以是原子 system 或元组{{table, Tab, simple}或{table, Tab, detailed}二者之一。 旧的事件类别{table, Tab}与事件类别{table, Tab, simple}是一样的。订阅函数激活对事件的订阅。 对函数 mnesia:subscribe/1 求值即将事件作为消息发送给进程。 系统事件的语法是{mnesia_system_event, Event},表事件的语法是{mnesia_table_event, Event}。 系统事件和表事件的含义描述如下:所有的系统事件通过 Mnesia 的通用事件处理器(gen_event handler)来订阅, 默认的通用事件处理器是 mnesia_event,但可通过应用参数 event_module 来改变。 这个参数的值必须是一个模块名,该模块是使用标准库(STDLIB)的 gen_event 模块来实现的完整的事件处理模块。 mnesia:system_info(subscribers) 和 mnesia:table_info(Tab, subscribers)用来确定哪些进程订阅了何种事件。 文件 FALLBACK.BUP %这个文件被称为备份文件,包含一个初始模式。如果我们在 mnesia:create_schema/1 函数中指定了一个以上的节点,同一个备份文件将在所有这些节点上被创建  Schema.DAT %在备份文件 FALLBACK.BUP 中的模式被用来生成文件 schema.DAT  Table.DCL %Mnesia 插入此操作到 foo.DCL 中,随后在 Mnesia 认为.DCL 文件已经变得太大时,再将数据移入.DCD 文件 Table.DCD %写到 foo 表中的所有数据最终将存储在这个文件中  LATEST.LOG %被 Mnesia 用来对基于磁盘的事务做日志 PREVIOUS.LOG %在日志被转储之前,文件 LATEST.LOG 改名为 PREVIOUS.LOG,并且创建一个新的LATEST.LOG 文件  在默认状态下,只要日志中写入了 100 条记录或者过去了 3 分钟这两种情况之一出现,Mnesia 即转储日志。 可用两个应用程序参数-mnesia dump_log_write_threshold WriteOperations 和-mnesia dump_log_time_threshold MilliSecs 来对此进行控制 .DAT %是建有索引的文件,可用指定的键在这些文件中高效地插入和搜索记录 mnesia:set_master_nodes(Tab, Nodes) mnesia:set_master_nodes(Nodes) 如果应用程序发现由于通信失败导致数据库的不一致，设定从哪个节点更新数据 mnesia:force_load_table(Tab) 可用来强行加载表而无视其被激活的加载机制 数据备份、操作备份数据 mnesia:backup_checkpoint(Name, Opaque, [Mod])。这个函数执行一个包含在检查点中的表备份。 mnesia:backup(Opaque, [Mod]) 。 这个函数激活一个覆盖全部 Mnesia 表的新检查点并且执行一次备份。备份以最大冗余度执行 (也可参见函数 mnesia:activate_checkpoint(Args), {max, MaxTabs} and {min, MinTabs})。 mnesia:traverse_backup(Source,[SourceMod,]Target,[TargetMod,]Fun,Ac)。这个函数能用来读存在的备份,从一个现存的备份创建一个新的备份,或者在不同介质之间拷贝备份。 mnesia:uninstall_fallback()。这个函数移除先前安装的回滚文件。 mnesia:restore(Opaque, Args)这个函数从先前的备份恢复表。 mnesia:install_fallback(Opaque, [Mod])这个函数能够配置成从一个现存的备份重启 Mnesia并且重新加载数据库表以及可能的模式表。当数据或模式表损毁时,此函数被用于灾难恢复。 "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.10-mnesia/7.10.2-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/",
	"title": "7.10.2 增删改查",
	"tags": [],
	"description": "",
	"content": "查询 mnesia:add_table_index( test, name). mnesia:del_table_index( test, name). mnesia:index_read(Table, Arg, Attr). 建表时，为该表建立索引使用元组{index, [attr1, attr2,....} mnesia:index_match_object( alias, Pattern, #alias.alias_name, read ). fun() -\u0026gt; mnesia:write( New ) end fun() -\u0026gt; mnesia:read( { table, Id } ) end fun() -\u0026gt; mnesia:delete( {product, Id} ) end fun() -\u0026gt; [R] = mnesia:read( table, Id, write ), New = R#table{ Id = Ids }, mnesia:write( New ) end. 先做读取操作，参数write为下面的mnesia:write做准备 do:q -include_lib( \u0026#34;stdlib/include/qlc.hrl\u0026#34; ). select(StringBin )-\u0026gt; Fun = fun( Key ) -\u0026gt; binary:match( Key, StringBin ) =/= nomatch end, do( qlc:q([ UUID||#test_select{key= UUID} \u0026lt;- mnesia:table( test_select ), Fun(UUID)]) ). do( Q ) -\u0026gt; F = fun() -\u0026gt; qlc:e( Q ) end, mnesia:transaction( F ). 指定的选项为 {lock, Lock} 、{n_objects,Integer} 和{ traverse, SelMethod} lock 选项指定 Mnesia 是否应该请求一个读或写锁, n_objects 指定在每个部分(chunk)应该返回多少结果给 QLC。 traverse,其指定哪一个函数 mnesia 应该用来遍历表,默认用 select。 但对 mnesia:table/2 使用{traverse, {select,MatchSpecification}}作为选项用户能够指定属于自己的表视图 mnesia:table( Tab, [{n_objects,100}, {lock,read},{traverse, select}] ). 如果没有指定选项,默认将会请求一个读锁,每部分返回 100 个结果,select 被用于遍历表 mnesia:delete_table(Tab) mnesia:dirty_all_keys(Tab) mnesia:clear_table(Tab). mnesia:all_keys( table ). mnesia:select/2, /4 mnesia:select(wordItem, [{ {\u0026#39;$0\u0026#39;,\u0026#39;$1\u0026#39;,\u0026#39;$2\u0026#39;,\u0026#39;$3\u0026#39;}, [{\u0026#39;==\u0026#39;,\u0026#39;$1\u0026#39;, Id}], [\u0026#39;$$\u0026#39;] }], Len, read). {Res, Cout} = mnesia:select(test, [{\u0026#39;$1\u0026#39;, [], [\u0026#39;$1\u0026#39;]}], 5000, read|write). {Res1, Cout1} = mnesia:select(Cout). mnesia:select(test, [{ #test{id=\u0026#39;$1\u0026#39;,name=Name, _ = \u0026#39;_\u0026#39; }, [], [\u0026#39;$1\u0026#39;] }]). mnesia:select(Tab,[{MatchHead, [Guard], [Result]}]). MatchHead = #person{name=\u0026#39;$1\u0026#39;, sex=male, age=\u0026#39;$2\u0026#39;, _=\u0026#39;_\u0026#39;}, Guard = {\u0026#39;\u0026gt;\u0026#39;, \u0026#39;$2\u0026#39;, 30}, $2中所有大于30的记录 Result = \u0026#39;$1\u0026#39;, 选出匹配记录的name字段 ets:fun2ms( fun( #test_select{key= Key} ) when ( Key \u0026gt;= StrBin) andalso ( Key =\u0026lt; \u0026lt;\u0026lt; StrBin/binary, 255\u0026gt;\u0026gt;) -\u0026gt; Key end ), mnesia: match_object ( Record ) mnesia:delete_object(Record) mnesia:match_object(person, #person{ id = 36, _ = \u0026#39;_\u0026#39;}, read) mnesia:match_object(person, {\u0026#39;_\u0026#39;, 36, \u0026#39;_\u0026#39;},read) mnesia:dirty_slot(Tab, N). 返回第N块数据 mnesia:dirty_update_counter(Table, Key, 1). 1.创建如下结构的mnesia数据库表-record(unique_id, {item, uid}); 2.每为feature表加入一条新记录时,需要得到新的id值: mnesia:dirty_update_counter(unique_id, feature, 1), 注意：请在建立unique_id表的时候，往里面插入数据，表名，初始值，{feature,0} mnesia:foldl(Fun, Acc0, Tab) mnesia:foldr(Fun, Acc0, Tab) mnesia:foldl(Fun, Acc0, Tab, LockType) mnesia:foldr(Fun, Acc0, Tab, LockType) LockType 默认是读锁， 如果在迭代时写入或删除记录,那么就应该请求写锁 mnesia:first(Tab) -\u0026gt; Key | transaction abort mnesia:last(Tab) -\u0026gt; Key | transaction abort mnesia:next(Tab,Key) -\u0026gt; Key | transaction abort mnesia:prev(Tab,Key) -\u0026gt; Key | transaction abort mnesia:snmp_get_next_index(Tab,Index) -\u0026gt; {ok, NextIndex} | endOfTable mnesia:write_lock_table/1 "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.10-mnesia/7.10.3-%E8%A1%A8%E5%88%86%E7%89%87/",
	"title": "7.10.3 表分片",
	"tags": [],
	"description": "",
	"content": "数据分片：本质把一张表分成多张表， 当使用mnesia:activity/4操作数据时，分片属性被使用，会到多张表中进程操作 mnesia:activity/4 WriteFun = fun( Keys ) -\u0026gt; [ mnesia:write( {table_name, K, -K} ) || K\u0026lt;- Keys] end. mnesia:activity( sync_dirty, WriteFun, [ lists:seq(1,256) ], mnesia_frag ). %写入数据，[ lists:seq(1,256) ]是数据内容 mnesia:change_table_frag(Tab, Change) {activate, FragProps} %激活一个现存表的分片属性,FragProps 应为 {node_pool, Nodes} 或是空 deactivate %解除表的分片属性, 片断的数量必须是 1 。没有其它表在其外键中引用此表 {add_frag, NodesOrDist} %加一个新的片断到分片表。 在老的片断中的全部记录将被重新处理并且其中一半的记录将被移送到新(最后的)片断。 所有通过外键引用此表的其它分片表将自动获得新的片断,其记录也将用与主表相同的方式动态重新处理。 NodesOrDist 参数可以是一个节点列表或者是来自于 mnesia:table_info(Tab,frag_dist)函数的结果 。 NodesOrDist 参数被看作是一个根据新副本首先 进 入的主机为最优来排序的有序节点列表。 新片断将获得与第一个片断同样数量的副本(看n_ram_copies , n_disc_copies 和 n_disc_only_copies)。 NodesOrDist 列表必须至少包含一个需要为每个副本分配的单元。 del_frag %从分片表删除一个片断。在最后这个片断的所有记录将被移到其它片断之一。所有通过其外键引用此表的其它分片表将自动丢失其最后的片断,其记录也将用与主表相同的方式动态重新处理。 {add_node, Node} %增加一个新节点到节点池 node_pool 。 新的节点池将影响从函数.mnesia:table_info(Tab, frag_dist)返回的列表。 {del_node, Node} %从节点池 node_pool 删除一个节点。新的节点池将影响从函数mnesia:table_info(Tab, frag_dist)返回的列表 [{frag_properties, [{n_fragments, 20}, {n_disc_copies, 1}, {node_pool, [node()]}]}] 分片属性 {n_fragments, Int} %n_fragments 控制这个表当前有多少个片断。 这个属性可在创建表的时候设置,也可以在后来用{add_frag,NodesOrDist} 或 del_frag 改变。n_fragments 默认为 1 {node_pool, List} %节点池包含一个节点列表,可以在创建表的时候显式指定,也可以在后来用{add_node,Node}或{del_node, Node}来改变。 在创建表的时候 Mnesia 尝试将每个片断的副本均匀地分布到节点池中的所有节点,期望所有节点都有同样数量的副本来结束。 node_pool 默认从 mnesia:system_info(db_nodes) 返回值。 {n_ram_copies, Int} %控制每个片断应该有多少 ram_copies 副本。这个属性可在创建表时显式指定。 默认值是 0 , 但如果 n_disc_copies 和 n_disc_only_copies 也是 0 ,则n_ram_copies将默认置为 1 {n_disc_copies, Int} {n_disc_only_copies, Int} {foreign_key, ForeignKey} {hash_module, Atom} {hash_state, Term} mnesia:table_info/2 在使用 mnesia_frag 模块的作业上下文中调用函数 mnesia:table_info/2,可获得一些新项目的信息 base_table %分片表的名字 n_fragments %片断的实际数量 node_pool %节点池 n_ram_copies n_disc_copies n_disc_only_copies 存储类型 ram_copies, disc_copies 和 disc_only_copies 各自的副本数量。源自于第一个片断的实际值是动态的。实际值通过计算每种存储类型的每个副本的数量来确定,当需要计算实际值的时候(如在增加一个新片断时),第一个片断的类型将作为计算的依 据。这表明当函数 mnesia:add_table_copy/3 , mnesia:del_table_copy/2 和mnesia:change_table_copy_type/2 被应用于第一个片断时,将会影响到n_ram_copies , n_disc_copies 和 n_disc_only_copies 的设置。 foreign_key %外键 foreigners %通过其外键引用该表的所有其它表。 frag_names所有片断的名字。 frag_dist 一个按 Count 增序排列的{Node, Count} 元组的有序列表。Count 是分片表副本所在主机节点 Node 的总数。这个列表至少包含了节点池 node_pool 中的全部节点 。 不属于节点池 node_pool 的节点即使其 Count 值较低也将被放在列表的最后。 frag_size %{Name, Size}元组列表,Name 是片断名称,Size 是其包含了多少条记录。 frag_memory %{Name, Memory} 元组列表, Name 是片断名称, Memory 是被占用内存数。 size %所有片断的总尺寸 memory %所有片断的总内存  Info = fun( Item ) -\u0026gt; mnesia:table_info( table_name, Item ) end. Dist = mnesia:activity( sync_dirty, Info, [frag_dist], mnesia_frag). mnesia:change_table_frag( table_name, {add_frag, Dist} ). %分表，把整个表分开。  mnesia:change_table_frag( table_name, {add_frag, Dist} ).---继续分 已连接 来自 \u0026lt;https://www.kancloud.cn/book/yujian/erlang/edit\u0026gt; "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.10-mnesia/7.10.4-%E9%94%81/",
	"title": "7.10.4 锁",
	"tags": [],
	"description": "",
	"content": "读锁。在记录的副本能被读取之前设置读锁。. 写锁。当事务写一条记录时,首先在这条记录的所有副本上设置写锁。 读表锁。如果事务要扫描整张表来搜索一条记录,那么,对表里的记录一条一条的加锁效率很低也很耗内存(如果表很大,读锁本身会消耗很多空间)。因此,Mnesia 可以对表设 置读锁。 写表锁。如果事务要写大量的记录到表里,则可以对整张表设置写锁。 粘(Sticky)锁。即使设置锁的事务终止后,这些写锁也会一直保留在节点上。 mnesia的锁机制： 读锁、写锁、读表锁、写表锁、粘锁 mnesia:transactionm( fun() -\u0026gt; mnesia:s_write( #test{ id=123 } ) end) s_write/1函数用粘锁来代替write/1普通的锁 在本地节点上该粘锁效果和普通的锁一样，但是在多节点上，该表被复制后，粘锁一直存在，使用普通的锁需要在其他节点上新建 mnesia:read_lock_table(Tab) 在表Tab上加读锁 mnesia:lock( {table, Tab}, read||write ) mnesia:write_lock_table(Tab) 在表Tab上加写锁 "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.10-mnesia/7.10.5-%E5%88%86%E5%B8%83%E5%BC%8F/",
	"title": "7.10.5 分布式",
	"tags": [],
	"description": "",
	"content": "解决方案：erl -name a@yujian 1.在两台机器上分别建立各自一个节点，我使用我的电脑和我后面的电脑 我的机器 test机器 这时运行： mnesia:create_schema( [ yujian@yujian, test@DP-201001010138 ]).出现错误 我猜测可能是test@DP-201001010138这个名称的问题，把这个名称修改掉，修改成test@test 然后重新试验下 2台机器之间有错误了 该问题，出现原因未知 第二次试验信息：a机器：erl -name a@yujian -setcookie abc b机器:erl -name b@yujian -setcookie abc 此次解决方案：a机器代码修改：erl -sname a -setcookie abc b不变化 这时我准备在我的机器上启2个节点 ok 这时mnesia:start().需要注意 然后创建表 mnesia:create_table( baikefileRecord, [{disc_only_copies, [ yujian@yujian, test@yujian ]}, {attributes, record_info( fields, baikefileRecord )}]). mnesia:start(). mnesia:system_info(). 以task_to_file表为例，首先确保2个节点上的这张表都为空， 然后向一个节点的表中插入数据，我想yujian@yujian这个节点中插入了10条数据，选择出来 然后再test@yujian节点上查看这个节点上现在是否有数据 悲剧了同步更新了 在没有插入数据的节点上删除操作，更新操作，都会同步更新所有的节点 好吧现在的结论是：分布式的节点中每一张的数据都会更新成同样的数据 细节 关闭已经打开的yaws服务器 第一台机器(hz-ejabberd-web1) 进入到/home/project/文件夹下 yaws --sname computera --mnesiadir /httx/project/Mnesia.nonode@nohost --erlarg \u0026#34;-setcookie wexin\u0026#34; 进入yaws后，前缀 执行下面函数 mnesia:stop(). mnesia:delete_schema( [computera@yujian] ). 测试 http://127.0.0.1:8081/down.yaws,可以打开 在另一台机器 进入到/home/project/文件夹下 yaws --sname computerb --mnesiadir /httx/project/Mnesia.nonode@nohost --erlarg \u0026#34;-setcookie wexin\u0026#34; 进入yaws后，前缀 执行下面函数 mnesia:stop(). mnesia:delete_schema( [computerb@server] ). 测试 http://127.0.0.1:8081/down.yaws,可以打开 运行 mnesia:create_schema( [computera@yujian, computerb@server]). 运行 mnesia:system_info(). 如图所示stopped db nodes 包括两项第四步才算成功 运行 分别在两台机器上运行： mnesia:start(). 运行完成后，在第一台机器上执行： mnesia:system_info(). 如图所示running db nodes 包括两项才算成功 在第一台机器上运行 mnesiaDBA_init:init( computerb@server,computera@yujian ). "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.10-mnesia/7.10.6-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/",
	"title": "7.10.6 高级特性",
	"tags": [],
	"description": "",
	"content": "原文链接：http://hideto.iteye.com/blog/235413\n本章描述了构建分布式、容错的Mnesia数据库相关的高级特性： 1）索引 2）分布和容错 3）表分片 4）本地内容表 5）无盘节点 6）更多的schema管理 7）Mnesia事件处理 8）Mnesia应用调试 9）Mnesia里的并发进程 10）原型\n1，索引 如果我们知道record的key，那么数据获取和匹配在执行起来都很高效 相反如果不知道record的key，那么表里所有的record都必须搜索 当表越来越大时，表的搜索就越来越耗时 Mnesia的索引就是用来解决这个问题的 下面的两个方法对已有的表操作索引：\n mnesia:add_table_index(Tab, AttributeName) -\u0026gt; {aborted, R} | {atomic, ok} mnesia:del_table_index(Tab, AttributeName) -\u0026gt; {aborted, R} | {atomic, ok}  这两个方法对AttributeName定义的域加索引和删除索引：\n mnesia:add_table_index(employee, salary)  Mnesia的索引用于以下3个方法： 1）mnesia:index_read(Tab, SecondaryKey, AttributeName) -\u0026gt; transaction abort | RecordList 通过在索引里查询SecondaryKey来找到primary key，这样就能避免对整张表穷举搜索 2）mnesia:index_match_object(Pattern, AttributeName) -\u0026gt; transaction abort | RecordList 通过Pattern里的AttributeName域查找secondary key，然后找到primary key 3）mnesia:match_object(Pattern) -\u0026gt; transaction abort | RecordList 该方法可以使用任何索引 2，分布和容错 Mnesia是分布式、容错的DBMS，可以以多种方式在Erlang节点上备份表 Mnesia程序员不需要了解不同的表位于哪里，只用在程序里指定表的名字 这就是“位置透明”： 1）数据位于本地节点还是远程节点对程序员没有影响，只不过远程节点会慢些 2）数据库可以重新配置，表可以在节点之间移动，这些操作不影响用户程序 每张表有许多系统属性，如index和type 在表创建之时表属性就指定了，例如创建拥有两个RAM备份的新表：\n mnesia:create_table(foo, [{ramp_copies, [N1, N2]}, {attribtues, record_info(fields, foo)}]). 表可以有如下属性，每个属性使用一个Erlang节点list 1）ram_copies 表的RAM备份会存在于Erlang节点list中的每个节点上 对于RAM备份，写操作不会写到硬盘里 但是如果RAM备份需要持久化时可以这样做： i）mnesia:dump_tables/1方法用来将RAM表备份导入到硬盘 ii）表副本可以备份 2）disc_copies 表会位于RAM中，而且表的副本会存在于Erlang节点list中的每个节点的硬盘上 对该表的写操作会同时写入到RAM和硬盘备份里 3）disc_only_copies 表的副本只会位于Erlang节点list中每个节点的硬盘上 这种类型的表副本的缺点是访问速度，优点主要是不占内存 简单的说，ram_copies表示本地节点和list中节点都会存RAM表 disc_copies则本地存RAM表，list中存硬盘表 disc_only_copies则只会list中存硬盘表 使用表副本有两个原因：容错和速度 值得注意的是，表备份对这两个系统需求都提供了解决方案 如果有两个表副本，则一旦一个表崩溃了，还有另一个可以工作 如果有两个节点上的表副本，则两个节点上的应用可以直接从本地读数据而不用访问网络 对于读频繁而写很少的分布式应用，表副本就会大大加速读的速度，因为直接在本地节点读取数据 而这样做的缺点写速度减慢了，因为执行一个写操作时要花更多代价来更新表副本 3，表分片 为了处理超大型的表，表分片的概念引入，基本原理是将表分成多个可以管理的片断 每个片断都实现为一等Mnesia表，它们可以像其他表一样备份，可以拥有索引等等，但是不能有local_content和snmp连接 为了从片断表里访问数据，Mnesia必须决定该record属于哪张表，这通过mnesia_frag模块来实现mnesia_access callback行为 （略） 4，本地内容表 所有节点上的表副本的内容一样，但是有时候不同节点的内容不同有优点 如果我们创建表时指定{local_content, true}属性，则写操作只在本地副本上执行 而且，当在启动时初始化表，则表只会在本地初始化而表内容不会复制到其他节点 5，无盘节点 可以在无盘的节点上运行Mnesia，当然在这些节点上不可能拥有disc_copies或disc_only_copies类型的备份 最麻烦的是schema表，因为Mnesia需要schema来初始化自己 schema表可以位于一个或多个节点上 schema表的存储类型可以为disc_copies或ram_copies(不能是disc_only_copies) Mnesia启动时使用schema表来决定应该和哪些节点建立联系 如果其他节点已经启动，则启动节点将其他节点的表定义和自己的表定义合并 参数extra_db_nodes包含一个节点list，Mnesia除了schema里的节点，还要和该参数的节点建立联系，默认值为[] 因此，当无盘节点需要从网络上的一个远程节点找到schema定义，则我们需要从-mnesia extra_db_nodes参数节点列表支持该信息 如果没有这个配置参数，Mnesia会以一个单节点系统启动 可以使用mnesia:change_config/2来给\u0026rsquo;extra_db_node'赋值并且强制建立一个连接，即mnesia:change_config(extra_db_nodes, NodeList) 应用参数schema_location控制Mnesia在哪里搜索schema： 1）disc 强制硬盘，schema假设位于Mnesia目录，如果找不到，则Mnesia拒绝启动 2）ram 强制ram，schema只位于ram中，启动时会生成一个很小的新schema 这个默认schema只包含schema表的定义并且只位于本地节点 3）opt_disc 可选的硬盘，schema可能只位于硬盘或ram 如果硬盘上找不到schema，Mnesia启动一个无盘节点（schema表的存储类型为ram_copies） 如果schema_location设置为opt_disc，则方法mnesia:change_table_copy_type/3可以用来改变schema的存储类型： 1\u0026gt; mneisa:start(). ok 2\u0026gt; mnesia:change_table_copy_type(schema, node(), disc_copies). {atomic, ok} 6，更多的Schema管理 可以从Mnesia添加和删除节点，这可以通过添加schema副本到这些节点来完成 mnesia:add_table_copy/3和mnesia:del_table_copy/2可以用来添加和删除schema表副本 添加一个节点会影响两点：1，允许其他表备份到该节点；2，它会在启动时连接硬盘节点 mnesia:del_table_copy(schema, mynode@host)从Mnesia系统删除\u0026rsquo;mynode@host'节点 mnesia:system_info(schema_location)和mnesia:system_info(extra_db_notes)用来决定schema_location和extra_db_nodes的值 mnesia:info/0用来打印出系统信息，可以在Mnesia启动之前就运行此方法 7，Mnesia事件处理 Mnesia可能生成系统事件和表事件这两种事件 用户进程可以订阅这些事件： mneisa:subscribe(Event-Category)保证符合Event-Category类型的事件副本会发送给调用进程 mnesia:unsubscribe(Event-Category)对符合Event-Category类型的事件删除订阅 Event-Category可以为system或{table, Tab, simple}/{table, Tab, detailed} 系统事件语法为{mnesia_system_event, Event}，表事件语法为{mnesia_table_event, Event} 所有的系统事件有Mnesia的gen_event handler来订阅，默认为mnesia_event mnesia:system_info(subscribers)和mnesia:table_info(Tab, subscribers)用来决定哪个进程订阅了事件 系统事件 {mnesia_up, Node} {mnesia_down, Node} {mnesia_checkpoint_activated, Checkpoint} {mnesia_checkpoint_deactivated, Checkpoint} {mnesia_overload, Details} {inconsistent_database, Context, Node} {mnesia_fatal, Format, Args, BinaryCode} {mnesia_info, Format, Args} {mnesia_error, Format, Args} {mnesia_user, Event} 表事件 {write, NewRecord, ActivityId} {delete_object, OldRecord, ActivityId} {delete, {Tab, Key}, ActivityId} {write, Table, NewRecord, [OldRecords], ActivityId} {delete, Table, What, [OldRecords], ActivityId} 9，Mnesia应用调试 Mnesia应用调试比较麻烦，因为理解事务和表加载工作机制很难，而且嵌套事务的语义也比较令人混淆 我们可以设置Mnesia的debug level: mnesia:set_debug_level(Level) 参数Level为none、verbose、debug、trace、false、true 也可以作为应用参数，在启动Erlang系统时指定： % erl -mnesia debug verbose 9，Mnesia里的并发进程 Mnesia里允许并发的事务提交，程序里不用显式的控制同步的进程 而且可以在用户继续使用表时移动、删除或重新配置表 详细参考四，事务和其他访问上下文 10，原型 如果我们决定使用Mnesia，通常会先将定义和数据写在纯文本里，这样比较简单 这样在构建原型时我们把定义和数据写在纯文本文件里，然后使用下面方法来处理： mnesia:load_textfile(Filename) mnesia:dump_to_textfile(Filename) 文本文件的格式为： {tables, [{Typename, [Options]}, {Typename2 \u0026hellip;}]}. {Typename, Attribute1, Attribute2 \u0026hellip;}. {Typename, Attribute1, Attribute2 \u0026hellip;}. Options是{Key,Value}list，和mnesia:create_table/2的options一致 例如我们有一个healthy foods的数据库，有下面的文件FRUITS： {tables, [{fruit, [{attributes, [name, color, taste]}]}, {vegetable, [{attributes, [name, color, taste, price]}]} ]}. {fruit, orange, orange, sweet}. {fruit, apple, green, sweet}. {vegetable, carrot, orange, carrotish, 2.55}. {vegetable, potato, yellow, none, 0.45}. 我们可以这样来加载fruits数据库： 1\u0026gt; mnesia:load_textfile(\u0026ldquo;FRUITS\u0026rdquo;). New table fruit New table vegetable {atomic, ok} 2\u0026gt; mnesia:info(). \u0026mdash;\u0026gt; Processes holding locks \u0026lt;\u0026mdash; \u0026mdash;\u0026gt; Processes waiting for locks \u0026lt;\u0026mdash; \u0026mdash;\u0026gt; Pending (remote) transactions \u0026lt;\u0026mdash; \u0026mdash;\u0026gt; Active (local) transactions \u0026lt;\u0026mdash; \u0026mdash;\u0026gt; Uncertain transactions \u0026lt;\u0026mdash; \u0026mdash;\u0026gt; Active tables \u0026lt;\u0026mdash; vegetable : with 2 records occuping 299 words of mem fruit : with 2 records occuping 291 words of mem schema : with 3 records occuping 401 words of mem ===\u0026gt; System info in version \u0026ldquo;1.1\u0026rdquo;, debug level = none \u0026lt;=== opt disc. Directory \u0026ldquo;/var/tmp/Mnesia.nonode@nohost\u0026rdquo; is used. use fallback at restart = false running db nodes = [nonode@nohost] stopped db nodes = [] remote = [] ram copies = [fruit,vegetable] disc copies = [schema] disc only copies = [] [fnonode@nohost,disc copiesg] = [schema] [fnonode@nohost,ram copiesg] = [fruit,vegetable] 3 transactions committed, 0 aborted, 0 restarted, 2 logged to disc 0 held locks, 0 in queue; 0 local transactions, 0 remote 0 transactions waits for other nodes: [] ok  -mnesia dc_dump_limit 400 -mnesia dump_log_time_threshold 90000 -mnesia dump_log_write_threshold 150000 http://www.tuicool.com/articles/rIBbqa\n当我们启动Mnesia的时候，一个名为LATEST.LOG的文件被创建并且放在数据库目录内。 这个文件被Mnesia用来对基于磁盘的事务做日志。这包括所有在存储类型为disc_copies或disc_only_copies的表中至少写入一条记录的事务。还包括对模式本身所作的全部操作，如创建新表等。 Mnesia的不同实现的日志格式可能有变化。当前实现的Mnesia是标准库模块disc_log。 日志文件会持续增长，因此需要定期转储。对于Mnesia“ ” 转储日志文件 意味着执行在日志中列出的所有操作并且将记录存放到对应的.DAT、.DCD和.DCL “ 文件中。例如，如果 写记录{foo, 4,elvis, 6}” 操作被列入日志，Mnesia插入此操作到foo.DCL中，随后在Mnesia认为.DCL文件已经变得太大时，再将数据移入.DCD文件。如果日志很大，转储操作可能非常耗时。因此，理解Mesia系统在日志转储期间要持续运转是很重要的。 在默认状态下，只要日志中写入了100条记录或者过去了3分钟这两种情况之一出现，Mnesia即转储日志。 可用两个应用程序参数-mnesia dump_log_write_threshold WriteOperations和-mnesiadump_log_time_threshold MilliSecs来对此进行控制。 在日志被转储之前，文件LATEST.LOG改名为PREVIOUS.LOG，并且创建一个新的LATEST.LOG文件。日志转储成功后，文件PREVIOUS.LOG被删除。在启动时以及每当一个模式操作被执行时，也要转储日志。\n"
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.10-mnesia/7.10.7-ets/",
	"title": "7.10.7 ets",
	"tags": [],
	"description": "",
	"content": "ETS基础 ETS查询时间是常量,例外是如果使用ordered_set查询时间与logN成正比(N为存储的数据量) ETS Table由进程创建,进程销毁ETS Table也随着销毁,在使用Shell做ETS实验的时候要注意一下,Table的拥有关系可以give_away 转交给其它进程 一个Erlang节点的ETS表的数量是有限制的,默认是1400个表,在启动erlang节点之前修改 ERL_MAX_ETS_TABLES参数可以修改这个限制ejabberd社区站点上总结的性能调优中提到了这一点,点击这里查看: http://www.ejabberd.im/tuning ETS表不在GC的管理范围内，除非拥有它的进程死掉它才会终止；可以通过delete删除数据 目前版本,insert和lookup操作都会导致对象副本的创建,insert和lookup时间对于set bag duplicate_bag都是常量值与表大小无关. 并发控制：所有针对一个对象的更新都被保证是原子的、隔离的：修改要么全部成功要么失败。也没有其它的中间结果被其它的进程使用。有些方法可以在处理多个对象的时候保证这种原子性和隔离性。 在数据库术语中隔离级别被称作序列化，就好像所有隔离的操作一个接一个严格按照顺序执行。 在遍历过程中,可以使用safe_fixtable来保证遍历过程中不出现错误,所有数据项只被访问一遍.用到逐一遍历的场景就很少，使用safe_fixtable的情景就更少。不过这个机制是非常有用的，还记得在.net中版本中很麻烦的一件事情就是遍历在线玩家用户列表.由于玩家登录退出的变化,这里的异常几乎是不可避免的.select match内部实现的时候都会使用safe_fixtable\nset,ordered_set,bag,duplicate_bag 指定创建的table类型 public,private,protected 指定table的访问权限，若是public表示所有process都可以对该table进行读写(只要你知道TableId或者TableName)，private表示只有创建表的process才能对table进行读写，而protected则表示所有的process都可以对表进行读取，但是只有创建表的process能够对表进行写操作（ps: ets table仅可以被同一个erlang node中的processes共享） named_table 若指定了named_table这个属性，就可以使用表名(也就是new函数的第一个参数Name)对表进行操作，而无需使用TableId {keypos,Pos} 上面说到，我们默认使用tuple中第一个元素作为Key，那么是否可以修改这个规则呢？自然可以，使用{keypos,Pos}即可，其中Pos就是表示使用tuple中第几个元素作为Key {heir, Pid, HeirData},{heir,none} 这个heir属性指明当创建table的process终止时，是否有其他process来继承这个table，默认值是{heir,none},表示没有继承者，所以当创建表的process终止时，表也随之被delete；若我们指定了{heir,Pid,HeirData}，那么当创建表的process终止时，process identifer为Pid的process将会收到一个消息：{\u0026lsquo;ETS-TRANSFER\u0026rsquo;,tid(),FromPid,HeirData},这样表的拥有权就转交了，我们可以看下面这段测试代码\nmatch(Tab, Pattern, Limit) -\u0026gt; {[Match],Continuation} | \u0026lsquo;$end_of_table\u0026rsquo; match(Continuation) -\u0026gt; {[Match],Continuation} | \u0026lsquo;$end_of_table\u0026rsquo; match_object(Tab, Pattern, Limit) -\u0026gt; {[Match],Continuation} | \u0026lsquo;$end_of_table\u0026rsquo; match_object(Continuation) -\u0026gt; {[Match],Continuation} | \u0026lsquo;$end_of_table\u0026rsquo;\nselect(Tab, MatchSpec, Limit) -\u0026gt; {[Match],Continuation} | \u0026lsquo;$end_of_table\u0026rsquo; select(Continuation) -\u0026gt; {[Match],Continuation} | \u0026lsquo;$end_of_table\u0026rsquo; ets:all() 列出所有的ETS Table\nets:i() 给出一个ETS Table的清单 包含表的类型,数据量,使用内存,所有者信息 ets:i(zen_ets) 输出zen_ets表的数据 ets:info(zen_ets) 单独查看一个ETS Table的详细信息 表被锁了可以使用ets:info(zen_ets,fixed)查看, 看表里面是否存在键值为Key的数据项. ets:fun2ms ets:fun2ms( fun( {Name, Country, Job} ) when Job /= cook -\u0026gt; [Country, Name] end ). [{{\u0026lsquo;$1\u0026rsquo;,\u0026lsquo;$2\u0026rsquo;,\u0026lsquo;$3\u0026rsquo;}, [{'/=\u0026rsquo;,\u0026lsquo;$3\u0026rsquo;,cook}], [[\u0026lsquo;$2\u0026rsquo;,\u0026lsquo;$1\u0026rsquo;]]}]\nets:fun2ms( fun( #table{ name=N, id= Id } ) when N \u0026gt; 1000 -\u0026gt; [\u0026lsquo;$$\u0026rsquo;] end ) include_lib(\u0026ldquo;stdlib/include/ms_transform.hrl\u0026rdquo;). Match specifications的详细说明参见这里: http://www.erlang.org/doc/apps/erts/match_spec.html\nMS = ets:fun2ms(fun({ Name,Country , Position } ) when Position /=cook -\u0026gt; [Country,Name ] end )\nnew(Name, Options) Option = Type = set | ordered_set | bag | duplicate_bag | Access = public | protected | private | named_table | {keypos, Pos} | {heir, Pid :: pid(), HeirData::term()} | {heir, none} | Tweaks = {write_concurrency, boolean()} | {read_concurrency, boolean()} | compressed ets:insert(Table, Value) ets:lookup(Table, Key) ets:delete(Table, Key) ets:member(Tab, Key) select_count() MS2=ets:fun2ms(fun(T={A,B,C}) when B=:=\u0026quot;hi\u0026rdquo; -\u0026gt; true end). Count2 = ets:select_count(task_table,MS2). [\u0026lsquo;$$\u0026rsquo;]||[\u0026lsquo;$_']\nA Study of Erlang ETS Table Implementation and Performance\n"
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.11-riak/",
	"title": "7.11 Riak",
	"tags": [],
	"description": "",
	"content": "官方网站：redis.io\n中文翻译网站：http://www.redis.cn http://doc.redisfans.com/index.html\nmake MALLOC=libc\n客户端工具 http://redisdesktop.com/download\n"
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.11-riak/7.11.1-%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/",
	"title": "7.11.1 代码片段",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.11-riak/7.11.1-%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/7.11.1.1-%E5%91%BD%E4%BB%A4/",
	"title": "7.11.1.1 代码片段",
	"tags": [],
	"description": "",
	"content": "keys * Keys invite* "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.11-riak/7.11.2-%E9%85%8D%E7%BD%AE/",
	"title": "7.11.2 配置",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.11-riak/7.11.2-%E9%85%8D%E7%BD%AE/7.11.2.1-%E9%85%8D%E7%BD%AE/",
	"title": "7.11.2.1 配置",
	"tags": [],
	"description": "",
	"content": "配置 值 daemonize no 是否后台启动 yes requirepass foobared 登录密码 appendfsync no 当设置appendfsync为no的时候，Redis不会主动调用fsync去将AOF日志内容同步到磁盘，所以这一切就完全依赖于操作系统的调试了。对大多数Linux操作系统，是每30秒进行一次fsync，将缓冲区中的数据写到磁盘上 当设置appendfsync为everysec的时候，Redis会默认每隔一秒进行一次fsync调用，将缓冲区中的数据写到磁盘。但是当这一 次的fsync调用时长超过1秒时。Redis会采取延迟fsync的策略，再等一秒钟。也就是在两秒后再进行fsync，这一次的fsync就不管会执行多长时间都会进行。这时候由于在fsync时文件描述符会被阻塞，所以当前的写操作就会阻塞。 当设置appendfsync为always时，每一次写操作都会调用一次fsync，这时数据是最安全的，当然，由于每次都会执行fsync，所以其性能也会受到影响。 appendonly yes\n开机启动\nredis_init_script 位于位于Redis的 /utils/ 目录下\n# 大致浏览下该启动脚本，发现redis习惯性用监听的端口名作为配置文件等命名，我们后面也遵循这个约定。 # redis服务器监听的端口 REDISPORT=6379 # 服务端所处位置，在make install后默认存放与`/usr/local/bin/redis-server`，如果未make install则需要修改该路径，下同。 EXEC=/usr/local/bin/redis-server # 客户端位置 CLIEXEC=/usr/local/bin/redis-cli # Redis的PID文件位置 PIDFILE=/var/run/redis_${REDISPORT}.pid # 配置文件位置，需要修改 CONF=\u0026#34;/etc/redis/${REDISPORT}.conf\u0026#34; 1. 根据启动脚本要求，将修改好的配置文件以端口为名复制一份到指定目录。需使用root用户。 mkdir /etc/redis cp redis.conf /etc/redis/6379.conf 2. 将启动脚本复制到/etc/init.d目录下，本例将启动脚本命名为redisd（通常都以d结尾表示是后台自启动服务）。 cp redis_init_script /etc/init.d/redisd 3. 设置为开机自启动 update-rc.d redis-server defaults %设置开机自动启动，关机自动关闭 update-rc.d redisd defaults /etc/init.d/redisd start 主从备份 主机开启\n重机conf slaveof 127.0.0.1 5672 masterauth 123456\n"
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.11-riak/7.11.3-%E5%BC%82%E5%B8%B8%E6%83%85%E5%86%B5/",
	"title": "7.11.3 异常情况",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.12-mysql/",
	"title": "7.12 Mysql",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.12-mysql/7.12.1-sql%E7%89%87%E6%AE%B5/",
	"title": "7.12.1 SQL片段",
	"tags": [],
	"description": "",
	"content": "redis #ubuntu wget https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm sudo dpkg -i mysql-apt-config_0.8.6-1_all.deb #centOS rpm -Uvh https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm # 安装成功后， 提示选择版本， ubuntu18.04 默认安装8.0 \u0026amp;nbsp;所以这里选择 8.0 \u0026amp;nbsp;点击 ok sudo apt update sudo yum -y install mysql-community-server systemctl start mysqld sudo grep \u0026#39;temporary password\u0026#39; /var/log/mysqld.log #密码 mysql -uroot -p \u0026gt; ALTER USER \u0026#39;root\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED BY \u0026#39;a1C,_#\u0026#39;; \u0026gt; CREATE USER \u0026#39;root\u0026#39;@\u0026#39;%\u0026#39; IDENTIFIED BY \u0026#39;1fC_,#\u0026#39;; \u0026gt; GRANT ALL ON *.* TO \u0026#39;root\u0026#39;@\u0026#39;%\u0026#39;; \u0026gt; SET PASSWORD FOR \u0026#39;pig\u0026#39;@\u0026#39;%\u0026#39; = PASSWORD(\u0026#34;123456\u0026#34;); \u0026gt; REVOKE SELECT ON *.* FROM \u0026#39;pig\u0026#39;@\u0026#39;%\u0026#39;; #撤销权限 \u0026gt; DROP USER \u0026#39;username\u0026#39;@\u0026#39;host\u0026#39;; \u0026gt; ALTER USER \u0026#39;root\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED WITH mysql_native_password BY \u0026#39;password\u0026#39;; \u0026gt; flush privileges; config "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.12-mysql/7.12.1-sql%E7%89%87%E6%AE%B5/7.12.1.1-%E5%85%B3%E9%94%AE%E5%AD%97/",
	"title": "7.12.1.1 关键字",
	"tags": [],
	"description": "",
	"content": "WITH -- WITH WITH ali AS (SELECT * FROM rpt_kh_amount_conf) SELECT ali.val FROM ali NOT EXISTS SELECT * FROM `account` a1 WHERE a1.deleted = 0 AND a1.status = 1 AND a1.created_time \u0026gt;= \u0026#39;2021-08-16 14:10:31\u0026#39; AND NOT EXISTS (SELECT 1 FROM account a2 WHERE a2.uid = a1.uid AND a2.deleted = 0 AND a2.created_time \u0026lt; \u0026#39;2021-08-16 14:10:31\u0026#39;) JSON SELECT JSON_EXTRACT(CHARGE_DATA, \u0026#34;$[0].amount\u0026#34;) as \u0026#39;取值\u0026#39;, json_valid(\u0026#34;$[0].amount\u0026#34;) as \u0026#39;path 类型\u0026#39;, JSON_SEARCH(CHARGE_DATA, \u0026#39;one\u0026#39;, \u0026#39;FRET\u0026#39;), \u0026#39;chargeTypeCd\u0026#39;, \u0026#39;amount\u0026#39;) as \u0026#39;json search\u0026#39;, json_valid(select \u0026#39;json search\u0026#39;) as \u0026#39;json search path 类型\u0026#39;, JSON_CONTAINS_PATH(CHARGE_DATA, \u0026#39;one\u0026#39;,\u0026#34;$[0].amount\u0026#34;) as \u0026#39;是否包含\u0026#39;, JSON_VALID(json_UNquote(REPLACE(JSON_SEARCH(CHARGE_DATA, \u0026#39;one\u0026#39;, \u0026#39;FRET\u0026#39;), \u0026#39;chargeTypeCd\u0026#39;, \u0026#39;amount\u0026#39;))) as a, JSON_EXTRACT(CHARGE_DATA, json_UNquote(REPLACE(JSON_SEARCH(CHARGE_DATA, \u0026#39;one\u0026#39;, \u0026#39;FRET\u0026#39;), \u0026#39;chargeTypeCd\u0026#39;, \u0026#39;amount\u0026#39;))) as \u0026#39;基础运费\u0026#39; 不常用命令 #表 SHOW TABLES;#获取表 SHOW COLUMNS FROM `file`; #获取列基础信息 DESCRIBE `file`;#获取列 SHOW FULL COLUMNS FROM `file`;#获取列所有信息 #编码 SELECT * FROM information_schema.SCHEMATA; #库的编码 SELECT * FROM information_schema.tables WHERE table_schema = \u0026#39;party_2\u0026#39;;#表的信息 SELECT * FROM information_schema.columns WHERE TABLE_SCHEMA=\u0026#39;party_2\u0026#39;; #列的信息 #配置 SHOW STATUS;#获取状态配置信息 SHOW VARIABLES LIKE \u0026#39;default_%\u0026#39; SHOW VARIABLES LIKE \u0026#39;log_%\u0026#39;; #日志 SHOW MASTER LOGS; #获取bin日志 SHOW MASTER STATUS;#日志状态 SHOW BINLOG EVENTS [IN \u0026#39;log_name\u0026#39;] [FROM pos] [LIMIT [OFFSET,] ROW_COUNT]; SHOW BINLOG EVENTS IN \u0026#39;mysql-bin.000001\u0026#39; LIMIT 0, 1000;#日志文件内容 FLUSH LOGS;#自此刻开始产生一个新编号的binlog日志文件 PURGE MASTER LOGS TO \u0026#39;MySQL-bin.010\u0026#39;; #清除MySQL-bin.010日志 PURGE MASTER LOGS BEFORE \u0026#39;2008-06-22 13:00:00\u0026#39;; #清除2008-06-22 13:00:00前binlog日志 PURGE MASTER LOGS BEFORE DATE_SUB( NOW( ), INTERVAL 3 DAY); #清除3天前binlog日志BEFORE，变量的date自变量可以为\u0026#39;YYYY-MM-DD hh:mm:ss\u0026#39;格式。 RESET MASTER;#清空日志文件 mysqlbinlog /usr/LOCAL/mysql/DATA/mysql-bin.000001 #查看日志 mysqlbinlog mysql-bin.0000xx | mysql -u用户名 -p密码 数据库名 #还原数据 常用选项： --start-POSITION=953 起始pos点  --stop-POSITION=1437 结束pos点  --start-DATETIME=\u0026#34;2013-11-29 13:18:54\u0026#34; 起始时间点  --stop-DATETIME=\u0026#34;2013-11-29 13:21:53\u0026#34; 结束时间点  --database=zyyshop 指定只恢复zyyshop数据库(一台主机上往往有多个数据库，只限本地log日志)  #主从 "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.12-mysql/7.12.1-sql%E7%89%87%E6%AE%B5/7.12.1.2-%E5%B8%B8%E7%94%A8%E8%AF%AD%E5%8F%A5/",
	"title": "7.12.1.2 常用语句",
	"tags": [],
	"description": "",
	"content": "-- 1.SELECT order by 字段 asc或desc（即升级或降序） SELECT * FROM attr -- 选择整张表的数据 SELECT uid FROM `attr` WHERE uid \u0026gt;= 163 LIMIT 5, 1; -- 从attr表选择uid字段，并且uid\u0026gt;163, LIMIT从第几行还是选择多少行 SELECT uid FROM `attr` WHERE uid \u0026gt;= 163 LIMIT 0, 1, -- 选取从0开始，选取一行数据 SELECT* FROM Table WHERE 字段 LIKE \u0026#39;%702%\u0026#39;; [\u0026#34;SELECT NAME FROM yj_dynamic1.attr where name=\u0026#39;\u0026#34;, \u0026lt;\u0026lt;229,188,160,230,181,169,232,141,161\u0026gt;\u0026gt;, \u0026#34;\u0026#39;\u0026#34;] CALL select_vip(id) SELECT DISTINCT 列名称 FROM 表名称 去重 FIND_IN_SET( Str, StrList ) -\u0026gt; 返回Str在StrList中的第几位，没有返回0 1.1去重 DISTINCT SELECT DISTINCT uid FROM task 1.2多条件查找 SELECT COUNT(uid) FROM `rmb_info` WHERE TIME \u0026gt;=1383632065 AND TIME \u0026lt;1383632067 AND 0=(SELECT COUNT(*) FROM `rmb_info` WHERE uid=uid AND TIME \u0026lt;1383632065); select 学号,班级,姓名,学科,成绩 from 学生 where 学号 in ( select top 10 学号 from 学生 where 学科=\u0026#39;语文\u0026#39; order by 成绩 desc )and 学号 not in ( select top 10 学号 from 学生 where 学科=\u0026#39;数学\u0026#39; order by 成绩 asc ) 1.2.多表查询. SELECT a.uid FROM `aa` AS a, `attr` AS b WHERE b.lv \u0026gt;= 5 AND b.uid \u0026gt; 162 AND b.uid = a.`roleId` GROUP BY a.uid; 1.2 多库查询 SELECT a.uid FROM `server1`.`attr` AS a, `server2`.`attr` AS b WHERE b.lv \u0026gt;= 5 AND b.uid \u0026gt; 162 AND b.uid = a.`roleId` GROUP BY a.uid UNION SELECT a.uid FROM `hyw`.`aa` AS a, `hyw`.`attr` AS b WHERE b.lv \u0026gt;= 5 AND b.uid \u0026gt; 162 AND b.uid = a.`roleId` GROUP BY a.uid 1.3 SELECT uid,SUM(IF(num\u0026gt;0, num, 0)) AS a, SUM(IF(num\u0026lt;0, num, 0)) AS b FROM rmb_cost GROUP BY uid HAVING a \u0026lt; -b select `name` from item_prop where `name` in (select `name` from item_prop group by `name` having count(`name`) \u0026gt; 1); -- 2.INSERT,设置主键自增 INSERT INTO 表名称 VALUES (值1, 值2,....) INSERT INTO table_name (列1, 列2,...) VALUES (值1, 值2,....) INSERT INTO yj_dynamic.activity_task(uid,tableId,state,num,completeNum) SELECT 2,tableId,state,num,completeNum FROM yj_dynamic1.activity_task WHERE uid=1 replace into 跟 insert 功能类似，不同点在于：replace into 首先尝试插入数据到表中， /* 1. 如果发现表中已经有此行数据（根据主键或者唯一索引判断）则先删除此行数据，然后插入新的数据。 2. 否则，直接插入新数据。 要注意的是：插入数据的表必须有主键或者是唯一索引！否则的话，replace into 会直接插入数据，这将导致表中出现重复的数据。 */ INSERT INTO `day_online_time`(`date`,`uid`,`platformId`,`time`,logincount) VALUES (1399564800,163,1,12369,logincount+1) ON DUPLICATE KEY UPDATE TIME=13000, logincount=logincount+1 ; ON DUPLICATE KEY UPDATE MySQL 当记录不存在时插入，当记录存在时更新 -- 3.UPDATE UPDATE 表名称 SET 列名称 = 新值 WHERE 列名称 = 某值 UPDATE fun_open SET funList=CONCAT(funList, \u0026#39;11000\u0026#39;) WHERE uid IN (SELECT DISTINCT uid FROM task WHERE tableId=102100 AND state=3 AND 0=FIND_IN_SET(\u0026#39;11000\u0026#39;,funList)) UPDATE fun_open SET funList = REPLACE(funList, \u0026#39;10400\u0026#39;, \u0026#39;\u0026#39;) WHERE uid IN (SELECT uid FROM attr WHERE lv\u0026lt;28) Update A,B Set B.Name=A.Name, B.age=\u0026#39;12\u0026#39; Where A.Id=B.Id; Update A Inner Join B On A.Id=B.Id Set B.Name=A.Name; -- 4.DELETE DELETE FROM 表名称 WHERE 列名称 = 值 根据某个字段去重（推荐使用临时表,不重复的数据导入到一张表） delete from 表 where 主键ID not in(select max(主键ID) from 表 group by 需要去重的字段 having count(需要去重的字段)\u0026gt;=1） 关键字 例 Group by 1.SELECT DATE_FORMAT(FROM_UNIXTIME(`time`), \u0026#39;%Y%m%d\u0026#39;) dayTime, SUM(win) AS win_count FROM game_info WHERE `time` \u0026gt;= 1460217600 AND `time` \u0026lt; 1462204800 GROUP BY dayTime ; In select count(*) from user where stats_time=\u0026#39;2012-11-25\u0026#39; and id in (select id from user where stats_time=\u0026#39;2012-11-24\u0026#39; and type=1) datediff select A.user,A.stats_time from user A, user B where A.userid = B.userid and B.type=1 and datediff(A.stats_time, B.stats_time)=1 EXPLAIN CONCAT UPDATE ai SET icon = CONCAT(\u0026#39;http://dz.game2us.com/head/\u0026#39;, icon) REPLACE UPDATE ai SET icon = REPLACE(icon, \u0026#39;/head/../head\u0026#39;, \u0026#39;/head\u0026#39;) 最大連接數 SHOW VARIABLES LIKE \u0026#39;max_connections\u0026#39;; 模糊查询 SHOW VARIABLES LIKE \u0026#39;%connections\u0026#39;; SHOW STATUS; 设置最大连接数 SET GLOBAL max_connections=1024; 获取所有建立的连接 SHOW FULL PROCESSLIST utf8mb4 移动端的表情占用4字节。需要设置成utf8的扩展字符 COALESCE "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.12-mysql/7.12.2-%E9%85%8D%E7%BD%AE/",
	"title": "7.12.2 配置",
	"tags": [],
	"description": "",
	"content": "redis #ubuntu wget https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm sudo dpkg -i mysql-apt-config_0.8.6-1_all.deb #centOS rpm -Uvh https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm # 安装成功后， 提示选择版本， ubuntu18.04 默认安装8.0 \u0026amp;nbsp;所以这里选择 8.0 \u0026amp;nbsp;点击 ok sudo apt update sudo yum -y install mysql-community-server systemctl start mysqld sudo grep \u0026#39;temporary password\u0026#39; /var/log/mysqld.log #密码 mysql -uroot -p \u0026gt; ALTER USER \u0026#39;root\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED BY \u0026#39;a1C,_#\u0026#39;; \u0026gt; CREATE USER \u0026#39;root\u0026#39;@\u0026#39;%\u0026#39; IDENTIFIED BY \u0026#39;1fC_,#\u0026#39;; \u0026gt; GRANT ALL ON *.* TO \u0026#39;root\u0026#39;@\u0026#39;%\u0026#39;; \u0026gt; SET PASSWORD FOR \u0026#39;pig\u0026#39;@\u0026#39;%\u0026#39; = PASSWORD(\u0026#34;123456\u0026#34;); \u0026gt; REVOKE SELECT ON *.* FROM \u0026#39;pig\u0026#39;@\u0026#39;%\u0026#39;; #撤销权限 \u0026gt; DROP USER \u0026#39;username\u0026#39;@\u0026#39;host\u0026#39;; \u0026gt; ALTER USER \u0026#39;root\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED WITH mysql_native_password BY \u0026#39;password\u0026#39;; \u0026gt; flush privileges; config "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.8-mongodb/7.8.2-%E9%85%8D%E7%BD%AE/",
	"title": "7.8.2 配置",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.12-mysql/7.12.2-%E9%85%8D%E7%BD%AE/7.12.2.1-my.cnf/",
	"title": "7.12.2.1 my.cnf",
	"tags": [],
	"description": "",
	"content": "cnf [mysqld] port = 63099 #端口 max_connections = 1024 #最大连接数量 default-storage-engine=INNODB character-set-server=utf8mb4 collation-server = utf8mb4_unicode_ci slow_query_log = on #开启慢查询日志 long_query_time=3 #3秒以上 #slow-query-log-file = /home/db/madb/log/slow-query.log default-authentication-plugin=mysql_native_password table_open_cache=2000 #表文件句柄缓存（表数据是存储在磁盘上的，缓存磁盘文件的句柄方便打开文件读取数据） key_buffer_size=8388608 #索引缓存大小（将从磁盘上读取的索引缓存到内存，可以设置大一些，有利于快速检索） innodb_buffer_pool_size=8388608 #Innodb存储引擎缓存池大小（对于Innodb来说最重要的一个配置，如果所有的表用的都是Innodb，那么甚至建议将该值设置到物理内存的80%，Innodb的很多性能提升如索引都是依靠这个） # 客户端来源数据的默认字符集 [client] default-character-set = utf8mb4 # 数据库默认字符集 [mysql] default-character-set = utf8mb4 #主从 server-id=1 log-bin=mysql-bin log-slave-updates=ON auto-increment-increment = 10 auto-increment-offset = 1 binlog-do-db=game_d_1,game_log_1,game_s_1,game_user,ontology,ontology_d_1,ontology_log_1,ontology_s_1 replicate-do-db=game_d_1,game_log_1,game_s_1,game_user,ontology,ontology_d_1,ontology_log_1,ontology_s_1 [master sql] SHOW VARIABLES LIKE '%log_bin%'; SHOW MASTER STATUS; GRANT FILE ON *.* TO 'repl_user'@'10.105.240.11' IDENTIFIED BY '8183ab0a79ed8461e15352832e91F5_#'; GRANT REPLICATION SLAVE ON *.* TO 'repl_user'@'10.105.240.11' IDENTIFIED BY '8183ab0a79ed8461e15352832e91F5_#'; /*start slave*/ STOP SLAVE; SHOW SLAVE STATUS CHANGE MASTER TO MASTER_HOST='10.105.240.11',MASTER_PORT=27199,MASTER_USER='repl_user',MASTER_PASSWORD='8183ab0a79ed8461e15352832e91F5_#',MASTER_LOG_FILE='mysql-bin.000021',MASTER_LOG_POS=11288354; SLAVE START; [slave sql] /*start master*/ SHOW VARIABLES LIKE '%log_bin%'; SHOW MASTER STATUS; GRANT FILE ON *.* TO 'repl_user'@'10.105.19.157' IDENTIFIED BY '8183ab0a79ed8461e15352832e91F5_#'; GRANT REPLICATION SLAVE ON *.* TO 'repl_user'@'10.105.19.157' IDENTIFIED BY '8183ab0a79ed8461e15352832e91F5_#'; /*start slave*/ STOP SLAVE; RESET SLAVE; SHOW SLAVE STATUS; CHANGE MASTER TO MASTER_HOST='10.105.19.157',MASTER_PORT=27199,MASTER_USER='repl_user',MASTER_PASSWORD='8183ab0a79ed8461e15352832e91F5_#',MASTER_LOG_FILE='mysql-bin.000022',MASTER_LOG_POS=154; START SLAVE; "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.12-mysql/7.12.3-%E6%97%A5%E5%BF%97/",
	"title": "7.12.3 日志",
	"tags": [],
	"description": "",
	"content": "日志 #日志 SHOW MASTER LOGS; #获取bin日志 SHOW MASTER STATUS;#日志状态 SHOW BINLOG EVENTS [IN \u0026#39;log_name\u0026#39;] [FROM pos] [LIMIT [OFFSET,] ROW_COUNT]; SHOW BINLOG EVENTS IN \u0026#39;mysql-bin.000001\u0026#39; LIMIT 0, 1000;#日志文件内容 FLUSH LOGS;#自此刻开始产生一个新编号的binlog日志文件 PURGE MASTER LOGS TO \u0026#39;MySQL-bin.010\u0026#39;; #清除MySQL-bin.010日志 PURGE MASTER LOGS BEFORE \u0026#39;2008-06-22 13:00:00\u0026#39;; #清除2008-06-22 13:00:00前binlog日志 PURGE MASTER LOGS BEFORE DATE_SUB( NOW( ), INTERVAL 3 DAY); #清除3天前binlog日志BEFORE，变量的date自变量可以为\u0026#39;YYYY-MM-DD hh:mm:ss\u0026#39;格式。 RESET MASTER;#清空日志文件 mysqlbinlog /usr/LOCAL/mysql/DATA/mysql-bin.000001 #查看日志 mysqlbinlog mysql-bin.0000xx | mysql -u用户名 -p密码 数据库名 #还原数据 常用选项： --start-POSITION=953 起始pos点  --stop-POSITION=1437 结束pos点  --start-DATETIME=\u0026#34;2013-11-29 13:18:54\u0026#34; 起始时间点  --stop-DATETIME=\u0026#34;2013-11-29 13:21:53\u0026#34; 结束时间点  --database=zyyshop 指定只恢复zyyshop数据库(一台主机上往往有多个数据库，只限本地log日志)  "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.12-mysql/7.12.4-%E4%B8%BB%E4%BB%8E/",
	"title": "7.12.4 主从",
	"tags": [],
	"description": "",
	"content": "主从 修改/etc/my.cnf，实现主主配置。 如果不存在/etc/my.cnf，则复制support-files/my-default.cnf生成my.cnf，两台机器的my.cnf分别配置为（不难看到，只有server_id和auto_increment_increment两项不同）： 机器A 机器B server-id=1 server-id=2 user=mysql user=mysql log-bin=mysql-bin log-bin=mysql-bin log-slave-updates log-slave-updates slave-skip-errors=all slave-skip-errors=all sync_binlog=1 sync_binlog=1 auto_increment_increment=1 auto_increment_increment=2 auto_increment_offset=1 auto_increment_offset=1\n配置项 配置项说明 server-id 不能相同！唯一标识号，值位于1~2^32-1之间 user 这个可以不指定，则使用mysqld_safe指定的用户，或者mysqld_safe默认的用户mysql log-bin 启用二进制日志文件 log-slave-updates 配置从库上的更新操作是否写二进制文件，需要和log-bin一起使用 slave-skip-errors 值为all表示让从库跳过所有错误（但不能跳过所有DDL所引起的主从错误），也可以只跳过指定的错误，如：\u0026ndash;slave-skip-errors=1062,1053；也可以配置只跳过DDL错误，如：\u0026ndash;slave-skip-errors=ddl_exist_errors，这等同于： \u0026ndash;slave-skip-errors=1007,1008,1050,1051,1054,1060,1061,1068,1094,1146 sync_binlog 值为1表示主机每次提交事务的时候把二进制日志的内容同步到磁盘上 auto_increment_increment 和auto_increment_offset一起用于主主同步，用来错开自增，防止键值冲突，所以auto_increment_increment和auto_increment_offset两者，至少要有一项值不同。 auto_increment_offset\n上述配置会导致同步所有的数据库，借助下列配置项也可以选择性的同步或不同步： 配置项 配置项说明 binlog-do-db=test1 表示只同步数据库test1和test2，如果还想同步test3，只需要新增一行：binlog-do-db=test3即可 binlog-do-db=test2 binlog-ignore-db=db1 表示不同步数据库db1和db2，如果还有db3不想同步，新增一行：binlog-ignore-db=db3即可 binlog-ignore-db=db2\n相关配置项（对于主从同步，只需要在从上配置）：replicate-do-db、replicate-ignore-db、replicate_wild_do_table和replicate_wild_ignore_table。\n来自 http://blog.csdn.net/Aquester/article/details/50674140\nmaster vim /etc/my.cnf server-id=1 log_bin=mysql-bin log_slave-updates\nGRANT FILE ON . TO \u0026lsquo;repl_user\u0026rsquo;@\u0026lsquo;10.105.240.11\u0026rsquo; IDENTIFIED BY \u0026lsquo;8183ab0a79ed8461e15352832e91F5_#'; GRANT REPLICATION SLAVE ON *.* TO \u0026lsquo;repl_user\u0026rsquo;@\u0026lsquo;10.105.240.11\u0026rsquo; IDENTIFIED BY \u0026lsquo;8183ab0a79ed8461e15352832e91F5_#';\nSHOW VARIABLES LIKE \u0026lsquo;%log_bin%'; SHOW MASTER STATUS;\nslave stop slave;\nshow slave status\nchange master to master_host='10.105.19.157\u0026rsquo;,master_port=27199,master_user='repl_user\u0026rsquo;,master_password='8183ab0a79ed8461e15352832e91F5_#',master_log_file='mysql-bin.000021\u0026rsquo;,master_log_pos=11288354;\nSTART SLAVE;\n"
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.12-mysql/7.12.5-msyqldump/",
	"title": "7.12.5 msyqldump",
	"tags": [],
	"description": "",
	"content": "msyqldump # 导出数据到文件 mysqldump -uroot -p123456 --host=127.0.0.1 --port=3306 -C --all-databases \u0026gt; /backup/test/${DATE}.sql # 导出数据到远程数据库 mysqldump --default-character-set=utf8mb4 --host=127.0.0.1 -uusername -ppassword --opt dbname | mysql --host=127.0.0.2 -uusernameb -ppasswordb --default-character-set=utf8mb4 -C dbnamenew mysqldump --default-character-set=utf8mb4 --host=192.168.1.46 -P 55001 -uroot -p123456 --opt test | mysql --host=192.168.1.85 -P 55001 -uroot -p123456 --default-character-set=utf8mb4 -C test # --opt命令可选，建议加上。等同于指定 --add-drop-tables--add-locking --create-option --disable-keys--extended-insert --lock-tables --quick --set-charset。它可以给出很快的转储操作并产生一个可以很快装入MySQL服务器的转储文件。 # -default-character-set=utf8mb4 指定该数据库连接的字符类型。如果服务器默认未utf8的话，导出的数据可能会丢失四字节的unicode信息（表情之类的） # -C 客户端和服务器之间启用压缩传递所有信息。 # 1.备份全部数据库的数据和结构 mysqldump -uroot -p123456 -A \u0026gt;F:\\all.sql # 2.备份全部数据库的结构（加 -d 参数） mysqldump -uroot -p123456 -A-d\u0026gt;F:\\all_struct.sql # 3.备份全部数据库的数据(加 -t 参数) mysqldump -uroot -p123456 -A-t\u0026gt;F:\\all_data.sql # 数据和结构(,数据库名mydb) mysqldump -uroot-p123456 mydb\u0026gt;F:\\mydb.sql # 8.一次备份多个数据库 mysqldump -uroot -p123456 --databases db1 db2\u0026gt;f:\\muldbs.sql # 5.备份单个数据库的结构 mysqldump -uroot -p123456 mydb-d\u0026gt;F:\\mydb.sql # 6.备份单个数据库的数据 mysqldump -uroot -p123456 mydb-t\u0026gt;F:\\mydb.sql # 1.还原全部数据库: (1) mysql命令行：mysql\u0026gt;source f:\\all.sql (2) 系统命令行： mysql -uroot -p123456 \u0026lt;f:\\all.sql # 2.还原单个数据库(需指定数据库) (1) mysql\u0026gt;use mydb mysql\u0026gt;source f:\\mydb.sql (2) mysql -uroot -p123456 mydb \u0026lt;f:\\mydb.sql # 3.还原单个数据库的多个表(需指定数据库) (1) mysql\u0026gt;use mydb mysql\u0026gt;source f:\\multables.sql (2) mysql -uroot -p123456 mydb\u0026lt;f:\\multables.sql # 4.还原多个数据库，（一个备份文件里有多个数据库的备份，此时不需要指定数据库） (1) mysql命令行：mysql\u0026gt;source f:\\muldbs.sql (2) 系统命令行： mysql -uroot -p123456\u0026lt;f:\\muldbs.sql mysqldump --host=192.168.80.137 -uroot -proot -C --databases test |mysql --host=192.168.80.133 -uroot -proot test -A, --all-databases 导出全部数据库。 mysqldump -uroot -p --all-databases -Y, --all-tablespaces 导出全部表空间。 mysqldump -uroot -p --all-databases --all-tablespaces -y, --no-tablespaces 不导出任何表空间信息。 mysqldump -uroot -p --all-databases --no-tablespaces --add-drop-database 每个数据库创建之前添加drop数据库语句。 mysqldump -uroot -p --all-databases --add-drop-database --add-drop-table 每个数据表创建之前添加drop数据表语句。(默认为打开状态，使用--skip-add-drop-table取消选项) mysqldump -uroot -p --all-databases (默认添加drop语句) mysqldump -uroot -p --all-databases --skip-add-drop-table (取消drop语句) --add-locks 在每个表导出之前增加LOCK TABLES并且之后UNLOCK TABLE。(默认为打开状态，使用--skip-add-locks取消选项) mysqldump -uroot -p --all-databases (默认添加LOCK语句) mysqldump -uroot -p --all-databases --skip-add-locks (取消LOCK语句) --allow-keywords 允许创建是关键词的列名字。这由表名前缀于每个列名做到。 mysqldump -uroot -p --all-databases --allow-keywords --apply-slave-statements 在\u0026#39;CHANGE MASTER\u0026#39;前添加\u0026#39;STOP SLAVE\u0026#39;，并且在导出的最后添加\u0026#39;START SLAVE\u0026#39;。 mysqldump -uroot -p --all-databases --apply-slave-statements --character-sets-dir 字符集文件的目录 mysqldump -uroot -p --all-databases --character-sets-dir=/usr/local/mysql/share/mysql/charsets --comments 附加注释信息。默认为打开，可以用--skip-comments取消 mysqldump -uroot -p --all-databases (默认记录注释) mysqldump -uroot -p --all-databases --skip-comments (取消注释) --compatible 导出的数据将和其它数据库或旧版本的MySQL 相兼容。值可以为ansi、mysql323、mysql40、postgresql、oracle、mssql、db2、maxdb、no_key_options、no_tables_options、no_field_options等， 要使用几个值，用逗号将它们隔开。它并不保证能完全兼容，而是尽量兼容。 mysqldump -uroot -p --all-databases --compatible=ansi --compact 导出更少的输出信息(用于调试)。去掉注释和头尾等结构。可以使用选项：--skip-add-drop-table --skip-add-locks --skip-comments --skip-disable-keys mysqldump -uroot -p --all-databases --compact -c, --complete-insert 使用完整的insert语句(包含列名称)。这么做能提高插入效率，但是可能会受到max_allowed_packet参数的影响而导致插入失败。 mysqldump -uroot -p --all-databases --complete-insert -C, --compress 在客户端和服务器之间启用压缩传递所有信息 mysqldump -uroot -p --all-databases --compress -a, --create-options 在CREATE TABLE语句中包括所有MySQL特性选项。(默认为打开状态) mysqldump -uroot -p --all-databases --databases, -B 导出几个数据库。参数后面所有名字参量都被看作数据库名。 mysqldump -uroot -p --databases test mysql --debug 输出debug信息，用于调试。默认值为：d:t,/tmp/mysqldump.trace mysqldump -uroot -p --all-databases --debug mysqldump -uroot -p --all-databases --debug=” d:t,/tmp/debug.trace” --debug-check 检查内存和打开文件使用说明并退出。 mysqldump -uroot -p --all-databases --debug-check --debug-info 输出调试信息并退出 mysqldump -uroot -p --all-databases --debug-info --default-character-set 设置默认字符集，默认值为utf8 mysqldump -uroot -p --all-databases --default-character-set=utf8 --delayed-insert 采用延时插入方式（INSERT DELAYED）导出数据 mysqldump -uroot -p --all-databases --delayed-insert --delete-master-logs master备份后删除日志. 这个参数将自动激活--master-data。 mysqldump -uroot -p --all-databases --delete-master-logs --disable-keys 对于每个表，用/*!40000 ALTER TABLE tbl_name DISABLE KEYS */;和/*!40000 ALTER TABLE tbl_name ENABLE KEYS */;语句引用INSERT语句。这样可以更快地导入dump出来的文件，因为它是在插入所有行后创建索引的。该选项只适合MyISAM表，默认为打开状态。 mysqldump -uroot -p --all-databases --dump-slave 该选项将主的binlog位置和文件名追加到导出数据的文件中(show slave status)。设置为1时，将会以CHANGE MASTER命令输出到数据文件；设置为2时，会在change前加上注释。该选项将会打开--lock-all-tables，除非--single-transaction被指定。该选项会自动关闭--lock-tables选项。默认值为0。 mysqldump -uroot -p --all-databases --dump-slave=1 mysqldump -uroot -p --all-databases --dump-slave=2 --master-data 该选项将当前服务器的binlog的位置和文件名追加到输出文件中(show master status)。如果为1，将会输出CHANGE MASTER 命令；如果为2，输出的CHANGE MASTER命令前添加注释信息。该选项将打开--lock-all-tables 选项，除非--single-transaction也被指定（在这种情况下，全局读锁在开始导出时获得很短的时间；其他内容参考下面的--single-transaction选项）。该选项自动关闭--lock-tables选项。 mysqldump -uroot -p --host=localhost --all-databases --master-data=1; mysqldump -uroot -p --host=localhost --all-databases --master-data=2; --events, -E 导出事件。 mysqldump -uroot -p --all-databases --events --extended-insert, -e 使用具有多个VALUES列的INSERT语法。这样使导出文件更小，并加速导入时的速度。默认为打开状态，使用--skip-extended-insert取消选项。 mysqldump -uroot -p --all-databases mysqldump -uroot -p --all-databases--skip-extended-insert (取消选项) --fields-terminated-by 导出文件中忽略给定字段。与--tab选项一起使用，不能用于--databases和--all-databases选项 mysqldump -uroot -p test test --tab=”/home/mysql” --fields-terminated-by=”#” --fields-enclosed-by 输出文件中的各个字段用给定字符包裹。与--tab选项一起使用，不能用于--databases和--all-databases选项 mysqldump -uroot -p test test --tab=”/home/mysql” --fields-enclosed-by=”#” --fields-optionally-enclosed-by 输出文件中的各个字段用给定字符选择性包裹。与--tab选项一起使用，不能用于--databases和--all-databases选项 mysqldump -uroot -p test test --tab=”/home/mysql” --fields-enclosed-by=”#” --fields-optionally-enclosed-by =”#” --fields-escaped-by 输出文件中的各个字段忽略给定字符。与--tab选项一起使用，不能用于--databases和--all-databases选项 mysqldump -uroot -p mysql user --tab=”/home/mysql” --fields-escaped-by=”#” --flush-logs 开始导出之前刷新日志。 请注意：假如一次导出多个数据库(使用选项--databases或者--all-databases)，将会逐个数据库刷新日志。除使用--lock-all-tables或者--master-data外。在这种情况下，日志将会被刷新一次，相应的所以表同时被锁定。因此，如果打算同时导出和刷新日志应该使用--lock-all-tables 或者--master-data 和--flush-logs。 mysqldump -uroot -p --all-databases --flush-logs --flush-privileges 在导出mysql数据库之后，发出一条FLUSH PRIVILEGES 语句。为了正确恢复，该选项应该用于导出mysql数据库和依赖mysql数据库数据的任何时候。 mysqldump -uroot -p --all-databases --flush-privileges --force 在导出过程中忽略出现的SQL错误。 mysqldump -uroot -p --all-databases --force --help 显示帮助信息并退出。 mysqldump --help --hex-blob 使用十六进制格式导出二进制字符串字段。如果有二进制数据就必须使用该选项。影响到的字段类型有BINARY、VARBINARY、BLOB。 mysqldump -uroot -p --all-databases --hex-blob --host, -h 需要导出的主机信息 mysqldump -uroot -p --host=localhost --all-databases --ignore-table 不导出指定表。指定忽略多个表时，需要重复多次，每次一个表。每个表必须同时指定数据库和表名。例如：--ignore-table=database.table1 --ignore-table=database.table2 …… mysqldump -uroot -p --host=localhost --all-databases --ignore-table=mysql.user --include-master-host-port 在--dump-slave产生的\u0026#39;CHANGE MASTER TO..\u0026#39;语句中增加\u0026#39;MASTER_HOST=\u0026lt;host\u0026gt;，MASTER_PORT=\u0026lt;port\u0026gt;\u0026#39; mysqldump -uroot -p --host=localhost --all-databases --include-master-host-port --insert-ignore 在插入行时使用INSERT IGNORE语句. mysqldump -uroot -p --host=localhost --all-databases --insert-ignore --lines-terminated-by 输出文件的每行用给定字符串划分。与--tab选项一起使用，不能用于--databases和--all-databases选项。 mysqldump -uroot -p --host=localhost test test --tab=”/tmp/mysql” --lines-terminated-by=”##” --lock-all-tables, -x 提交请求锁定所有数据库中的所有表，以保证数据的一致性。这是一个全局读锁，并且自动关闭--single-transaction 和--lock-tables 选项。 mysqldump -uroot -p --host=localhost --all-databases --lock-all-tables --lock-tables, -l 开始导出前，锁定所有表。用READ LOCAL锁定表以允许MyISAM表并行插入。对于支持事务的表例如InnoDB和BDB，--single-transaction是一个更好的选择，因为它根本不需要锁定表。 请注意当导出多个数据库时，--lock-tables分别为每个数据库锁定表。因此，该选项不能保证导出文件中的表在数据库之间的逻辑一致性。不同数据库表的导出状态可以完全不同。 mysqldump -uroot -p --host=localhost --all-databases --lock-tables --log-error 附加警告和错误信息到给定文件 mysqldump -uroot -p --host=localhost --all-databases --log-error=/tmp/mysqldump_error_log.err --max_allowed_packet 服务器发送和接受的最大包长度。 mysqldump -uroot -p --host=localhost --all-databases --max_allowed_packet=10240 --net_buffer_length TCP/IP和socket连接的缓存大小。 mysqldump -uroot -p --host=localhost --all-databases --net_buffer_length=1024 --no-autocommit 使用autocommit/commit 语句包裹表。 mysqldump -uroot -p --host=localhost --all-databases --no-autocommit --no-create-db, -n 只导出数据，而不添加CREATE DATABASE 语句。 mysqldump -uroot -p --host=localhost --all-databases --no-create-db --no-create-info, -t 只导出数据，而不添加CREATE TABLE 语句。 mysqldump -uroot -p --host=localhost --all-databases --no-create-info --no-data, -d 不导出任何数据，只导出数据库表结构。 mysqldump -uroot -p --host=localhost --all-databases --no-data --no-set-names, -N 等同于--skip-set-charset mysqldump -uroot -p --host=localhost --all-databases --no-set-names --opt 等同于--add-drop-table, --add-locks, --create-options, --quick, --extended-insert, --lock-tables, --set-charset, --disable-keys 该选项默认开启, 可以用--skip-opt禁用. mysqldump -uroot -p --host=localhost --all-databases --opt --order-by-primary 如果存在主键，或者第一个唯一键，对每个表的记录进行排序。在导出MyISAM表到InnoDB表时有效，但会使得导出工作花费很长时间。 mysqldump -uroot -p --host=localhost --all-databases --order-by-primary --password, -p 连接数据库密码 --pipe(windows系统可用) 使用命名管道连接mysql mysqldump -uroot -p --host=localhost --all-databases --pipe --port, -P 连接数据库端口号 --protocol 使用的连接协议，包括：tcp, socket, pipe, memory. mysqldump -uroot -p --host=localhost --all-databases --protocol=tcp --quick, -q 不缓冲查询，直接导出到标准输出。默认为打开状态，使用--skip-quick取消该选项。 mysqldump -uroot -p --host=localhost --all-databases mysqldump -uroot -p --host=localhost --all-databases --skip-quick --quote-names,-Q 使用（\\`）引起表和列名。默认为打开状态，使用--skip-quote-names取消该选项。 mysqldump -uroot -p --host=localhost --all-databases mysqldump -uroot -p --host=localhost --all-databases --skip-quote-names --replace 使用REPLACE INTO 取代INSERT INTO. mysqldump -uroot -p --host=localhost --all-databases --replace --result-file, -r 直接输出到指定文件中。该选项应该用在使用回车换行对（\\\\r\\\\n）换行的系统上（例如：DOS，Windows）。该选项确保只有一行被使用。 mysqldump -uroot -p --host=localhost --all-databases --result-file=/tmp/mysqldump_result_file.txt --routines, -R 导出存储过程以及自定义函数。 mysqldump -uroot -p --host=localhost --all-databases --routines --set-charset 添加\u0026#39;SET NAMES default_character_set\u0026#39;到输出文件。默认为打开状态，使用--skip-set-charset关闭选项。 mysqldump -uroot -p --host=localhost --all-databases mysqldump -uroot -p --host=localhost --all-databases --skip-set-charset --single-transaction 该选项在导出数据之前提交一个BEGIN SQL语句，BEGIN 不会阻塞任何应用程序且能保证导出时数据库的一致性状态。它只适用于多版本存储引擎，仅InnoDB。本选项和--lock-tables 选项是互斥的，因为LOCK TABLES 会使任何挂起的事务隐含提交。要想导出大表的话，应结合使用--quick 选项。 mysqldump -uroot -p --host=localhost --all-databases --single-transaction --dump-date 将导出时间添加到输出文件中。默认为打开状态，使用--skip-dump-date关闭选项。 mysqldump -uroot -p --host=localhost --all-databases mysqldump -uroot -p --host=localhost --all-databases --skip-dump-date --skip-opt 禁用–opt选项. mysqldump -uroot -p --host=localhost --all-databases --skip-opt --socket,-S 指定连接mysql的socket文件位置，默认路径/tmp/mysql.sock mysqldump -uroot -p --host=localhost --all-databases --socket=/tmp/mysqld.sock --tab,-T 为每个表在给定路径创建tab分割的文本文件。注意：仅仅用于mysqldump和mysqld服务器运行在相同机器上。 mysqldump -uroot -p --host=localhost test test --tab=\u0026#34;/home/mysql\u0026#34; --tables 覆盖--databases (-B)参数，指定需要导出的表名。 mysqldump -uroot -p --host=localhost --databases test --tables test --triggers 导出触发器。该选项默认启用，用--skip-triggers禁用它。 mysqldump -uroot -p --host=localhost --all-databases --triggers --tz-utc 在导出顶部设置时区TIME_ZONE=\u0026#39;+00:00\u0026#39; ，以保证在不同时区导出的TIMESTAMP 数据或者数据被移动其他时区时的正确性。 mysqldump -uroot -p --host=localhost --all-databases --tz-utc --user, -u 指定连接的用户名。 --verbose, --v 输出多种平台信息。 --version, -V 输出mysqldump版本信息并退出 --where, -w 只转储给定的WHERE条件选择的记录。请注意如果条件包含命令解释符专用空格或字符，一定要将条件引用起来。 mysqldump -uroot -p --host=localhost --all-databases --where=” user=’root’” --xml, -X 导出XML格式. mysqldump -uroot -p --host=localhost --all-databases --xml --plugin_dir 客户端插件的目录，用于兼容不同的插件版本。 mysqldump -uroot -p --host=localhost --all-databases --plugin_dir=”/usr/local/lib/plugin” --default_auth 客户端插件默认使用权限。 mysqldump -uroot -p --host=localhost --all-databases --default-auth=”/usr/local/lib/plugin/\u0026lt;plugin\u0026gt;”\u0026lt;/plugin\u0026gt;\u0026lt;/port\u0026gt;\u0026lt;/host\u0026gt; 参数选项 -c, --complete-insert #使用完整的insert语句(用列名字)。 -C, --compress #如果客户和服务器均支持压缩，压缩两者间所有的信息。 --delayed #用INSERT DELAYED命令插入行。 -e, --extended-insert #使用全新多行INSERT语法。（给出更紧缩并且更快的插入语句） -#, --debug[=option_string] #跟踪程序的使用(为了调试)。 --help #显示一条帮助消息并且退出。 --fields-terminated-by=... --fields-enclosed-by=... --fields-optionally-enclosed-by=... --fields-escaped-by=...　--fields-terminated-by=... 这些选择与-T选择一起使用，并且有相应的LOAD DATA INFILE子句相同的含义。 LOAD DATA INFILE语法。 -F, --flush-logs 在开始导出前，洗掉在MySQL服务器中的日志文件。 -f, --force, 即使我们在一个表导出期间得到一个SQL错误，继续。 -h, --host=.. 从命名的主机上的MySQL服务器导出数据。缺省主机是localhost。 -l, --lock-tables. 为开始导出锁定所有表。 -t, --no-create-info 不写入表创建信息(CREATE TABLE语句） -d, --no-data 不写入表的任何行信息。如果你只想得到一个表的结构的导出，这是很有用的！ --opt 同--quick --add-drop-table --add-locks --extended-insert --lock-tables。 应该给你为读入一个MySQL服务器的尽可能最快的导出。 -pyour_pass, --password[=your_pass] 与服务器连接时使用的口令。如果你不指定“=your_pass”部分，mysqldump需要来自终端的口令。 -P port_num, --port=port_num 与一台主机连接时使用的TCP/IP端口号。（这用于连接到localhost以外的主机，因为它使用 Unix套接字。） -q, --quick 不缓冲查询，直接导出至stdout；使用mysql_use_result()做它。 -S /path/to/socket, --socket=/path/to/socket 与localhost连接时（它是缺省主机)使用的套接字文件。 -T, --tab=path-to-some-directory 对于每个给定的表，创建一个table_name.sql文件，它包含SQL CREATE 命令，和一个table_name.txt文件，它包含数据。注意：这只有在mysqldump运行在mysqld守护进程运行的同一台机器上的时候才工作。.txt文件的格式根据--fields-xxx和 --lines--xxx选项来定。 -u user_name, --user=user_name 与服务器连接时，MySQL使用的用户名。缺省值是你的Unix登录名。 -O var=option, --set-variable var=option设置一个变量的值。可能的变量被列在下面。 -v, --verbose 冗长模式。打印出程序所做的更多的信息。 -V, --version 打印版本信息并且退出。 -w, --where='where-condition' 只导出被选择了的记录；注意引号是强制的！ \u0026quot;--where=user='jimf'\u0026quot; \u0026quot;-wuserid\u0026gt;1\u0026quot; \u0026quot;-wuserid\u0026lt;1\u0026quot; --routines选项：表示备份时，存储过程和存储函数也会被备份。 --triggers选项：表示备份时，触发器会被备份。 --events选项：表示备份时，事件表会被备份。  "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.12-mysql/7.12.6-%E6%9F%A5%E8%AF%A2%E8%AE%A1%E5%88%92explain/",
	"title": "7.12.6 查询计划Explain",
	"tags": [],
	"description": "",
	"content": "id SELECT识别符。这是SELECT查询序列号。这个不重要 select_type 1、 SIMPLE 表示简单查询，其中不包含连接查询和子查询。 2、 PRIMARY 表示主查询，或者是最外面的查询语句。 3、 UNION 表示连接查询的第2个或后面的查询语句。 4、 DEPENDENT UNION UNION中的第二个或后面的SELECT语句，取决于外面的查询。 5、 UNION RESULT 连接查询的结果。 6、 SUBQUERY 子查询中的第1个SELECT语句。 7、 DEPENDENT SUBQUERY 子查询中的第1个SELECT语句，取决于外面的查询。 8、 DERIVED SELECT(FROM 子句的子查询)。 table 表示查询的表 type 表示表的连接类型。 以下的连接类型的顺序是从最佳类型到最差类型： 1、 system 表仅有一行，这是const类型的特列，平时不会出现，这个也可以忽略不计。 2、 const 数据表最多只有一个匹配行，因为只匹配一行数据，所以很快，常用于PRIMARY KEY或者UNIQUE索引的查询，可理解为const是最优化的。 3、 eq_refmysql手册是这样说的:\u0026ldquo;对于每个来自于前面的表的行组合，从该表中读取一行。这可能是最好的联接类型，除了const类型。它用在一个索引的所有部分被联接使用并且索引是UNIQUE或PRIMARY KEY\u0026rdquo;。eq_ref可以用于使用=比较带索引的列。 4、 ref查询条件索引既不是UNIQUE也不是PRIMARY KEY的情况。ref可用于=或\u0026lt;或\u0026gt;操作符的带索引的列。 5、 ref_or_null该联接类型如同ref，但是添加了MySQL可以专门搜索包含NULL值的行。在解决子查询中经常使用该联接类型的优化。 上面这五种情况都是很理想的索引使用情况。 6、 index_merge 该联接类型表示使用了索引合并优化方法。在这种情况下，key列包含了使用的索引的清单，key_len包含了使用的索引的最长的关键元素。 7、 unique_subquery 该类型替换了下面形式的IN子查询的ref: value IN (SELECT primary_key FROM single_table WHERE some_expr) unique_subquery是一个索引查找函数,可以完全替换子查询,效率更高。 8、 index_subquery 该联接类型类似于unique_subquery。可以替换IN子查询,但只适合下列形式的子查询中的非唯一索引: value IN (SELECT key_column FROM single_table WHERE some_expr) 9、 range 只检索给定范围的行,使用一个索引来选择行。 10、 index 该联接类型与ALL相同,除了只有索引树被扫描。这通常比ALL快,因为索引文件通常比数据文件小。 11、 ALL 对于每个来自于先前的表的行组合,进行完整的表扫描。（性能最差） possible_keys 指出MySQL能使用哪个索引在该表中找到行。 如果该列为NULL，说明没有使用索引，可以对该列创建索引来提高性能。 key 显示MySQL实际决定使用的键(索引)。如果没有选择索引,键是NULL。 可以强制使用索引或者忽略索引： key_len key_len显示MySQL决定使用的键长度。如果键是NULL,则长度为NULL。 注意：key_len是确定了MySQL将实际使用的索引长度。 ref 显示使用哪个列或常数与key一起从表中选择行。 rows 显示MySQL认为它执行查询时必须检查的行数。 Extra 该列包含MySQL解决查询的详细信息 • Distinct:MySQL发现第1个匹配行后,停止为当前的行组合搜索更多的行。 • Not exists:MySQL能够对查询进行LEFT JOIN优化,发现1个匹配LEFT JOIN标准的行后,不再为前面的的行组合在该表内检查更多的行。 • range checked for each record (index map: #):MySQL没有发现好的可以使用的索引,但发现如果来自前面的表的列值已知,可能部分索引可以使用。 • Using filesort:MySQL需要额外的一次传递,以找出如何按排序顺序检索行。 • Using index:从只使用索引树中的信息而不需要进一步搜索读取实际的行来检索表中的列信息。 • Using temporary:为了解决查询,MySQL需要创建一个临时表来容纳结果。 • Using where:WHERE 子句用于限制哪一个行匹配下一个表或发送到客户。 • Using sort_union(\u0026hellip;), Using union(\u0026hellip;), Using intersect(\u0026hellip;):这些函数说明如何为index_merge联接类型合并索引扫描。 • Using index for group-by:类似于访问表的Using index方式,Using index for group-by表示MySQL发现了一个索引,可以用来查 询GROUP BY或DISTINCT查询的所有列,而不要额外搜索硬盘访问实际的表。\n"
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.12-mysql/7.12.7-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/",
	"title": "7.12.7 存储引擎",
	"tags": [],
	"description": "",
	"content": "   特点 Myisam BDB Memory InnoDB Archive     存储限制 没有 没有 有 64TB 没有   事务安全  支持  支持    锁机制 表锁 页锁 表锁 行锁 行锁   B树索引 支持 支持 支持 支持    哈希索引   支持 支持    全文索引 支持       集群索引    支持    数据缓存   支持 支持    索引缓存 支持  支持 支持    数据可压缩 支持    支持   空间使用 低 低 N/A 高 非常低   内存使用 低 低 中等 高 低   批量插入的速度 高 高 高 低 非常高   支持外键    支持     最常使用的2种存储引擎：\n• Myisam是Mysql的默认存储引擎。当create创建新表时，未指定新表的存储引擎时，默认使用Myisam。每个MyISAM在磁盘上存储成三个文件。文件名都和表名相同，扩展名分别是.frm（存储表定义）、.MYD (MYData，存储数据)、.MYI (MYIndex，存储索引)。数据文件和索引文件可以放置在不同的目录，平均分布io，获得更快的速度。 • InnoDB存储引擎提供了具有提交、回滚和崩溃恢复能力的事务安全。但是对比Myisam的存储引擎，InnoDB写的处理效率差一些并且会占用更多的磁盘空间以保留数据和索引。  如何选择合适的存储引擎 选择标准：根据应用特点选择合适的存储引擎，对于复杂的应用系统可以根据实际情况选择多种存储引擎进行组合。\n下面是常用存储引擎的适用环境：\n MyISAM：默认的MySQL插件式存储引擎，它是在Web、数据仓储和其他应用环境下最常使用的存储引擎之一 InnoDB：用于事务处理应用程序，具有众多特性，包括ACID事务支持。 Memory：将所有数据保存在RAM中，在需要快速查找引用和其他类似数据的环境下，可提供极快的访问。 Merge：允许MySQL DBA或开发人员将一系列等同的MyISAM表以逻辑方式组合在一起，并作为1个对象引用它们。对于诸如数据仓储等VLDB环境十分适合。  "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.13-sqlite/",
	"title": "7.13 SQLite",
	"tags": [],
	"description": "",
	"content": "http://www.sqlite.org/ windows安装： 1.下载 http://www.sqlite.org/download.html Precompiled Binaries for Windows http://www.sqlite.org/2015/sqlite-shell-win32-x86-3080900.zip 2.解压得到sqlite3.exe 3.复制该文件到C:\\Windows\\System32（可以在运行命令中直接运行sqlite3.exe dbname,会在C:\\Users\\yujian下创建数据库文件dbname）\n4.操作数据库。 a.在该面板中操作。 sqlite\u0026gt; create table tbl1(one varchar(10), two smallint); sqlite\u0026gt; insert into tbl1 values(\u0026lsquo;hello!',10); sqlite\u0026gt; insert into tbl1 values(\u0026lsquo;goodbye\u0026rsquo;, 20); sqlite\u0026gt; select * from tbl1; hello!|10 goodbye|20 sqlite\u0026gt;\nb.使用.bat文件 sqlite3.bat(双击执行该文件，需要保证sqlite3.bat,insertdb.bat,test.db在同一个目录下) @ECHO OFF For /L %%i in (1,1,2) do (sqlite3.exe test\u0026lt;insertdb.bat) pause insertdb.bat insert into test_select values (\u0026ldquo;040e6b974755aa78838cfe6de482b60b\u0026rdquo;, \u0026ldquo;a\u0026rdquo;, \u0026ldquo;b\u0026rdquo;, \u0026ldquo;c\u0026rdquo;, \u0026ldquo;d\u0026rdquo;, \u0026ldquo;e\u0026rdquo;,\u0026ldquo;f\u0026rdquo;) 5.工具：http://www.sqlitedeveloper.com/（使用该可视化工具）\nlinux下安装 1.下载源文件。http://www.sqlite.org/snapshot/sqlite-amalgamation-201505051108.zip 2.编译。http://www.sqlite.org/howtocompile.html gcc -DSQLITE_THREADSAFE=0 -DSQLITE_OMIT_LOAD_EXTENSION shell.c sqlite3.c 3.编写c++代码\nsqlite_query.c # include \u0026lt;stdio.h\u0026gt; # include \u0026lt;sqlite3.h\u0026gt;  static int callback(void *NotUsed, int argc, char **argv , char **azColName){ int i; for(i=0; i\u0026lt;argc; i++){ printf(\u0026#34;%s = %s\\n\u0026#34;, azColName[i], argv[i] ? argv[i] : \u0026#34;NULL\u0026#34; ); } printf(\u0026#34;\\n\u0026#34;); return 0; } int main( int argc, char **argv){ sqlite3 *db; char *zErrMsg = 0; int rc; if( argc!=3 ){ fprintf(stderr , \u0026#34;Usage: %s DATABASE SQL-STATEMENT\\n\u0026#34;, argv[0]); return(1); } rc = sqlite3_open(argv[1], \u0026amp;db); if( rc ){ fprintf(stderr , \u0026#34;Can\u0026#39;t open database: %s\\n\u0026#34;, sqlite3_errmsg( db)); sqlite3_close(db); return(1); } rc = sqlite3_exec(db, argv[2], callback, 0, \u0026amp;zErrMsg); if( rc!=SQLITE_OK ){ fprintf(stderr , \u0026#34;SQL error: %s\\n\u0026#34;, zErrMsg); sqlite3_free(zErrMsg); } sqlite3_close(db); return 0; } 4.编译运行\n$ gcc sqlite_query.c -o db.out -lsqlite3 -L/usr/local/sqlite3/lib -I/usr/local/sqlite3/include $ ./db.out \u0026#34;dbname\u0026#34; \u0026#34;sql\u0026#34; ./db.out \u0026#34;test\u0026#34; \u0026#34;select count(*) from test_select where key like \u0026#39;%1111%\u0026#39;;\u0026#34; "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.14-postgresql/",
	"title": "7.14 PostgreSQL",
	"tags": [],
	"description": "",
	"content": "Install # https://www.postgresql.org/download/linux/redhat/ # Install the repository RPM: sudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm # Install PostgreSQL: sudo yum install -y postgresql14-server # Optionally initialize the database and enable automatic start: sudo /usr/pgsql-14/bin/postgresql-14-setup initdb sudo systemctl enable postgresql-14 sudo systemctl start postgresql-14 ##=timescaledb================================================ cd /etc/yum.repos.d/ vim timescale_timescaledb.repo [timescale_timescaledb] name=timescale_timescaledb baseurl=https://packagecloud.io/timescale/timescaledb/el/7/\\$basearch repo_gpgcheck=1 gpgcheck=0 enabled=1 gpgkey=https://packagecloud.io/timescale/timescaledb/gpgkey sslverify=1 sslcacert=/etc/pki/tls/certs/ca-bundle.crt metadata_expire=300 sudo yum update -y sudo yum install -y timescaledb-postgresql-14 timescaledb-tune systemctl restart postgresql-14 #=插件========================================================= centOS yum install geos geos-devel proj-devel 外网访问postgres # 设置pgsql中用户名【postgres】的密码 # 1.切换linux用户到【postgres】 # 2.登陆pgsql服务端【psql】 # 3.修改密码，输入命令【\\password postgres】回车，输入密码，再次输入密码 su - postgres psql postgres=#\\password postgres postgres=#\\q #新用户 #sudo adduser dbuser su - postgres pgsql postgres=#CREATE USER [dbuser] WITH PASSWORD \u0026#39;password\u0026#39;; postgres=#CREATE DATABASE [db_t1] OWNER [dbuser]; postgres=#GRANT ALL PRIVILEGES ON DATABASE [db_t1] to [dbuser]; postgres=#\\q #远程登陆 cd /var/lib/pgsql/14/data vim pg_hba.conf host all all 0.0.0.0/0 md5 //#所有IP和用户，密码对都可以连接 vim postgresql.conf listen_addresses = \u0026#39;*\u0026#39; systemctl restart postgresql-14 客户端 # https://www.pgadmin.org/download/ "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.14-postgresql/7.14.1-sql%E7%89%87%E6%AE%B5/",
	"title": "7.14.1 SQL片段",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.14-postgresql/7.14.2-%E9%85%8D%E7%BD%AE/",
	"title": "7.14.2 配置",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.14-postgresql/7.14.2-%E9%85%8D%E7%BD%AE/7.14.2.1-%E9%85%8D%E7%BD%AE/",
	"title": "7.14.2.1 配置",
	"tags": [],
	"description": "",
	"content": "   选项 默认值 说明 是否优化 原因     max_connections 100 允许客户端连接的最大数目 否 因为在测试的过程中，100个连接已经足够   fsync on 强制把数据同步更新到磁盘 是 因为系统的IO压力很大，为了更好的测试其他配置的影响，把改参数改为off   shared_buffers 24MB 决定有多少内存可以被PostgreSQL用于缓存数据（推荐内存的1/4) 是 在IO压力很大的情况下，提高该值可以减少IO   work_mem 1MB 使内部排序和一些复杂的查询都在这个buffer中完成 是 有助提高排序等操作的速度，并且减低IO   effective_cache_size 128MB 优化器假设一个查询可以用的最大内存，和shared_buffers无关（推荐内存的1/2) 是 设置稍大，优化器更倾向使用索引扫描而不是顺序扫描   maintenance_work_mem 16MB 这里定义的内存只是被VACUUM等耗费资源较多的命令调用时使用 是 把该值调大，能加快命令的执行   wal_buffer 768kB 日志缓存区的大小 是 可以降低IO，如果遇上比较多的并发短事务，应该和commit_delay一起用   checkpoint_segments 3 设置wal log的最大数量数（一个log的大小为16M） 是 默认的48M的缓存是一个严重的瓶颈，基本上都要设置为10以上   checkpoint_completion_target 0.5 表示checkpoint的完成时间要在两个checkpoint间隔时间的N%内完成 是 能降低平均写入的开销   commit_delay 0 事务提交后，日志写到wal log上到wal_buffer写入到磁盘的时间间隔。需要配合commit_sibling 是 能够一次写入多个事务，减少IO，提高性能   commit_siblings 5 设置触发commit_delay的并发事务数，根据并发事务多少来配置 是 减少IO，提高性能    asa 测试数据\n• 测试的数据是运行3次，取平均值。 • 关闭fsync是为了更好的体现出其他参数对PostgreSQL的影响。     参数 修改值 事务总数 tps(包括建立连接) tps(不包括建立连接)     默认设置  8464 140.999792 141.016182   fsync off 92571 1479.969755 1480.163355   shared_buffers 1GB 100055 1635.759275 1635.977823   work_mem 10MB 101209 1665.804812 1666.04082   effective_cache_size 2GB 98209 1636.733152 1636.970271   maintenance_work_mem 512MB 92930 1548.029233 1548.223108   checkpoint_segments 32 195982 3265.995 3266.471064   checkpoint_completion_target 0.9 194390 3239.406493 3239.842596   wal_buffer 8MB 198639 3310.241458 3310.724067   恢复fsync off 11157 185.883542 185.909849   commit_delay \u0026amp;\u0026amp; commit_siblings 10 \u0026amp;\u0026amp; 4 11229 187.103538 187.131747    来自 http://www.cnblogs.com/shanyou/p/3495935.html\n"
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.15-elk/",
	"title": "7.15 elk",
	"tags": [],
	"description": "",
	"content": "elk config "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.16-clickhouse/",
	"title": "7.16 clickhouse",
	"tags": [],
	"description": "",
	"content": "clickhouse config "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.17-hugo/",
	"title": "7.17 hugo",
	"tags": [],
	"description": "",
	"content": "hugo 使用 安装 # 源代码安装 go get -u -v github.com/spf13/hugo # 包安装 https://github.com/gohugoio/hugo/releases hugo version 生成站点 hugo new site /path/to/site hugo new site blog.01cs.cc 创建 themes 目录 cd /path/to/site git init # doc 模板 git clone https://github.com/matcornic/hugo-theme-learn.git git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke echo \u0026#39;theme = \u0026#34;ananke\u0026#34;\u0026#39; \u0026gt;\u0026gt; config.toml git submodule add https://github.com/spf13/hyde.git themes/hyde echo \u0026#39;theme = \u0026#34;hyde\u0026#34;\u0026#39; \u0026gt;\u0026gt; config.toml 创建文章 hugo new about.md hugo new post/first.md 运行 http://localhost:1313 hugo server -D hugo server --theme=hyde --buildDrafts hugo server --baseURL=http://yoursite.org/ \\  --port=80 \\  --appendPort=false \\  --bind=87.245.198.50 \\  --theme=hyde 使用方法: hugo hugo [flags] hugo [command] hugo [command] [flags] 节选的 command: new 为你的站点创建新的内容 server 一个高性能的web服务器 节选的 flags: -D, --buildDrafts 包括被标记为draft的文章 -E, --buildExpired 包括已过期的文章 -F, --buildFuture 包括将在未来发布的文章 举几个栗子: hugo -D 生成静态文件并包括draft为true的文章 hugo new post/new-content.md 新建一篇文章 hugo new site mysite 新建一个称为mysite的站点 hugo server --buildExpired 启动服务器并包括已过期的文章 部署 hugo --theme=hyde --baseUrl=\u0026#34;http://coderzh.github.io/\u0026#34; "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.8-mongodb/",
	"title": "7.8 MongoDB",
	"tags": [],
	"description": "",
	"content": "https://docs.mongodb.org\na) mongod - Mongodb服务通过执行该文件启动。启动时可指定数据存放目录及日志存放目录等。 b) mongos - Mongodb Sharding控制器，主要用在Mongodb分布式存储上，为数据的插入和查询提供路由服务。 c) mongo - Mongodb的CLI（Comannd Line Interface）为管理员或者开发人员提供操作mongodb的接口，纯命令行形式 d) mongodump - MongoDB dump工具，用于备份文件以及获取快照，可指定备份策略，同时配合mongorestore作为恢复数据库一起使用 e) mongorestore - MongoDB备份的恢复工具，配合mongodump一起使用 f) mongoexport - 对某个mongodb实例以Json或者CSV格式进行数据导出，若要导出所有数据，建议使用monogodump，同时配合mongoimport作为数据导入一起使用 g) mongoimport - 对某个mongodb实例导入Json或者CSV格式的数据，配合mongoexport一起使用 h) mongofiles - 用于往GridFS写入文件或者从GridFS中读取文件（GridFS是Monogodb提供的文件系统，用于管理数据文件） i) mongostat - 用来查看当前运行的mongodb服务及mongos路由服务的状态 j) mongotop - 用来查看某个Mongodb实例的数据读写时间，并提供了某个数据库级别的数据读写时间，每秒返回统计值 k) mongosniff - 类似tcpdump的工具，主要用来实时查看mongodb的运行情况，更多时候是给开发人员使用 l) mongoperf - 用来检查mongodb运行时磁盘的IO情况\n客户端：https://robomongo.org/\n"
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.8-mongodb/7.8.1-%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/",
	"title": "7.8.1 代码片段",
	"tags": [],
	"description": "",
	"content": "# rs.initiate(config),需要连接入某个节点 # rs.config() rs.status() rs.isMaster() # rs.add(\u0026quot;server_4:27017\u0026quot;) # rs.addArb(\u0026quot;localhost:30001\u0026quot;) %添加仲裁者 # rs.remove(\u0026quot;server_1:20000\u0026quot;) # var config = rs.config() # config.memebers[0].host = \u0026quot;server_1:20000\u0026quot; # rs.reconfig(config) # rs.addArb(\u0026quot;server_5:27017\u0026quot;) 等效与 rs.add({\u0026quot;_id\u0026quot;:4, \u0026quot;host\u0026quot;:\u0026quot;server_5:27017\u0026quot;, \u0026quot;arbiterOnly\u0026quot;:true}) # rs.stepDown(600) %主节点降级为备份节点10分钟内没有选举出新的主节点，该节点可以重新加入选举 # rs.freeze(10000) %保持备份节点，不能参与选举成主节点 # rs.freeze(0) %释放, 参与选举成主节点 # c1 = (new Mongo(\u0026quot;localhost:30001\u0026quot;)).getDB(\u0026quot;test\u0026quot;) # db1 = c2.getDB(\u0026quot;test\u0026quot;) # db1.test.find() # db1.test.count() # db1.stats() # db1.test.stats() # sh,status() # sh.enableSharding(\u0026quot;test\u0026quot;) #需要分片的数据库 # db.users.ensureIndex({\u0026quot;username\u0026quot;:1}) #片键 \u0026quot;hashed\u0026quot; # sh.shardCollection(\u0026quot;test.users\u0026quot;, {\u0026quot;username\u0026quot;:1}) #\u0026quot;hashed\u0026quot; # db.users.find({\u0026quot;username\u0026quot;:\u0026quot;user12345\u0026quot;}).explain() # sh.addShard(\u0026quot;ADCMS_HUIYU/192.168.1.101:20001\u0026quot;) # 查看配置服务器信息，链接上mongos， use config # db.shards.find() # db.databases.find() # db.collection.find() # db.chunks.find() "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.8-mongodb/7.8.2-%E9%85%8D%E7%BD%AE/7.8.2.1-%E5%88%86%E5%B8%83%E5%BC%8F/",
	"title": "7.8.2.1 分布式",
	"tags": [],
	"description": "",
	"content": "分片，根据分片数据库做该分片的集群 mongo分布式：Replica Set / Sharding\n参考档案： http://blog.csdn.net/luonanqin/article/details/8497860\n《MongoDB权威指南》第九章\n集群方式：\n主节点（primary）\n备份节点（secondary，无法读取和写入）\n仲裁者节点（参与选举）\n注意：\n1.一个mongo节点在初始化时需要指定replSet，才能加入集群，本地节点无法加入集群\n2.备份节点正常情况无法读写，强制读取可以设置conn.setSlaveOk()\n3.*.conf文件的项目路径 ./priv/etc/\n4.分片。针对每一个分片节点做集群\n5.指定数据库路径需要自己新建该目录。\n6.集群就是各自启动一个节点，然后配置谁是主节点，谁是备份节点\n配置集群：\nsudo mongod -config master.conf(启动主节点)\nsudo mongod -config slaver.conf(启动备份节点)\nsudo mongod -config arbiter.conf(启动仲裁者节点)\n登陆到主节点：\nsudo mongo 192.168.1.101:27017 #ip和port是某个节点的地址\n cfg={ \u0026ldquo;_id\u0026rdquo;:\u0026ldquo;ADCMS_HUIYU\u0026rdquo;, \u0026ldquo;members\u0026rdquo;:[ {\u0026quot;_id\u0026rdquo;:0,\u0026ldquo;host\u0026rdquo;:\u0026lsquo;10.10.148.130:27017\u0026rsquo;,priority:2}, {\u0026quot;_id\u0026rdquo;:1,\u0026ldquo;host\u0026rdquo;:\u0026lsquo;10.10.148.131:27017\u0026rsquo;,priority:1}, {\u0026quot;_id\u0026rdquo;:2,\u0026ldquo;host\u0026rdquo;:\u0026lsquo;10.10.148.132:27017\u0026rsquo;,arbiterOnly:true}]};\n  rs.initiate(cfg)#使配置生效\n cfg的详细信息参考config.conf\n rs.status()查看节点详细信息\n 客户端写入:\n db.runCommand({“getLastError”:1, “w”:”majority”, “wtimeout”:1000}) 该命令返回写入操作成功的节点名称\n w:强制 getLastError等待，直到写入操作执行完才返回\nwtimeout:超时时间\n节点状态\nSTARTUP 刚出于启动状态 STARTUP2 整个初始化同步过程 RECONVERING 成员运转正常，但是暂时不能处理读取请求 ARBITER 仲裁者处于该状态 DOWN 正常运行的成员不可达 UNKOWN 成员无法到达其他任何成员 REMOVE 移出集群 ROLLBACK 进行数据回滚 FATAL 不可挽回的错误\n分片\n注意：\n1.一个config配置节点集群，维护有多少个分片节点或者集群\n2.一个mongos，对外的接口节点\n3.多个mongod节点或者集群，一个mongod对应一个分片\n4.分片需要指定基于什么规则到某个分片上查询数据\n"
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.10-mnesia/7.10.8-dets/",
	"title": "7.10.8 dets",
	"tags": [],
	"description": "",
	"content": "select(Name, MatchSpec, N) dets:delete_all_objects(Name) "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.10-mnesia/7.10.9-%E8%BF%87%E8%BD%BD%E5%88%86%E6%9E%90/",
	"title": "7.10.9 过载分析",
	"tags": [],
	"description": "",
	"content": "dump_log_time_threshold %转储间隔次数 dump_log_write_threshold %转储次数 dc_dump_limit %出发dump的默认值，当filesize(.DCL) \u0026gt; filesize(.DCD) / dc_dump_limit，把*.DCL的记录存储到*.DCD文件中\napplication:set_env( mnesia, dc_dump_limit, 40 ), application:set_env( mnesia, dump_log_write_threshold, 10000 ),\nmnesia在频繁操作数据的过程可能会报错：WARNING Mnesia is overloaded: {dump_log, write_threshold}，可以看出，mnesia应该是过载了。这个警告在mnesia dump操作会发生这个问题，表类型为disc_only_copies 、disc_copies都可能会发生。 如何重现这个问题，例子的场景是多个进程同时在不断地mnesia:dirty_write/2 mnesia过载分析 1、抛出警告是在mnesia 增加dump worker的时候\n mnesia_controller.erl  抛出警告是当Worker的#dump_log.opt_reply_to 未定义，仔细看这里的代码，这一步先检查了dumper_queue里的worker 所以，mnesia抛出过载警告有2个条件： 1）当worker的#dump_log.opt_reply_to 未定义 2）dumper_queue有相同操作（InitBy）的worker\n2、那什么样的worker的#dump_log.opt_reply_to 未定义？\n代码也在mnesia_controller.erl，这里add的worker的dump_log.opt_reply_to 未定义，而{async_dump_log, InitBy} 就是 mnesia:dirty_write/2的过程中调用 mnesia_controller:async_dump_log(write_threshold) 产生的。\n就是说，mnesia:dirty_write/2会触发异步dump操作，而只有异步的dump会导致mnesia抛出过载警告\n3、看一下，mnesia什么时候会修正worker？\n代码也在mnesia_controller.erl，在dump完成时，mnesia会修改worker的dump_log.opt_reply_to，然后移出dumper_queue\n从上面可以得到结论，mnesia:dirty_write/2的操作是会触发异步dump操作，每次dump操作mnesia都会加到dumper_queue队列，mnesia通过检查dumper_queue是否存有相同操作的worker来检查是否过载 mnesia dump分析 mnesia数据存储实际上使用的是ets和dets，对于ram_copies类型的表使用ets；disc_copies表也使用ets，通过 dump将数据保存到*.DCD（disc copy data）文件来持久化，中间可能会用*.DCL（disc copy log）转储；而disc_only_copies表使用的是dets，保存的文件为*.DAT。 表类型不同，mnesia记录数据的过程也不同，这里先讨论mnesia 记录disc_copies数据的过程。 1、mnesia 记录disc_copies数据有2个过程： 1）操作先记录到日志文件LATEST.LOG，然后再dump到*.DCD文件，同时清除LATEST.LOG 2）把修改同步到ets表中 2、mnesia disc_copies表数据dump过程 1）将日志文件LATEST.LOG重命名为PREVIOUS.LOG，然后再新建一个空的日志文件LATEST.LOG 2）分析PREVIOUS.LOG文件中的内容，将disc_copies的表实际修改写到*.DCL文件 3）比较*.DCL和*.DCD的大小，当filesize(*.DCL) \u0026gt; filesize(*.DCD) / dc_dump_limit，把*.DCL的记录存储到*.DCD文件中。dc_dump_limit默认为4，可以通过-mnesia dc_dump_limit Number设置 3、mnesia什么时候会dump 1）定时触发 mnesia启动后，mnesia_controller进程设置定时器，触发dump mnesia_controller.erl:\n默认值为180000，可以通过 -mnesia dump_log_time_threshold 300000 设置。 2）一定次数的操作后触发 每次数据操作，mnesia都会调用mnesia_log:log/1或者mnesia_log:slog/1进行日志记录，记录一次日志就将trans_log_writes_left的值减1，当这个值为0时，触发dump mnesia_log.erl:\nmnesia_dumper.erl\n默认值为1000，可以通过 -mnesia dump_log_write_threshold 50000 设置。 3）手动dump 手动调用 mnesia:dump_log/0 可以强制mnesia 完成dump，而这个dump是同步的 mnesia.erl:\nmnesia_controller.erl:\n解决mnesia过载 结合上面的分析再谈谈mnesia过载问题，dict_copies表写数据的时候，mnesia会写记录到ets表和日志文件 LATEST.LOG，然后定时或定量dump做持久化。通过dump_log_write_threshold /dump_log_time_threshold 可以控制持久化的频率。mnesia在dump数据的时候，如果上一个worker进程dump没完成，就抛出过载警告。对 此，dump_log_write_threshold的值表示mnesia经历过多少数据操作做一次持久 化，dump_log_time_threshold的值表示mnesia多长时间做一次持久化。\n这里再谈谈，为何同一时间只能有一个dumper？\ndump的过程是先将日志文件重命名为PREVIOUS.LOG，然后分析PREVIOUS.LOG的数据做持久化，如果同时有第二个dump，将 会替换掉第一个dump的PREVIOUS.LOG，影响第一个dump的持久化。那么，聪明的你就会这么想，为何不重命名为XXX.LOG，每次重命名 都不同？事实上，如果同时有两个dumper，mnesia仅保证第二个dump能正常进行，放弃掉第一个dump的数据。所以，mnesia出现过载警告的时候，数据有可能会丢失。\n这里，我做过了一项测试，修改mnesia的代码，将所有异步dump去掉，改用定时手动dump。还是原来的例子，发现第一个dump还没完成日志文件的分析和持久化，而新的日志文件已经增长到快2G。\ndump的过程在文件io层面上其实是，一边在没有控制的追加数据，一边又在分析文件和有序写入，这个过程是在挑战磁盘io的读写极限啊。所以，就算现在有多个dumper，结果只会让cpu和硬盘更加抓狂。\n另外，别太过依赖dump_log_write_threshold/dump_log_time_threshold这两个参数，改大了就有用吗？\n这两个参数改大了，就是说，dump的频率就会降低，那么等待dump的数据就会更多，dump花的时间将会越长，到头来还是不能解决到问题。这两 个参数的意义在于平缓写入速度，避免一时间大量数据写入造成数据丢失。但是，如果每时每刻都是高密度写入，硬盘也承受不了，一般到了这个局面，问题应该从 数据缓冲和持久化的设计上去解决，而不是想着换一个数据库去解决。\n这里有一点经验可以分享一下： 1、在mnesia没报过载错误的时候，不建议去改动，调节这些参数会影响持久化 2、可以多个进程读mnesia的数据，但写数据的过程只交给少数几个进程去完成 参考： http://blog.csdn.net/mycwq/article/details/28660813 http://my.oschina.net/hncscwc/blog/161763\n来自 http://blog.csdn.net/mycwq/article/details/28660813?utm_source=tuicool\n"
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.12-mysql/7.12.8-%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C/",
	"title": "7.12.8 命令操作",
	"tags": [],
	"description": "",
	"content": "Linux中进入mysql mysql -u root mysql -u root::用户名 -p 回车 password::输入密码 Linux中退出mysql quit; 回车 查看进程中带有mysql的进程 ps -ef|grep mysql 杀mysql进程 kill -9 mysqld mysql服务启动 service mysqld start 查询运行文件所在路径 which mysql 查看mysql 安装路径 whereis mysql linux下卸载mysql方法 查找已安装的myslq 版本 rpm -qa | grep mysql （注意大小写，如果mysql 不行就换MySQL） 包名卸载 rpm -e –nodeps mysql-5.0.77-4.el5_4.2 （nodeps表示强制删除） 修改mysql数据库的路径 vi /etc/my.cnf datadir=修改路径 设置密码 SET PASSWORD FOR \u0026#39;root\u0026#39;@\u0026#39;host_name\u0026#39; = PASSWORD(\u0026#39;newpwd\u0026#39;); .sql文件导入到dbname数据库 mysql -u user -p dbname \u0026lt; /path/.../file.sql show engines select @@innodb_version; 查看mysql最大連接數 show variables like \u0026#39;max_connections\u0026#39;; 查看当前使用的数据库 status; show tables; show databases;//可以查看有哪些数据库,返回数据库名(databaseName) use databaseName; //更换当前使用的数据库 show tables; //返回当前数据库下的所有表的名称 show tables from databaseName;//databaseName可以用show databases得来 mysql查看表结构命令 desc 表名; show columns from 表名; describe 表名; show create table 表名; use information_schema; select * from columns where table_name=\u0026#39;表名\u0026#39;; show columns from table_name [ from database_name ] ; show columns from database_name.table_name; 查看警告 show warnings; 显示最后一个执行的语句所产生的错误、警告和通知 查看存储过程状态 show procedure status; 显示一个用户的权限 show grants for user_name; 显示表的索引 show index from table_name; 显示一些系统特定资源的信息 show status [from db_name]; 显示系统变量的名称和值 show [ global] variables; 显示系统中正在运行的所有进程 show processlist 也就是当前正在执行的查询大多数用户可以查看他们自己的进程， 但是如果他们拥有process权限，就可以查看所有人的进程，包括密码 显示每个表的信息 show table status 显示当前使用或者指定的database中的每个表的信息信息包括表类型和表的最新更新时间 显示服务器所支持的不同权限 show privileges 显示create database 语句是否能够创建指定的数据库 show create database database_name 显示create database 语句是否能够创建指定的数据库 show create table table_name 显示安装以后可用的存储引擎和默认引擎 show engies 显示innoDB存储引擎的状态 show innodb status 显示BDB存储引擎的日志 show logs -----这个已经被遗弃了 只显示最后一个执行语句所产生的错误 show errors; show [storage] engines; 显示安装后的可用存储引擎和默认引擎 例如：mysqlshow -uroot -pXXXX mysql #显示mysql数据库的信息 例如：mysqlshow -uroot -pXXXX mysql user #显示mysql数据库中user表的信息 mysqlshow，该指令只参显示数据库、表、列的信息 例如：mysqlshow -uroot -pXXXX mysql user user #显示 mysql数据库中user表中的user列的信息 1.另外在mysql的monitor后，各种命令以分号结束。 2.ps -ef|grep mysql 得出结果 /etc/init.d/mysql stop "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.3-ejabberd/eventslist/",
	"title": "Eventslist",
	"tags": [],
	"description": "",
	"content": "Here is the list of available events in ejabberd. The types of the corresponding hooks parameters is described below.\nadhoc_local_items(Acc, From, To, Lang) -\u0026gt; Adhoc adhoc_sm_items(Acc, From, To, Lang) -\u0026gt; Adhoc anonymous_purge_hook(User, Server) -\u0026gt; ok c2s_auth_result(bool(), User, Server, IP) -\u0026gt; ok c2s_broadcast_recipients(Acc, Server, StateData, Type, From, Packet) -\u0026gt; [] c2s_filter_packet(Acc, Server, C2SState, Feature, To, Packet) -\u0026gt; bool() c2s_filter_packet_in(Acc, JID, From, To) -\u0026gt; FixedPacket c2s_loop_debug({route, From, To, Packet}) -\u0026gt; ok c2s_loop_debug(Text) -\u0026gt; ok c2s_loop_debug({xmlstreamelement, Packet}) -\u0026gt; ok c2s_post_auth_features(Acc, Server) -\u0026gt; [] c2s_presence_in(Acc, {From, To, Packet}) -\u0026gt; C2SState c2s_stream_features(Acc, Server) -\u0026gt; [] c2s_unauthenticated_iq(Acc, Server, IQ, IP) -\u0026gt; empty | Packet c2s_update_presence(Acc, User, Server) -\u0026gt; Packet caps_update(From, To, get_features(Server, Caps)) -\u0026gt; ok csi_filter_stanza(Acc, Stanza) -\u0026gt; send disco_info(Acc, Host, Module, Node, Lang) -\u0026gt; [] disco_local_features(Acc, From, To, Node, Lang) -\u0026gt; Disco disco_local_identity(Acc, From, To, Node, Lang) -\u0026gt; [] disco_local_items(Acc, From, To, Node, Lang) -\u0026gt; Disco disco_sm_features(Acc, From, To, Node, Lang) -\u0026gt; Disco disco_sm_identity(Acc, From, To, Node, Lang) -\u0026gt; [] disco_sm_items(Acc, From, To, Node, Lang) -\u0026gt; Disco filter_packet(Acc) -\u0026gt; OrigPacket forbidden_session_hook(JID) -\u0026gt; ok http_request_debug({LocalPath, Request}) -\u0026gt; ok local_send_to_resource_hook(From, To, Packet) -\u0026gt; ok muc_filter_message(Stanza, MUCState, RoomJID, FromJID, FromNick) -\u0026gt; Stanza drop muc_filter_presence(Stanza, MUCState, RoomJID, FromJID, FromNick) -\u0026gt; Stanza drop offline_message_hook(From, To, Packet) -\u0026gt; ok presence_probe_hook(From, To, Pid) -\u0026gt; ok privacy_check_packet(Acc, User, Server, PrivacyList, {From, To, Packet}, Dir) -\u0026gt; Auth privacy_get_user_list(Acc, User, Server) -\u0026gt; #userlist{} privacy_iq_get(Acc, From, To, IQ, PrivacyList) -\u0026gt; {result, Packet} | {error, Error} privacy_iq_set(Acc, From, To, IQ) -\u0026gt; {result, Packet} | {error, Error} privacy_updated_list(Acc, PrivacyList, PrivList) -\u0026gt; bool() pubsub_create_node(ServerHost, Host, Node, NodeId, NodeOptions) -\u0026gt; ok pubsub_delete_node(ServerHost, Host, Node, NodeId) -\u0026gt; ok pubsub_publish_item(ServerHost, Node, Publisher, service_jid(Host), ItemId, Payload) -\u0026gt; ok register_user(User, Server) -\u0026gt; ok remove_user(User, Server) -\u0026gt; ok reopen_log_hook() -\u0026gt; ok resend_offline_messages_hook(Acc, User, Server) -\u0026gt; [] resend_subscription_requests_hook(Acc, User, Server) -\u0026gt; [] roster_get(Acc, {User, Server}) -\u0026gt; [] roster_get_jid_info(Acc, User, Server, From) -\u0026gt; []} roster_get_subscription_lists(Acc, User, Server) -\u0026gt; []} roster_get_versioning_feature(Acc, Server) -\u0026gt; [] roster_groups(Acc, ServerHost) -\u0026gt; [] roster_in_subscription(Acc, User, Server, From, SubscriptionInType, Reason) -\u0026gt; bool() roster_out_subscription(User, Server, To, SubscriptionOutType) -\u0026gt; ok roster_process_item(Acc, Server) -\u0026gt; RosterItem s2s_allow_host(Acc, Host, Host) -\u0026gt; Auth s2s_connect_hook(Host, Server) -\u0026gt; ok s2s_loop_debug({xmlstreamelement, Packet}) -\u0026gt; ok s2s_receive_packet(From, To, Packet) -\u0026gt; ok s2s_send_packet(From, To, Packet) -\u0026gt; ok s2s_stream_features(Acc, Server) -\u0026gt; [] set_presence_hook(User, Server, Resource, Presence) -\u0026gt; ok sm_register_connection_hook(SID, JID, Info) -\u0026gt; ok sm_remove_connection_hook(SID, JID, Info) -\u0026gt; ok unset_presence_hook(User, Server, Resource, Status) -\u0026gt; ok user_available_hook(JID) -\u0026gt; ok user_ping_timeout(JID) -\u0026gt; ok user_receive_packet(Packet, C2SState, JID, From, To) -\u0026gt; Packet user_send_packet(Packet, C2SState, From, To) -\u0026gt; Packet vcard_set(User, Server, VCARD) -\u0026gt; ok webadmin_menu_host(Acc, Host, Lang) -\u0026gt; [] webadmin_menu_hostnode(Acc, Host, Node, Lang) -\u0026gt; [] webadmin_user(Acc, User, Server, Lang) -\u0026gt; [] webadmin_user_parse_query(Acc, Action, User, Server, Query) -\u0026gt; []\nHooks parameters data types To = From = JID = ServerJID = #jid (see jlib.h) Packet = Payload = {xmlelement, Name, Attrs, SubEl} IQ = #iq (see jlib.h) Error = ?STANZA_ERROR/3 (see jlib.h) Lang = binary() Dir = in | out Auth = allow | deny PrivacyList = OldPrivacyList = NewPrivacyList = none | #userlist CtlStatus = false | ?STATUS_SUCCESS | ?STATUS_ERROR | ?STATUS_USAGE | ?STATUS_BADRPC (see ejabberd_ctl.hrl) Adhoc = {result, I} | {error, Error} | empty Disco = {result, Items} | {error, Error} Items = Packet Arg = [string()] Node = [string()] ItemID = string() Route = {route, From, To, Packet} RosterItem = #roster (see mod_roster.hrl) Subscription = none | from | to | both | remove SubscriptionInType = subscribe | unsubscribe SubscriptionOutType = subscribed | unsubscribed Reason = binary() Groups = [string()] SimpleJID = FromSubscription = ToSubscription = {User, Server, Resource} User = binary() Server = binary() Resource = binary() Status = binary() SID = {Time, pid()} Time = {MegaSecs, Secs, MicroSecs} (see erlang:now/0) MegaSecs = Secs = MicroSecs = int() Acc = same type as the return type of the function\n"
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.17-hugo/first-content/",
	"title": "first-content",
	"tags": [],
	"description": "",
	"content": " Get Grav   Get Grav with icon  Get Grav with icon right      test expand   Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n  graph LR; A[Hard edge] --|Link text| B(Round edge) B -- C{Decision} C --|One| D[Result one] C --|Two| E[Result two]  graph LR; A[Hard edge] --\u0026gt;|Link text| B(Round edge) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result one] C --\u0026gt;|Two| E[Result two]  sequenceDiagram participant Alice participant Bob Alice-John: Hello John, how are you? loop Healthcheck John-John: Fight against hypochondria end Note right of John: Rational thoughts prevail... John--Alice: Great! John-Bob: How about you? Bob--John: Jolly good!  sequenceDiagram participant Alice participant Bob Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts prevail... John--\u0026gt;Alice: Great! John-\u0026gt;Bob: How about you? Bob--\u0026gt;John: Jolly good!  A notice disclaimer\n An information disclaimer\n A tip disclaimer\n An warning disclaimer\n editURL Value :\n"
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.3-ejabberd/hooksformoduledevelopers/",
	"title": "hooksformoduledevelopers",
	"tags": [],
	"description": "",
	"content": "filter_packet (run_hook) ejabberd_hooks:run_fold(filter_packet, {OrigFrom, OrigTo, OrigPacket}, []).\n"
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.3-ejabberd/mod_echo.erl/",
	"title": "mod_echo",
	"tags": [],
	"description": "",
	"content": "Ejabberd扩展案例 源码：https://github.com/processone/ejabberd/blob/master/src/mod_echo.erl\nEjabberd通用扩展包说明 源码：https://github.com/processone/ejabberd-contrib\n基于现在的扩展模式，做出的通用性的拓展功能\n"
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.1-yaws/7.1.1-yaws.conf/",
	"title": "yaws",
	"tags": [],
	"description": "",
	"content": "http://yaws.hyber.org/yman.yaws?page=yaws.conf\nyaws默认上传文件大小为：2048 partial_post_size = nolimit 上传的文件无限大 post限制 partial_post_size = 2048 缓存机制 max_num_cached_files max_num_cached_bytes max_size_cached_file cache_refresh_secs max_connections list_dir errormod_crash = Module errormod_401 = Module errormod_404 = Module Module:out404(Arg, GC, SC) Arg - a #arg{} record GC - a #gconf{} record (defined in yaws.hrl) SC - a #sconf{} record (defined in yaws.hrl) url重写 appmods = \u0026lt;Path1, Module1\u0026gt; \u0026lt;Path2, Modules2\u0026gt; appmods = \u0026lt;cgi-bin, yaws_appmod_cgi\u0026gt; session 存活时间 keepalive_timeout = 1*3600*8*1000 "
},
{
	"uri": "https://yujian1018.github.io/book/pro/",
	"title": "项目资料",
	"tags": [],
	"description": "",
	"content": "project 项目资料\n"
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.9-redis/",
	"title": "4.1 Redis",
	"tags": [],
	"description": "",
	"content": "redis https://redis.io/ wget https://download.redis.io/releases/redis-6.2.6.tar.gz tar -zxf redis-6.2.6.tar.gz make config #bind 127.0.0.1 port 63098 #绑定端口 daemonize yes #是否后台启动 pidfile /var/run/redis_63098.pid logfile \u0026quot;log_63098.log\u0026quot; #日志 databases 2 #启动多少个数据库 # save \u0026quot;\u0026quot; rdbcompression yes rdbchecksum yes dbfilename dump_63098.rdb #dump_63098.rdb redis重启后不会通过该文件还原数据 appendonly yes #appendonly.aof appendfsync no #依赖操作系统，对大多数Linux操作系统，是每30秒进行一次fsync，将缓冲区中的数据写到磁盘上 everysec #Redis会默认每隔一秒进行一次fsync调用，将缓冲区中的数据写到磁盘。但是当这一 次的fsync调用时长超过1秒时。Redis会采取延迟fsync的策略，再等一秒钟。也就是在两秒后再进行fsync，这一次的fsync就不管会执行多长时间都会进行。这时候由于在fsync时文件描述符会被阻塞，所以当前的写操作就会阻塞 always #每一次写操作都会调用一次fsync，这时数据是最安全的，当然，由于每次都会执行fsync，所以其性能也会受到影响 requirepass 1234567890 loglevel notice "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.14-postgresql/postgresql_%E5%9D%91/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "使用中出现的问题 NOT IN 使用 LEFT JOIN / IS NULL或NOT EXISTS而不是NOT IN NOT IN正如我们之前讨论的那样，由于它处理NULL列表中的值的方式，这是一个特例。 不幸的是，PostgreSQL的优化器不能使用t_right.value定义为的事实，NOT NULL因此列表不能返回任何NULL值。 这就是为什么NOT IN查询PostgreSQL使用一种特殊的访问方法hashed Subplan： 首先，它执行列表查询（使用Seq Scanon t_right）并散列其结果。从哈希中消除重复值 然后它从t_left（再次，使用Seq Scan）获取每一行并对每个值应用过滤条件 过滤条件的工作原理如下： 如果t_left.value是NULL，它立即返回NULL。 如果t_left.value不是NULL，则在步骤1中生成的哈希表中搜索： 如果在列表中找到该值，TRUE则返回。 如果未找到该值，则再次搜索哈希表以查找NULL值。取决于是否NULL找到NULL或FALSE返回 这本身就是一种非常有效的方法，但是需要两次查找值会降低查询性能。 查询需要1.34秒。 另一个令人讨厌的副作用是使用a subplan是PostgreSQL的优化器可用于NOT IN构造的唯一方法。 由于PostgreSQL无法将散列子计划刷新到磁盘上，因此它将估计子查询大小，如果它确定它不适合work_mem，它将使用仅为subplan每行执行t_left或实现的仅仅是将在循环中搜索行。 这可能非常糟糕，因为优化器只会改变计划，因为t_right会超出一定的限制，有一天查询会变得很慢而没有任何明显的原因。 PostgreSQL treats LEFT JOIN and NOT EXISTS equally, using same execution plan for both of them (namely a Hash Anti Join for the example above). PostgreSQL对待它们LEFT JOIN并NOT EXISTS同样地使用相同的执行计划（即Hash Anti Join上面的示例）。 As for NOT IN, which is semantically different since its logic is trivalent and it can return NULL, PostgreSQL tries to take this into account and limits itself to using a filter against a subplan (a hashed subplan for a hashable resultset like in example above). 至于NOT IN它在语义上是不同的，因为它的逻辑是三价的并且它可以返回NULL，PostgreSQL试图将此考虑在内并限制自己使用针对a的a subplan（hashed subplan对于像上面的例子中的可哈希结果集）。 Since it need to search the hash table for each missing value twice (first time to find the value, second time to find a NULL), this method is a little less efficient. 由于需要两次搜索哈希表中的每个缺失值（第一次查找值，第二次查找a NULL），此方法效率稍差。 A plain subplan, which the optimizer can resort to any time it decides the list will not fit into the memory, is very inefficient and the queries that have possibility of using it should be avoided like a plague. 一个普通的subplan，它优化器可以求助于它决定名单将不适合到内存中的任何时间，是非常低效的，应该避免像瘟疫一样有使用它的可能性的查询。 That\u0026#39;s why in PostgreSQL 8.4 one should always use LEFT JOIN / IS NULL or NOT EXISTS rather than NOT IN to find the missing values. 这就是为什么在PostgreSQL 8.4中应该总是使用LEFT JOIN / IS NULL或NOT EXISTS不是NOT IN找到缺失的值。 "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.14-postgresql/postgresql%E5%A4%96%E9%83%A8%E8%A1%A8/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "外部表 postgres_fdw 添加extension create extension postgres_fdw; select * from pg_foreign_data_wrapper; 创建远端数据库 create database dblink TEMPLATE template0;\n本地创建server select * from pg_foreign_server; create server ex_db foreign data wrapper postgres_fdw options(host \u0026lsquo;127.0.0.1\u0026rsquo;,port \u0026lsquo;5866\u0026rsquo;,dbname \u0026lsquo;highgo\u0026rsquo;); create server mysql_config foreign data wrapper postgres_fdw options(host \u0026lsquo;192.168.69.161\u0026rsquo;,port \u0026lsquo;3306\u0026rsquo;,dbname \u0026lsquo;config\u0026rsquo;); ALTER SERVER ex_db OPTIONS (host \u0026lsquo;127.0.0.1\u0026rsquo;, dbname \u0026lsquo;highgo_2\u0026rsquo;);\n创建用户匹配信息 select * from pg_user_mappings; create user mapping for postgres[账户名] server ex_db options(user \u0026lsquo;highgo\u0026rsquo;,password \u0026lsquo;highgo\u0026rsquo;); create user mapping for postgres server mysql_config options(user \u0026lsquo;root\u0026rsquo;,password \u0026lsquo;185b838a0a4f_#A\u0026rsquo;);\n创建外部表 CREATE FOREIGN TABLE config_lv(lv int4, \u0026ldquo;exp\u0026rdquo; int4) server ex_db options (dbname \u0026lsquo;config\u0026rsquo;,table_name \u0026lsquo;config_lv\u0026rsquo;);\nCREATE FOREIGN TABLE dblink.usr_truck_mapping( \u0026ldquo;PROFILE_ID\u0026rdquo; int4, \u0026ldquo;TKID\u0026rdquo; int4, \u0026ldquo;DEFAULT_TK\u0026rdquo; int4, \u0026ldquo;DELETED\u0026rdquo; int4, \u0026ldquo;CREATED_BY\u0026rdquo; int4, \u0026ldquo;CREATED_BY_NAME\u0026rdquo; varchar, \u0026ldquo;CREATED_TIME\u0026rdquo; TIMESTAMP, \u0026ldquo;UPDATED_BY\u0026rdquo; int4, \u0026ldquo;UPDATED_BY_NAME\u0026rdquo; varchar, \u0026ldquo;UPDATED_TIME\u0026rdquo; TIMESTAMP, \u0026ldquo;VERSION\u0026rdquo; int4 ) server ex_db options (dbname \u0026lsquo;member_pilot\u0026rsquo;, table_name \u0026lsquo;usr_truck_mapping\u0026rsquo;);\n删除外部表 DROP FOREIGN TABLE bb;\n导入整个schema下的所有表 grant all on foreign server mysql_config to postgres; IMPORT FOREIGN SCHEMA dblink FROM SERVER ex_db into dblink;\n"
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.14-postgresql/postgresql%E6%97%B6%E5%BA%8F%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BE%8B%E5%AD%90/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "时序数据库插件 psql -U postgres -h 127.0.0.1 create database nyc_data; \\c nyc_data CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE; CREATE TABLE conditions ( time TIMESTAMPTZ NOT NULL, location TEXT NOT NULL, temperature DOUBLE PRECISION NULL, humidity DOUBLE PRECISION NULL ); SELECT create_hypertable(\u0026#39;conditions\u0026#39;, \u0026#39;time\u0026#39;); INSERT INTO conditions(time, location, temperature, humidity) VALUES (NOW(), \u0026#39;office\u0026#39;, 70.0, 50.0); SELECT * FROM conditions ORDER BY time DESC LIMIT 100; "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.15-elk/install/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "安装 docker安装 docker run -d --restart=always --privileged=true -p 9200:9200 -p 9300:9300 -e \u0026#34;discovery.type=single-node\u0026#34; --name elasticsearch1 -v /data1/project/elk/elasticsearch/config:/usr/share/elasticsearch/config/ docker.elastic.co/elasticsearch/elasticsearch:7.10.2 docker run -d --restart=always --privileged=true --link elasticsearch-1:elasticsearch -p 5601:5601 --name kibana1 docker.elastic.co/kibana/kibana:7.10.2 "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.16-clickhouse/http/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "curl ping curl \u0026#39;http://localhost:8123/ping\u0026#39; select echo \u0026#39;SELECT 1\u0026#39; | curl \u0026#39;http://192.168.1.185:8123/?user=default\u0026amp;password=1Aa_abbccd\u0026#39; -d @- echo \u0026#39;SELECT number FROM numbers LIMIT 10\u0026#39; | curl \u0026#39;http://192.168.1.185:8123/?user=default\u0026amp;password=1Aa_abbccd\u0026amp;database=system\u0026#39; --data-binary @- insert echo 'INSERT INTO t VALUES (1),(2),(3)' | POST 'http://localhost:8123/?database=test_db' "
},
{
	"uri": "https://yujian1018.github.io/book/pro/7.-%E9%A1%B9%E7%9B%AE/7.16-clickhouse/install/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "Quick start 安装 https://clickhouse.tech/#quick-start 配置 \u0026lt;http_port\u0026gt;8123\u0026lt;/http_port\u0026gt; \u0026lt;tcp_port\u0026gt;8124\u0026lt;/tcp_port\u0026gt; \u0026lt;mysql_port\u0026gt;8125\u0026lt;/mysql_port\u0026gt; \u0026lt;listen_host\u0026gt;::\u0026lt;/listen_host\u0026gt; 用户 如何生成密码 PASSWORD=$(base64 \u0026lt; /dev/urandom | head -c8); echo \u0026#34;$PASSWORD\u0026#34;; echo -n \u0026#34;$PASSWORD\u0026#34; | sha256sum | tr -d \u0026#39;-\u0026#39; \u0026lt;users\u0026gt; \u0026lt;default\u0026gt; \u0026lt;password\u0026gt;705c37761366c70774b786a9d800af2369759c1fc73ff61f2396648dd5daa5aa\u0026lt;/password\u0026gt; \u0026lt;networks incl=\u0026#34;networks\u0026#34; replace=\u0026#34;replace\u0026#34;\u0026gt; \u0026lt;ip\u0026gt;::/0\u0026lt;/ip\u0026gt; \u0026lt;/networks\u0026gt; \u0026lt;profile\u0026gt;default\u0026lt;/profile\u0026gt; \u0026lt;quota\u0026gt;default\u0026lt;/quota\u0026gt; \u0026lt;/default\u0026gt; \u0026lt;ck\u0026gt; \u0026lt;password_sha256_hex\u0026gt;967f3bf355dddfabfca1c9f5cab39352b2ec1cd0b05f9e1e6b8f629705fe7d6e\u0026lt;/password_sha256_hex\u0026gt; \u0026lt;networks incl=\u0026#34;networks\u0026#34; replace=\u0026#34;replace\u0026#34;\u0026gt; \u0026lt;ip\u0026gt;::/0\u0026lt;/ip\u0026gt; \u0026lt;/networks\u0026gt; \u0026lt;profile\u0026gt;readonly\u0026lt;/profile\u0026gt; \u0026lt;quota\u0026gt;default\u0026lt;/quota\u0026gt; \u0026lt;/ck\u0026gt; \u0026lt;/users\u0026gt; clickhouse-client -h 127.0.0.1 -u log --port 8124 --password ldsLjNhB clickhouse-client -h 127.0.0.1 -u default --port 8124 --password 705c37761366c70774b786a9d800af2369759c1fc73ff61f2396648dd5daa5aa "
},
{
	"uri": "https://yujian1018.github.io/book/pro/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
}]