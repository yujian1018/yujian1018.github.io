<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>清水的小站</title>
    <link>https://yujian1018.github.io/book/erlang/</link>
    <description>Recent content on 清水的小站</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 30 Aug 2019 15:13:01 +0800</lastBuildDate>
    
	<atom:link href="https://yujian1018.github.io/book/erlang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>1.1安装与运行环境</title>
      <link>https://yujian1018.github.io/book/erlang/1.%E5%AD%A6%E4%B9%A0/1.1%E5%AE%89%E8%A3%85%E4%B8%8E%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/1.%E5%AD%A6%E4%B9%A0/1.1%E5%AE%89%E8%A3%85%E4%B8%8E%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83/</guid>
      <description>Install #ubuntu sudo apt-get install make gcc openssl libssl-dev libncurses-dev libwxgtk3.0-dev m4 glibc-devel build autoconf sudo apt install -y libncurses-dev libwxgtk3.0-dev m4; ## CentOS yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel wget https://github.com/erlang/otp/archive/OTP-21.0.tar.gz tar -zxf otp-OTP-21.0.tar.gz cd otp-OTP-21.0 ./otp_build autoconf ./configure --enable-native-libs make sudo make install 依赖库说明 lib库 功能 libncurses-dev 系统的必备库,基础</description>
    </item>
    
    <item>
      <title>1.2编辑器、集成开发环境与其它工具</title>
      <link>https://yujian1018.github.io/book/erlang/1.%E5%AD%A6%E4%B9%A0/1.2%E7%BC%96%E8%BE%91%E5%99%A8%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%85%B6%E5%AE%83%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/1.%E5%AD%A6%E4%B9%A0/1.2%E7%BC%96%E8%BE%91%E5%99%A8%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%85%B6%E5%AE%83%E5%B7%A5%E5%85%B7/</guid>
      <description>编辑器 IDEA VIM VSCode Sublime Text 3 side-effect-free无副作用,其中一种定义是说:一个程序执行前后保持程序的状态不变,不改变非局部变量的值,不改</description>
    </item>
    
    <item>
      <title>1.3代码编译运行</title>
      <link>https://yujian1018.github.io/book/erlang/1.%E5%AD%A6%E4%B9%A0/1.3%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/1.%E5%AD%A6%E4%B9%A0/1.3%E4%BB%A3%E7%A0%81%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C/</guid>
      <description>安装Erlang后，运行代码，先编译后运行 在Eshell中编译运行 $erl Erlang (BEAM) emulator version 5.5.1 [source] [async一threads:0] [hipe] Eshell V5.5.1 (abort with }G) 1&amp;gt; c(hello). {ok，h</description>
    </item>
    
    <item>
      <title>2.1 Erlang终端</title>
      <link>https://yujian1018.github.io/book/erlang/2.%E5%9F%BA%E7%A1%80/2.1-erlang%E7%BB%88%E7%AB%AF/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/2.%E5%9F%BA%E7%A1%80/2.1-erlang%E7%BB%88%E7%AB%AF/</guid>
      <description>在unix终端中输入erl来打开Erlang终端。Erlang终端简称（Eshell) 在windows中我们可以通过单击&amp;quot;开始&amp;q</description>
    </item>
    
    <item>
      <title>2.2 基础语法</title>
      <link>https://yujian1018.github.io/book/erlang/2.%E5%9F%BA%E7%A1%80/2.2-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/2.%E5%9F%BA%E7%A1%80/2.2-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</guid>
      <description>注释 注释不会被编译 单行注释，你可以在任何地方使用以 %% 开头的单行注释。 多行注释等同于单行注释 %% if test(A, B) -&amp;gt; if (A &amp;gt; 1) andalso (B &amp;gt; 1) -&amp;gt; 1; true -&amp;gt; 2 end. if语句会对</description>
    </item>
    
    <item>
      <title>2.2.1 异常处理</title>
      <link>https://yujian1018.github.io/book/erlang/2.%E5%9F%BA%E7%A1%80/2.2.1-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/2.%E5%9F%BA%E7%A1%80/2.2.1-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid>
      <description>即便是Erlang程序员也难免会写出有问题的程序。代码中的语法错误（和一些语义错误）可以借助编译器检测出来，但程序仍可能含有逻辑错误。对需求</description>
    </item>
    
    <item>
      <title>2.3 数据类型</title>
      <link>https://yujian1018.github.io/book/erlang/2.%E5%9F%BA%E7%A1%80/2.3-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/2.%E5%9F%BA%E7%A1%80/2.3-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>1. 变量 1.变量不变 在erlang中的变量只能被赋值一次，变量第一个字母要是大写的。 在erlang中变量是不可变的，也没有共享内存的概念，也没</description>
    </item>
    
    <item>
      <title>2.4 运算符</title>
      <link>https://yujian1018.github.io/book/erlang/2.%E5%9F%BA%E7%A1%80/2.4-%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/2.%E5%9F%BA%E7%A1%80/2.4-%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>转义符 \b 退格 \d 删除 \e 转义 \f 换页 \n 新行 \r 换行 \s 空格 \t 制表符 \v 纵向制表符 \&amp;#39; 单引号 \&amp;#34; 双引号 \\ 反斜杠 \C C的ASCII码（C是一个字符） 操作符 X&amp;gt;Y X大于</description>
    </item>
    
    <item>
      <title>2.5 模块属性</title>
      <link>https://yujian1018.github.io/book/erlang/2.%E5%9F%BA%E7%A1%80/2.5-%E6%A8%A1%E5%9D%97%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/2.%E5%9F%BA%E7%A1%80/2.5-%E6%A8%A1%E5%9D%97%E5%B1%9E%E6%80%A7/</guid>
      <description>模块属性 -module(modname). -import(...). -export(...). -compile(Options). -compile(export_all)%属性经常被使用在调试程序中。 -compile( {parse_transform, Module} ). -vsn(Version). %最后一个选项为增加编译选项，Options</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.1%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.1%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/</guid>
      <description>ctrl+G 按c Erlang shell没有反应，可能是正在输入一个字符串&amp;quot;aabbcc&amp;hellip;&amp;hellip; 解决cmd卡死的问题。（win下</description>
    </item>
    
    <item>
      <title>3asn1</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.7asn1/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.7asn1/</guid>
      <description>ASN.1（抽象语法标记：Abstract Syntax Notation One) 是一套标准，是描述数据的表示、编码、传输、解码的灵活的记法。它提供了一套正式、无歧义和精确的</description>
    </item>
    
    <item>
      <title>3.10OS_Mon</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.10os_mon/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.10os_mon/</guid>
      <description>操作系统健康应用</description>
    </item>
    
    <item>
      <title>3.11crypto</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.11crypto/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.11crypto/</guid>
      <description>crypto:hash(md5, Bin||Str). md5_to_str(Str) -&amp;gt; &amp;lt;&amp;lt;Mac:128/integer&amp;gt;&amp;gt; = erlang:md5(Str), lists:flatten(io_lib:format(&amp;#34;~32.16.0b&amp;#34;, [Mac])). md5(S) -&amp;gt; Md5_bin = erlang:md5(S), Md5_list = binary_to_list(Md5_bin), lists:flatten(list_to_hex(Md5_list)). list_to_hex(L) -&amp;gt; lists:map(fun(X) -&amp;gt; int_to_hex(X) end, L). int_to_hex(N) when N &amp;lt; 256 -&amp;gt; [hex(N div 16), hex(N rem 16)]. hex(N) when N &amp;lt; 10 -&amp;gt; $0 + N; hex(N) when N &amp;gt;= 10, N &amp;lt; 16 -&amp;gt; $a + (N - 10). md5_to_str(Str) -&amp;gt; &amp;lt;&amp;lt;M:128/integer&amp;gt;&amp;gt; = erlang:md5(Str), Integer_to_hex( M, 32 ). integer_to_hex(I,</description>
    </item>
    
    <item>
      <title>3.12Port</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.12port/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.12port/</guid>
      <description>port(socket)调优 示例：服务器监听端口，接受客户端请求。典型应用场景web服务器，需要实现高吞吐，低延迟的目标 Res = gen_tcp:listen(Port, [binary, {reuseaddr, true}, {nodelay, true}, {delay_send,true}, {high_watermark,64</description>
    </item>
    
    <item>
      <title>3compiler</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.8compiler/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.8compiler/</guid>
      <description>写测试模块的时候不必频繁导出函数 –compile(export_all) 就可以导出所有函数 编译模块 1.-compile( export_all ) 2.-compile( {parse_transform,Module} ). Module:parse_transform/2 auses the parse transformation function Module:parse_transform/2 to be applied to the parsed code before</description>
    </item>
    
    <item>
      <title>8.1.1Erlang的调度原理</title>
      <link>https://yujian1018.github.io/book/erlang/8.%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/8.1%E8%B5%84%E6%96%99/8.1.1erlang%E7%9A%84%E8%B0%83%E5%BA%A6%E5%8E%9F%E7%90%86/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/8.%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/8.1%E8%B5%84%E6%96%99/8.1.1erlang%E7%9A%84%E8%B0%83%E5%BA%A6%E5%8E%9F%E7%90%86/</guid>
      <description>原文 http://jlouisramblings.blogspot.com/2013/01/how-erlang-does-scheduling.html 免爬墙链接 http://www.dikutal.dk/blog/jlouis/how-erlang-does-scheduling Jesper Louis Andersen，2013年1月12日 我用这篇文章解释一下Erlang和其他语言运行时相比不同之处。我还要解释为什么E</description>
    </item>
    
    <item>
      <title>8</title>
      <link>https://yujian1018.github.io/book/erlang/8.%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/8.2%E6%9D%82%E8%AE%B0/8.2.1%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/8.%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/8.2%E6%9D%82%E8%AE%B0/8.2.1%E8%AE%BE%E8%AE%A1/</guid>
      <description>Erlang的设计哲学是为每一个独立的事件创建一个新进程. Erlang的容错处理：如果不能完成一个任务就死掉 让其它正常的进程来善后。link</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.2otp%E6%A8%A1%E5%9D%97/3.2.1%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.2otp%E6%A8%A1%E5%9D%97/3.2.1%E5%87%BD%E6%95%B0/</guid>
      <description>Erlang的设计哲学是为每一个独立的事件创建一个新进程. 负责进程创建职责的是Erlang VM中的Scheduler spawn第三个参数是L</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.2otp%E6%A8%A1%E5%9D%97/3.2.2receive/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.2otp%E6%A8%A1%E5%9D%97/3.2.2receive/</guid>
      <description>start() -&amp;gt; register( mnesiaDBA_pub_clear, spawn( fun()-&amp;gt; loop() end ) ). stop() -&amp;gt; rpc( {stop, &amp;#34;stop&amp;#34;} ). rpc(Request) -&amp;gt; mnesiaDBA_pub_clear ! {self(), Request}, receive {mnesiaDBA_pub_clear, Res} -&amp;gt; Res; Other -&amp;gt; io:format(&amp;#34;server is different:~p~n&amp;#34;, [Other]) end. loop() -&amp;gt; receive {ClientPid, {table, Table}} -&amp;gt; Res = filter(Table), ClientPid ! {mnesiaDBA_pub_clear, Res}, loop(); {ClientPid, {stop, Stop}} -&amp;gt; ClientPid ! {mnesiaDBA_pub_clear, &amp;#34;pid stopping reason:&amp;#34; ++ hd(io_lib:format(&amp;#34;~p~n&amp;#34;, [Stop]))}; {ClientPid, Other} -&amp;gt; ClientPid ! {mnesiaDBA_pub_clear, &amp;#34;arg is error:&amp;#34; ++ hd(io_lib:format(&amp;#34;~p~n&amp;#34;, [Other]))}, loop() end.</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.2otp%E6%A8%A1%E5%9D%97/3.2.3.app.src%E6%96%87%E4%BB%B6/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.2otp%E6%A8%A1%E5%9D%97/3.2.3.app.src%E6%96%87%E4%BB%B6/</guid>
      <description>{application,%进程名称% [{description,&amp;quot;Yaws applications 中文语义切词系统&amp;quot;}, {vsn,&amp;quot;1.0.0&amp;quot;}, {modules,[ %所有需要加载的模块]}, {registered, [%注册进程%]}, %填写的注册进</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.2otp%E6%A8%A1%E5%9D%97/3.2.4_app.erl/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.2otp%E6%A8%A1%E5%9D%97/3.2.4_app.erl/</guid>
      <description>-module( admin_app ). -behaviour(application). -export( [start/2, stop/1] ). start(_Type, _State) -&amp;gt; %%初始化的数据 io:format( &amp;#34;admin_app111~p~n222~p~n&amp;#34;, [ _Type, _State ] ), admin_sup:start(). stop(_State) -&amp;gt; ok. 1&amp;gt;application:start(log4erl). 我们就从这一行命令开始说起吧,回车之后可以把log4erl应用程序启动起来.E</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.2otp%E6%A8%A1%E5%9D%97/3.2.5_sup.erl/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.2otp%E6%A8%A1%E5%9D%97/3.2.5_sup.erl/</guid>
      <description>%% @author : 余健 &amp;lt;yujian1018@gmail.com&amp;gt; %% @创建时间 : 2014-04-14 %% @doc : 如果该系统是一个application，该模块设置该application的监督树，监督树的功能就只是提供</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.2otp%E6%A8%A1%E5%9D%97/3.2.6gen_server/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.2otp%E6%A8%A1%E5%9D%97/3.2.6gen_server/</guid>
      <description>%%%------------------------------------------------------------------- %%% @author yujian1018@gmail.com %%% @doc %%% %%% Created : 20. 八月 2018 下午3:31 %%%------------------------------------------------------------------- -module(srv_trie4). -behaviour(gen_server). -export([start_link/0, init/1, handle_call/3, handle_cast/2, handle_info/2, terminate/2, code_change/3]). -export([ start/0, stop/0, select/3 ]). start() -&amp;gt; mnesia:start(). stop() -&amp;gt; gen_server:call(?MODULE, stop). %% @doc Args参数可以列表表示项，Tuple表示参数只有一</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.2otp%E6%A8%A1%E5%9D%97/3.2.7gen_fsm/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.2otp%E6%A8%A1%E5%9D%97/3.2.7gen_fsm/</guid>
      <description>%%%------------------------------------------------------------------- %%% @author yujian %%% @doc %%%------------------------------------------------------------------- -module(test_fsm). -behaviour(gen_fsm). -export([start_link/0, init/1, handle_event/3, handle_sync_event/4, handle_info/3, terminate/3, code_change/4]). -export([send_event/1, role_login/2, role_logined/2, role_ping_role/2 ]). -define(SERVER, ?MODULE). -record(state, {}). start_link() -&amp;gt; gen_fsm:start_link({local, ?SERVER}, ?MODULE, [], []). init([]) -&amp;gt; io:format( &amp;#34;111:~n&amp;#34; ), {ok, role_login, #state{}}. handle_event(_Event, StateName, State) -&amp;gt; io:format( &amp;#34;222:~w~n&amp;#34;, [[_Event, StateName, State]] ), {next_state, StateName, State}. handle_sync_event(_Event, _From, StateName, State) -&amp;gt; io:format( &amp;#34;333:~w~n&amp;#34;, [[_Event, _From, StateName, State]] ), Reply = ok, {reply, Reply, StateName, State}.</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.3erts/3.3.1init/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.3erts/3.3.1init/</guid>
      <description>get_argument( home ). %{ok,[[&amp;#34;C:\\Documents and Settings\\Administrator&amp;#34;]]} init:get_arguments(). %获取启动的配置参数</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.3erts/3.3.2erts_debug/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.3erts/3.3.2erts_debug/</guid>
      <description>apply(M,F,A)要比直接调用调用对应的方法M:F(A1,A2&amp;hellip;)要慢6~10倍，尽量避免使用 BIFs是built-in</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.3erts/3.3.3nif/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.3erts/3.3.3nif/</guid>
      <description>niftest.erl -module(niftest). -export([init/0, hello/0]). init() -&amp;gt; erlang:load_nif(&amp;#34;./niftest&amp;#34;, 0). hello() -&amp;gt; %函数名称 &amp;#34;NIF library not loaded&amp;#34;. /* niftest.c */ #include &amp;#34;erl_nif.h&amp;#34; static ERL_NIF_TERM hello(ErlNifEnv* env, int argc, const ERL_NIF_TERM argv[]) { return enif_make_string(env, &amp;#34;Hello world!&amp;#34;, ERL_NIF_LATIN1); } //定义函数 static ErlNifFunc nif_funcs[] = { {&amp;#34;hello&amp;#34;, 0, hello} }; ERL_NIF_INIT(niftest,nif_funcs,NULL,NULL,NULL,NULL) %编译成公共库，需要使用到e</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.4kernel/3.4.1code_server/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.4kernel/3.4.1code_server/</guid>
      <description>code_server 库 目录 库 文件 %% 第一种热更新方式： {Module, Binary, Filename} = code:get_object_code(Module), %获取Module.beam的信息 code:load_binary(Module, Filename, Binary). %load 二进制 %% 第二种热更新方式： code:purge(Module), %杀掉应用old_vers</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.4kernel/3.4.2inet/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.4kernel/3.4.2inet/</guid>
      <description>Access to TCP/IP Protocols peername(State#state.socket) %socket获取登录的ip和端口</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.4kernel/3.4.3net_kernel/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.4kernel/3.4.3net_kernel/</guid>
      <description>net_kernel:monitor_nodes(Flag).%调用这个方法来订阅节点状态变动的消息.一个节点加入的时候会向所有的订阅进程发</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.4kernel/3.4.4net_adm/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.4kernel/3.4.4net_adm/</guid>
      <description>net_adm:ping(Node). </description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.4kernel/3.4.5/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.4kernel/3.4.5/</guid>
      <description>error_logger</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.4kernel/3.4.5error_logger/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.4kernel/3.4.5error_logger/</guid>
      <description>1.error_logger:error_msg( &amp;#34;an error has occurred\n&amp;#34; ). 2.error_logger:error_msg( &amp;#34;~s, an error has occurred\n&amp;#34;, [ &amp;#34;joe&amp;#34; ] ). 3.error_logger:error_report( [{tag1,data1}, a_term, {tar2, data}] ). 4.error_logger:info_msg(FormatStr, Args); 5.error_logger:warning_msg(FormatStr, Args); 6.error_logger:info_report(progress,[{application,test},{started_at, nonode@noh ost}]). error_logger:info_report(crash,[{application,test},{started_at, nonode@noh ost}]). </description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.4kernel/3.4.7application/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.4kernel/3.4.7application/</guid>
      <description>通用OTP应用程序的方函数。 1.Module:config_change(Changed, New, Removed)一&amp;gt;ok 配置参数发生变化的回调函数。 Module:prep_stop(State)一&amp;</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.11dict/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.11dict/</guid>
      <description>dict是动态哈希表实现的字典.在接口上和orddict保持一致,在实现上和array动态扩展的思路类似, 与proplists,orddic</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.12erl_/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.12erl_/</guid>
      <description>1.{ok,Scanned,_} = erl_scan:string( &amp;#34;1+2*2+(2+4)/2.&amp;#34; ). {ok,[{integer,1,1}, {&amp;#39;+&amp;#39;,1}, {integer,1,2}, {&amp;#39;*&amp;#39;,1}, {integer,1,2}, {&amp;#39;+&amp;#39;,1}, {&amp;#39;(&amp;#39;,1}, {integer,1,2}, {&amp;#39;+&amp;#39;,1}, {integer,1,4}, {&amp;#39;)&amp;#39;,1}, {&amp;#39;/&amp;#39;,1}, {integer,1,2}], 1} 2.{ok,Parsed} = erl_parse:parse_exprs(Scanned), {ok,[{op,1,&amp;#39;+&amp;#39;, {op,1,&amp;#39;+&amp;#39;, {integer,1,1}, {op,1,&amp;#39;*&amp;#39;,{integer,1,2},{integer,1,2}}}, {op,1,&amp;#39;/&amp;#39;, {op,1,&amp;#39;+&amp;#39;,{integer,1,2},{integer,1,4}}, {integer,1,2}}}]} 3.erl_eval:exprs(Parsed,[]). {value,8.0,[]} 4.erl_syntax:abstract(T::term()) -&amp;gt; syntaxTree() {ok, T1, _} = erl_scan:string( &amp;#34;aaa,bbb.&amp;#34; ). 5. erl_parse:parse_term(T1). T1的末尾必须是 {dot, 1}</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.13file/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.13file/</guid>
      <description>写文件 file:open( FileName, [append]|[write]|[read] ) file:open(?FilePath, [write, {encoding, utf8}]) tool_log( Res, State )-&amp;gt; {ok, S} = file:open(get_path(&amp;#34;../doc/tool_log.txt&amp;#34;), [append]), io:format( S, &amp;#34;~p:~n{~p, ~p}~n&amp;#34;, [ erlang:localtime(), Res, State ]), file:close( S ). file:open(File, [raw, binary]). 2.file:write( IoDevice, Bytes ). file:write_file( FileName, Bytes ). 可以保存图片 ###读文件 file:open( FileName, read ). {ok,&amp;lt;0.547.0&amp;gt;} io:read( &amp;lt;0.547.0&amp;gt;, &amp;#39;&amp;#39; ). {ok,{1</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.14filelib/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.14filelib/</guid>
      <description>file utilities, such as wildcard matching of filenames filelib:ensure_dir( &amp;#34;test/c/a.txt&amp;#34; ). %在pwd()目录下查看是否存在存在该目录，如果不存在新建目录，不新建文件 filelib:file_size( &amp;#34;text.txt&amp;#34; ). 127 filelib:is_dir( &amp;#34;test/c&amp;#34; ). true filelib:is_dir( &amp;#34;text.txt&amp;#34; ). false filelib:is_file(&amp;#34;test/c/&amp;#34;). true filelib:is_file(&amp;#34;text.txt&amp;#34;).true filelib:is_regular(&amp;#34;log/ssl.log&amp;#34;). true filelib:is_regular(&amp;#34;log/&amp;#34;). false filelib:last_modified(&amp;#34;log/ssl.log&amp;#34;). {{2015,10,29},{17,51,38}} filelib:wildcard(&amp;#34;log/*&amp;#34;).</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.15gb_trees/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.15gb_trees/</guid>
      <description>平衡二叉树</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.17gen_tcp/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.17gen_tcp/</guid>
      <description>server() -&amp;gt; LSock = listen(), {ok, Sock} = gen_tcp:accept(LSock), {ok, Bin} = do_recv(Sock, []), ok = gen_tcp:close(Sock), Bin. listen() -&amp;gt; {ok, LSock} = gen_tcp:listen(5678, [binary, {packet, 4}, {active, false}]), LSock. client() -&amp;gt; SomeHostInNet = &amp;#34;localhost&amp;#34;, {ok, Sock} = gen_tcp:connect(SomeHostInNet, 5678, [binary, {packet, 0}]), ok = gen_tcp:send(Sock, &amp;#34;Some Data&amp;#34;), ok = gen_tcp:close(Sock). do_recv(Sock, Bs) -&amp;gt; case gen_tcp:recv(Sock, 0) of {ok, B} -&amp;gt; do_recv(Sock, [Bs, B]); {error, closed} -&amp;gt; {ok, list_to_binary(Bs)} end.</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.18gen_server/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.18gen_server/</guid>
      <description>Generic Server Behaviour 一般服务行为（通用服务器行为）</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.19httpc/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.19httpc/</guid>
      <description>1、启动 方式一：启动inets应用，一个缺省profile的管理进程将被启动。 inets:start(). 方式二：运行时，动态启动profile停止profile。 动</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.20init_parse/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.20init_parse/</guid>
      <description>init_parse:ntoa( IP:tuple() ) -&amp;gt; IP:string() </description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.21init/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.21init/</guid>
      <description>init:get_argument( home ). -&amp;gt; {ok,[[&amp;#34;C:\\Users\\Administrator&amp;#34;]]} init:stop().关闭所有的Erlang Application，包括终端 init:i(). 列出网络的连接情况</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.22inet/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.22inet/</guid>
      <description>inet:getifaddrs() 本机所有网卡 inet:getif() 本机网卡ip地址 inet:peername(State#state.socket)</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.23io/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.23io/</guid>
      <description>io:get_line io:get_line( &amp;#34;gissa line&amp;gt;&amp;#34; ). gissa line&amp;gt; fdfdsfdfdsfds. &amp;#34;fdfdsfdfdsfds.\n&amp;#34; io:get_chars io:get_chars( &amp;#34;me&amp;gt;&amp;#34;,4 ). me&amp;gt;fdfdfdfd. &amp;#34;fdfd&amp;#34; fdfd io:read( &amp;#34;ok,aa&amp;gt;&amp;gt;&amp;#34; ) io:read( &amp;#34;ok,aa&amp;gt;&amp;gt;&amp;#34; ). ok,aa&amp;gt;&amp;gt;atom. {ok,atom}. io:fwrite(&amp;#34;843 Error&amp;#34;). io:fwrite(&amp;#34;843 Error&amp;#34;). 843 Errorok io_lib:format(&amp;#34;~32.16.0b&amp;#34;, [Mac])). 格式化&amp;#34;~32.16.0b&amp;#34;的含义,输出的用长度length</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.24lists/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.24lists/</guid>
      <description>lists模块的reverse/1经过高度优化，可以在重排lists元素顺序时考虑使用 如果两个list都拥有很多数据，那么请不要使用&amp;rsq</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.25maps/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.25maps/</guid>
      <description>1.find(Key, Map) -&amp;gt; {ok, Value} | error Map = #{&amp;#34;hi&amp;#34; =&amp;gt; 42}, Key = &amp;#34;hi&amp;#34;, maps:find(Key,Map). {ok,42} 2.fold(Fun, Init, Map) -&amp;gt; Acc Fun = fun(K,V,AccIn) when is_list(K) -&amp;gt; AccIn + V end, Map = #{&amp;#34;k1&amp;#34; =&amp;gt; 1, &amp;#34;k2&amp;#34; =&amp;gt; 2, &amp;#34;k3&amp;#34; =&amp;gt; 3}, maps:fold(Fun,0,Map). 3.from_list(List) -&amp;gt; Map List = [{&amp;#34;a&amp;#34;,ignored},{1337,&amp;#34;value two&amp;#34;},{42,value_three},{&amp;#34;a&amp;#34;,1}], maps:from_list(List). #{42 =&amp;gt; value_three,1337 =&amp;gt; &amp;#34;value two&amp;#34;,&amp;#34;a&amp;#34; =&amp;gt; 1} 4.get(Key, Map) -&amp;gt; Value Key = 1337, Map = #{42 =&amp;gt; value_two,1337 =&amp;gt; &amp;#34;value one&amp;#34;,&amp;#34;a&amp;#34; =&amp;gt; 1}, maps:get(Key,Map).</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.26os/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.26os/</guid>
      <description>os:type(). os:cmd(Cmd). os:cmd(&amp;#34;file --mime-encoding -b &amp;#34; ++ FullFile) </description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.27ordsets/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.27ordsets/</guid>
      <description>MODULE SUMMARY
Functions for Manipulating Sets as Ordered Lists  DESCRIPTION
Sets are collections of elements with no duplicate elements. An ordset is a representation of a set, where an ordered list is used to store the elements of the set. An ordered list is more efficient than an unordered list. This module provides exactly the same interface as the module sets but with a defined representation. One difference is that while sets considers two elements as different if they do not match (=:=), this module considers two elements as different if and only if they do not compare equal (==).</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.28proplists/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.28proplists/</guid>
      <description>proplists:get_value(1,[{1,2},{3,4}], none) -&amp;gt; 2 proplists:get_value(1,[{5,6},{3,4}], none) -&amp;gt; none </description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.29queue/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.29queue/</guid>
      <description>Queue:列队 1.queue:new(). -&amp;gt; {[],[]} 2.queue:in( {1,2}, {[],[]} ) -&amp;gt; {[{1,2}],[]} queue:in( {a,b}, {[{1,2}],[]} ) -&amp;gt; {[{a,b}],[{1,2}]} queue:in( {3,4}, {[{a,b}],[{1,2}]} ) -&amp;gt; {[{3,4},{a,b}],[{1,2}]} 3.queue:in_r( {c,d}, {[{3,4},{a,b}],[{1,2}]} ) -&amp;gt; {[{3,4},{a,b}],[{c,d},{1,2}]}. 4.queue:out( {[{3,4},{a,b}],[{c,d},{1,2}]} ) -&amp;gt; {{value,{c,d}},{[{3,4},{a,b}],[{1,2}]}} 5.queue:out_r( {[{3,4},{a,b}],[{c,d},{1,2}]} ) -&amp;gt; {{value,{3,4}},{[{a,b}],[{c,d},{1,2}]}}</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.2array/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.2array/</guid>
      <description>函数式且可扩展的数组模块 内部实现：tuple 1.array:new(10, {default, {[], 0}}). -&amp;gt; {array,10,0,{[],0},10} 2.array:set( 0, [1,2,3], Array2 ). -&amp;gt; Array 3.array:get( 0, Array3 ). -&amp;gt; [1,2,3]. 4.array:reset(Index, Array). 清空该列 5.array:from_list(Sub)</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.30qlc/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.30qlc/</guid>
      <description>模块 QLC 模块描述 Mnesia、ets、dets、etc查询接口 DESCRIPTION 为Mnesia、ets、dets或者其他的数据类型提供一个迭代器遍历的查询接口</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.31re/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.31re/</guid>
      <description>9&amp;gt; re:run(&amp;#34;The sick quick brown fox.&amp;#34;, &amp;#34;ick&amp;#34;, [global]). {match,[[{5,3}],[{11,3}]]} 10&amp;gt; re:replace(&amp;#34;The quick brown fox.&amp;#34;, &amp;#34;brown&amp;#34;, &amp;#34;red&amp;#34;). [&amp;lt;&amp;lt;&amp;#34;The quick &amp;#34;&amp;gt;&amp;gt;,&amp;lt;&amp;lt;&amp;#34;red&amp;#34;&amp;gt;&amp;gt;|&amp;lt;&amp;lt;&amp;#34; fox.&amp;#34;&amp;gt;&amp;gt;] 11&amp;gt; re:replace(&amp;#34;The quick brown fox.&amp;#34;, &amp;#34;brown&amp;#34;, &amp;#34;red&amp;#34;, [{return, list}]). &amp;#34;The quick red fox.&amp;#34; 27&amp;gt; re:run(&amp;#34;E-mail: xyz@pdq.com&amp;#34;, &amp;#34;[a-zA-Z0-9]+@[a-zA-Z0-9]+\.[a-z]{2,3}&amp;#34;). {match,[{8,11}]} 28&amp;gt; re:split(&amp;#34;this/is/my/path&amp;#34;,&amp;#34;/&amp;#34;). [&amp;lt;&amp;lt;&amp;#34;this&amp;#34;&amp;gt;&amp;gt;,&amp;lt;&amp;lt;&amp;#34;is&amp;#34;&amp;gt;&amp;gt;,&amp;lt;&amp;lt;&amp;#34;my&amp;#34;&amp;gt;&amp;gt;,&amp;lt;&amp;lt;&amp;#34;path&amp;#34;&amp;gt;&amp;gt;] 29&amp;gt; {_, P} = re:compile(&amp;#34;[a-zA-Z0-9]+@[a-zA-Z0-9]+\.[a-z]{2,3}&amp;#34;). {ok,{re_pattern,0,0,&amp;lt;&amp;lt;69,82,67,80,164,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,64,...&amp;gt;&amp;gt;}} 30&amp;gt; re:run(&amp;#34;E-mail: xyz@pdq.com&amp;#34;, P). {match,[{8,11}]} get_url(String) -&amp;gt; HTTP_regex = &amp;#34;^(H|h)(T|t)(T|t)(P|p)(S|s)*://&amp;#34;, case re:run(String, HTTP_regex) of nomatch -&amp;gt; not_url; {match, _} -&amp;gt; get_url1(String, []) end. 31.</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.32random/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.32random/</guid>
      <description>1.random:uniform( ) -&amp;gt; float(). 随机浮点数 2.random:uniform( N::integer() ) -&amp;gt; integer() -&amp;gt;小于N的随机整数 3.random:seed() -&amp;gt; ran(). 用默认值产生随机数种子。 4.用法 Time = erlang:now(), random:seed( Time ), Ran1 = random:seed( Time ), {New_Num, _} = random:uniform_s( Num, Ran1 ), 看它的代码实</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.33rfc4627-json/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.33rfc4627-json/</guid>
      <description>1.rfc4627:encode( {obj,[{&amp;#34;question&amp;#34;,&amp;lt;&amp;lt;&amp;#34;bbb&amp;#34;&amp;gt;&amp;gt;},{&amp;#34;label&amp;#34;,[[&amp;#34;1&amp;#34;,&amp;#34;2&amp;#34;],[&amp;#34;2&amp;#34;,&amp;#34;3&amp;#34;]]}]} ). &amp;#34;{\&amp;#34;question\&amp;#34;:\&amp;#34;bbb\&amp;#34;,\&amp;#34;label\&amp;#34;:[[[49],[50]],[[50],[51]]]}&amp;#34; 2.rfc4627:encode([{obj,[{&amp;#34;question&amp;#34;,&amp;lt;&amp;lt;&amp;#34;bbb&amp;#34;&amp;gt;&amp;gt;},{&amp;#34;label&amp;#34;,[[&amp;#34;1&amp;#34;,&amp;#34;2&amp;#34;],[&amp;#34;2&amp;#34;,&amp;#34;3&amp;#34;]]}]},{obj,[{&amp;#34;question&amp;#34;,&amp;lt;&amp;lt;&amp;#34;bbb&amp;#34;&amp;gt;&amp;gt;},{&amp;#34;label&amp;#34;,[[&amp;#34;1&amp;#34;,&amp;#34;2&amp;#34;],[&amp;#34;2&amp;#34;,&amp;#34;3&amp;#34;]]}]}] ). &amp;#34;[{\&amp;#34;question\&amp;#34;:\&amp;#34;bbb\&amp;#34;,\&amp;#34;label\&amp;#34;:[[[49],[50]],[[50],[51]]]},{\&amp;#34;question\&amp;#34;:\&amp;#34;bbb\&amp;#34;,\&amp;#34;label\&amp;#34;:[[[49],[50]],[[50],[51]]]}]&amp;#34;. 3.rfc4627:decode( &amp;#34;{\&amp;#34;question\&amp;#34;:\&amp;#34;bbb\&amp;#34;,\&amp;#34;label\&amp;#34;:[[1,2],[2,3]]}&amp;#34; ). {ok,{obj,[{&amp;#34;question&amp;#34;,&amp;lt;&amp;lt;&amp;#34;bbb&amp;#34;&amp;gt;&amp;gt;},{&amp;#34;label&amp;#34;,[[1,2],[2,3]]}]}, []} 4.{obj,[{&amp;#34;temp&amp;#34;,&amp;lt;&amp;lt;&amp;#34;interface&amp;#34;&amp;gt;&amp;gt;}, {&amp;#34;serviceUrl&amp;#34;,&amp;lt;&amp;lt;&amp;#34;aaa&amp;#34;&amp;gt;&amp;gt;}, {&amp;#34;existing&amp;#34;,[{obj,[{&amp;#34;a&amp;#34;,&amp;lt;&amp;lt;&amp;#34;b&amp;#34;&amp;gt;&amp;gt;},{&amp;#34;c&amp;#34;,&amp;lt;&amp;lt;&amp;#34;d&amp;#34;&amp;gt;&amp;gt;}]}]}, {&amp;#34;questionList&amp;#34;, [{obj,[{&amp;#34;question&amp;#34;,&amp;lt;&amp;lt;&amp;#34;111&amp;#34;&amp;gt;&amp;gt;},{&amp;#34;key&amp;#34;,&amp;lt;&amp;lt;&amp;#34;222&amp;#34;&amp;gt;&amp;gt;}]}, {obj,[{&amp;#34;question&amp;#34;,&amp;lt;&amp;lt;&amp;#34;333&amp;#34;&amp;gt;&amp;gt;},{&amp;#34;key&amp;#34;,&amp;lt;&amp;lt;&amp;#34;444&amp;#34;&amp;gt;&amp;gt;}]}]}]}. &amp;#34;{\&amp;#34;temp\&amp;#34;:\&amp;#34;interface\&amp;#34;, \&amp;#34;serviceUrl\&amp;#34;:\&amp;#34;aaa\&amp;#34;, \&amp;#34;existing\&amp;#34;:[{\&amp;#34;a\&amp;#34;:\&amp;#34;b\&amp;#34;, \&amp;#34;c\&amp;#34;:\&amp;#34;d\&amp;#34;}], \&amp;#34;questionList\&amp;#34;:[{\&amp;#34;question\&amp;#34;:\&amp;#34;111\&amp;#34;, \&amp;#34;key\&amp;#34;:\&amp;#34;222\&amp;#34;}, {\&amp;#34;question\&amp;#34;:\&amp;#34;333\&amp;#34;, \&amp;#34;key\&amp;#34;:\&amp;#34;444\&amp;#34;}] }&amp;#34; </description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.34string/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.34string/</guid>
      <description>1.string:len(). 2.string:concat(). --连接 3.string:substr(Str,Start,Length). --Str中从Start开始Length长度 4.string:tokens(Str,List). --从Str中含有List的部分切割 5.string:rstr( String, SubString ). --获取SubString在Stri</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.35ssh/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.35ssh/</guid>
      <description>crypto:start(). ssh:start(). {ok, Conn} = ssh:connect(&amp;#34;ip or host name&amp;#34;, 22, [ {user, &amp;#34;the user name&amp;#34;}, {password, &amp;#34;the password&amp;#34;}, {silently_accept_hosts, true}, {user_interaction, false} ]). </description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.36soft/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.36soft/</guid>
      <description>1.sofs:range(). inout-&amp;gt;sofs:relation([{1,2},{1,3},{2,4},{2,5}]) outout -&amp;gt;{&amp;#39;Set&amp;#39;,[2,3],atom} 2.sofs:relation(). input -&amp;gt;[{1,2},{1,3},{2,4},{2,5}] output -&amp;gt;{&amp;#39;Set&amp;#39;, [{1,2},{1,3},{2,4},{2,5}],{atom,atiom}} 3.sofs:to_external(). input -&amp;gt;{&amp;#39;Set&amp;#39;, [2,3],atom} output -&amp;gt; [2,3] </description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.37sets/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.37sets/</guid>
      <description>1.sets:add_element( Element, Set1 ). 向集合中添加一個元素 2.sets:del_element( Element, Set1 ). 向集合中減少一個元素</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.38supervisor/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.38supervisor/</guid>
      <description>1. supervisor:start_child(admin_sup, [{admin, {admin, start_link, [self()]},perm anent , 2000 ,worker, [admin]}]). -&amp;gt; {ok, Child :: child()} |{ok, Child :: child(), Info :: term()}|{error, startchild_err()} start_child(SupRef, ChildSpec) -&amp;gt; startchild_ret(). SupRef = sup_ref() ChildSpec = child_spec() | (List :: [term()]) child_spec() = {Id :: child_id(), StartFunc :: mfargs(), Restart :: restart(), Shutdown :: shutdown(), Type :: worker(), Modules :: modules()} startchild_ret() = {ok, Child :: child()} | {ok, Child :: child(), Info</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.39tuple/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.39tuple/</guid>
      <description>1.tuple_size 返回元组元素的数目 2.element 返回元组的第N个元素 3.setelement/3 替换元组中的一个元素，返回新的元组 setelement(1, {1,2,3,4,5,6},2 ). -》{2,2,3,4,5,6} 4.erlang:append_element/2 erlang:append_element( {1,2,3,4},4 ) -&amp;gt; {1,2,3,4,4} 5.erlang:delete_element( 1, {a,b,c,d} ). -&amp;gt; {b,c,d}</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.40timer/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.40timer/</guid>
      <description>1．Timer：tc（Module，Function，Arguments）-&amp;gt;{Time,Value} 参数使用中括号括起来 测量某函数运</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.41unicode/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.41unicode/</guid>
      <description>unicode:characters_to_list(DatB) erlang csv Result_str = &amp;#34;r1c1,r1c2,r1c3\nr2c1,r2c2,r2c3&amp;#34;, Bom = unicode:characters_to_list(unicode:encoding_to_bom(utf8)), unicode:characters_to_binary(Bom++Result_str, unicode, utf8), </description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.45shell/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.45shell/</guid>
      <description>Eshell V5.10.2 (abort with ^G) 1&amp;gt; help(). ** shell 内置命令 ** b() &amp;ndash; 显示所有绑定的变量 e(N) &amp;ndash; 重复某次查询 f() &amp;ndash; 释放所有绑定的变量 f(X) &amp;ndash; 释放某个绑定的变量 h() &amp;ndash; 显示之前的操作 history(N) &amp;ndash; 设置保存</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.4base64/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.4base64/</guid>
      <description>实现base 64的编码解码算法，具体细节参考RFC 20450 base64:decode(&amp;#34;dGhpcyBpcyBhIHRlc3Qh&amp;#34;). -&amp;gt; &amp;lt;&amp;lt;&amp;#34;this is a test!&amp;#34;&amp;gt;&amp;gt; base64:decode_to_string(&amp;#34;dGhpcyBpcyBhIHRlc3Qh&amp;#34;). -&amp;gt; this is a test! base64:encode(&amp;#34;this is a test!&amp;#34;). -&amp;gt; &amp;lt;&amp;lt;&amp;#34;dGhpcyBpcyBhIHRlc3Qh&amp;#34;&amp;gt;&amp;gt; base64:encode_to_string(&amp;#34;this is a test!&amp;#34;). -&amp;gt; dGhpcyBpcyBhIHRlc3Qh base64:mime_decode(&amp;#34;dGhpcyBpcyBhIHRlc3Qh&amp;#34;). -&amp;gt; &amp;lt;&amp;lt;&amp;#34;this is a test!&amp;#34;&amp;gt;&amp;gt; 对Data数据进行base 6</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.5binary/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.5binary/</guid>
      <description>at(Subject, Pos) -&amp;gt; byte() 返回一个二进制数据里指定位置（从 0 开始）的数据（整数的形式），如果 Pos &amp;gt;= byte_size(Subject)，则会发生一个 badarg 的异常错误</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.6c/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.6c/</guid>
      <description>Command Interface Module hepl(). 显示帮助信息 pwd(). 返回当前路径。 cd(Path). 设置路径 bt(Pid)一&amp;gt;voidU 显示Pid进程的栈回溯信息。 c(File，Options)一</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.8calendar/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.8calendar/</guid>
      <description>date_to_gregorian_days(Date) -&amp;gt; Days 获取到现在为止的天数 date_to_gregorian_days(Year, Month, Day) -&amp;gt; Days datetime_to_gregorian_seconds(DateTime) -&amp;gt; Seconds 获取到现在为止的秒数 day_of_the_week(Date) -&amp;gt; daynum() 获取到现在为止的周数 day_of_the_week(Year, Month, Day) -&amp;gt; daynum() gregorian_days_to_date(Days) -&amp;gt; date() calendar:gregorian_days_to_date( 20000 ) -&amp;gt; {54,10,4} 20000天是多少年多少月</description>
    </item>
    
    <item>
      <title>3</title>
      <link>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.9code/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/3.%E5%BA%93%E5%87%BD%E6%95%B0/3.5stdlib/3.5.9code/</guid>
      <description>load_binary purge Erlang的代码服务器 add_patha(Dir) 将Dit目录添加到代码目录列表的前端 add_pathsa(Dirs) 将Dirs列表中的目录添加到代码目录列表的前端 add_pathsz(Dirs) 将Dirs列表中的目录添</description>
    </item>
    
    <item>
      <title>4</title>
      <link>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.10profiling/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.10profiling/</guid>
      <description>http://www.erlang.org/doc/efficiency_guide/profiling.html
11.4 Tools fprof fprof measures the execution time for each function, both own time, that is, how much time a function has used for its own execution, and accumulated time, that is, including called functions. The values are displayed per process. You also get to know how many times each function has been called. fprof is based on trace to file to minimize runtime performance impact. Using fprof is just a matter of calling a few library functions, see the fprof manual page in tools .</description>
    </item>
    
    <item>
      <title>4</title>
      <link>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.10profiling/4.10.1fprof/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.10profiling/4.10.1fprof/</guid>
      <description>fprof类似eprof，但是会把详细信息存储到文件中，方便数据统计分析。 只看某一函数的简单调用方法： 1&amp;gt; fprof:apply(Module, fun, Args). 2&amp;gt; fprof:profile(). 3&amp;gt; fprof:analyse(). 实际上在执行的时候，f</description>
    </item>
    
    <item>
      <title>4</title>
      <link>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.10profiling/4.10.2eprof/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.10profiling/4.10.2eprof/</guid>
      <description> eprof:start().
eprof:profile([pid(x,x,x)]).
eprof:stop_profiling().
eprof:analyze().
eprof:stop().
  eprof:start_profiling([regNames], {gen, call, 4}).
eprof:stop_profiling().
eprof:analyze().
eprof:stop().
 </description>
    </item>
    
    <item>
      <title>4</title>
      <link>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.10profiling/4.10.3cprof/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.10profiling/4.10.3cprof/</guid>
      <description>用于统计一个函数中的每个函数的调用次数。相较于eprof和fprof，cprof对性能影响很小，官方说大约10% 使用举例（引自官网） 1&amp;gt; cprof:start(),R=calendar:day_of_the_week(1896,4,27),cprof:pause(),R. 1 2&amp;gt;</description>
    </item>
    
    <item>
      <title>4</title>
      <link>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.1erlang%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.1erlang%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/</guid>
      <description>在Erlang模块被编译之前，首先会被名为epp的Erlang预处理器进行自动处理。这个预处理器会扩展任何存在于源文件中的宏，并且插入任何必</description>
    </item>
    
    <item>
      <title>4</title>
      <link>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.2erlang%E8%8A%82%E7%82%B9/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.2erlang%E8%8A%82%E7%82%B9/</guid>
      <description>进入已经启动的节点方法: 作业（JCL ）模式 使用该功能需要保证cookie一致,并且node的名字的IP保持一致 $ erl -setcookie abc -name node_1@192.168.1.110 Eshell V5.9 (abort with ^G) $ erl -setcookie abc</description>
    </item>
    
    <item>
      <title>4</title>
      <link>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.3erlang%E5%A4%9A%E8%8A%82%E7%82%B9/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.3erlang%E5%A4%9A%E8%8A%82%E7%82%B9/</guid>
      <description>rpc:call(Node, Module, Function, Args) -&amp;gt; Res | {badrpc, Reason} Types: Node = node() Module = module() Function = atom() Args = [term()] Res = Reason = term() Evaluates apply(Module, Function, Args) on the node Node and returns the corresponding value Res, or {badrpc, Reason} if the call fails. rpc:cast(). erlang:set_cookie(node(), cookie). erl -sname test -name test@test -setcookie &amp;#39;pwd&amp;#39; c:nl( Mod ). %slave 模块 slave:start(&amp;#39;10.0.0.252&amp;#39;, slave1, &amp;#34;-setcookie abc -loader inet</description>
    </item>
    
    <item>
      <title>4</title>
      <link>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.3erlang%E5%A4%9A%E8%8A%82%E7%82%B9/4.3.1%E4%B8%BB%E4%BB%8E%E8%8A%82%E7%82%B9/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.3erlang%E5%A4%9A%E8%8A%82%E7%82%B9/4.3.1%E4%B8%BB%E4%BB%8E%E8%8A%82%E7%82%B9/</guid>
      <description>流程： 确保所有的服务器开通ssh服务。 确保主节点服务器可以不使用密码直接链接到从节点 确保主节点服务器使用xw.config配置启动Erl节点</description>
    </item>
    
    <item>
      <title>4</title>
      <link>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.4epmd/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.4epmd/</guid>
      <description>erlang集群是依靠epmd维护的，epmd是erlang集群节点间端口映射的守护进程，负责维护集群内的节点连接，提供节点名称到IP地址及</description>
    </item>
    
    <item>
      <title>4</title>
      <link>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.5%E6%96%AD%E7%82%B9%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.5%E6%96%AD%E7%82%B9%E5%B7%A5%E5%85%B7/</guid>
      <description>i.erl 编译方式: make:all([debug_info]). | c(test.erl,debug_info). 基本调试方法： im/0:打开调试器 i/1 :把文件添加到调试器中 ni :针对多个Node的用法 n/1 :与i/1相反 nn/1:与ni/1相</description>
    </item>
    
    <item>
      <title>4</title>
      <link>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.6dialyzer/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.6dialyzer/</guid>
      <description>1.使用dialyzer需要定义函数的-spec 2.使用dialyzer a.由于我们编写的代码需要使用到Erlang的函数库，在分析时，可以</description>
    </item>
    
    <item>
      <title>4</title>
      <link>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.7dbg-debug%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.7dbg-debug%E6%A8%A1%E5%9D%97/</guid>
      <description>开启 dbg:tracer() dbg:p(Item, Flags) dbg:p(Item) -&amp;gt; dbg:p(Item, [m]). Item是设定要跟踪的对象,Flags是设置要监听的动作 Item = all %会trace 整个系统所有的进程，同样可以监控整个集群 |new %就</description>
    </item>
    
    <item>
      <title>4</title>
      <link>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.7dbg-debug%E6%A8%A1%E5%9D%97/4.7.1dbg/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.7dbg-debug%E6%A8%A1%E5%9D%97/4.7.1dbg/</guid>
      <description>本地节点监听远程节点的函数被调用事件 1.远程节点,存在下面函数 player_handler:get_state(Uid). 2.本地节点。 erl -name test@127.0.0.1 -setcookie 127001 -remsh &amp;#39;game@127.0.0.1&amp;#39;。</description>
    </item>
    
    <item>
      <title>4</title>
      <link>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.8erlang%E8%B7%9F%E8%B8%AA%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.8erlang%E8%B7%9F%E8%B8%AA%E5%B7%A5%E5%85%B7/</guid>
      <description>1.Trace Tool Builder（erlang跟踪工具） 主要特性： • 用一个函数调用来跟踪多个节点上的文件端口 • 可以往在formatting过程中读取的记录</description>
    </item>
    
    <item>
      <title>4</title>
      <link>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.9etop/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.9etop/</guid>
      <description>http://erlang.org/doc/apps/observer/etop_ug.html 平时用的最多的可能就是etop,两种用法: [1] 在/usr/local/lib/erlang/lib/observer-1.0/priv/bi</description>
    </item>
    
    <item>
      <title>5</title>
      <link>https://yujian1018.github.io/book/erlang/5.%E8%BF%9B%E9%98%B6/5.1tcp%E7%B2%98%E5%8C%85%E5%A4%A7%E5%B0%8F%E7%AB%AF/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/5.%E8%BF%9B%E9%98%B6/5.1tcp%E7%B2%98%E5%8C%85%E5%A4%A7%E5%B0%8F%E7%AB%AF/</guid>
      <description>1.粘包问题 数据连包问题，这个在client/server的通讯中很常见。就是，当client在极短的时间内发送多个包给server，这时s</description>
    </item>
    
    <item>
      <title>5</title>
      <link>https://yujian1018.github.io/book/erlang/5.%E8%BF%9B%E9%98%B6/5.2rebar%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/5.%E8%BF%9B%E9%98%B6/5.2rebar%E5%8F%91%E5%B8%83%E7%B3%BB%E7%BB%9F/</guid>
      <description>以发布ping为例 1.获取源码+deps，并且完成编译 2生成配置文件 cd ~ mkdir rel cd rel ../rebar create-node nodeid=ping 3.修改原始配置文件, reltool.config lib_dirs %配置deps库路径，必须配</description>
    </item>
    
    <item>
      <title>5</title>
      <link>https://yujian1018.github.io/book/erlang/5.%E8%BF%9B%E9%98%B6/5.3erlangvm%E5%BF%83%E8%B7%B3/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/5.%E8%BF%9B%E9%98%B6/5.3erlangvm%E5%BF%83%E8%B7%B3/</guid>
      <description>erlang心跳机制 什么是erlang心跳机制？这是erlang运行时系统定期监控系统是否正常运行的程序。 erlang为什么要心跳机制？我们</description>
    </item>
    
    <item>
      <title>5</title>
      <link>https://yujian1018.github.io/book/erlang/5.%E8%BF%9B%E9%98%B6/5.4erlanggc/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/5.%E8%BF%9B%E9%98%B6/5.4erlanggc/</guid>
      <description>二进制存储 erlang二进制数据在内存中有两种存在形式，当数据大小不到 64 bytes，就直接存在进程堆内，如果超过了64 bytes，就被保存到</description>
    </item>
    
    <item>
      <title>5</title>
      <link>https://yujian1018.github.io/book/erlang/5.%E8%BF%9B%E9%98%B6/5.5erlangtime/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/5.%E8%BF%9B%E9%98%B6/5.5erlangtime/</guid>
      <description>os:timestamp() 获取到的时间为操作系统的时间，不做任何修正； 而erlang:now()，每次获取都会确保生成了唯一的时间，就是说，erlang:now()</description>
    </item>
    
    <item>
      <title>5</title>
      <link>https://yujian1018.github.io/book/erlang/5.%E8%BF%9B%E9%98%B6/5.6erlang%E5%90%AF%E5%8A%A8/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/5.%E8%BF%9B%E9%98%B6/5.6erlang%E5%90%AF%E5%8A%A8/</guid>
      <description>官方文档：http://www.erlang.org/doc/man/erl.html erlang启动参数有3种：emulator flags, flags 和pl</description>
    </item>
    
    <item>
      <title>5</title>
      <link>https://yujian1018.github.io/book/erlang/5.%E8%BF%9B%E9%98%B6/5.6erlang%E5%90%AF%E5%8A%A8/5.6.1sasl%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/5.%E8%BF%9B%E9%98%B6/5.6erlang%E5%90%AF%E5%8A%A8/5.6.1sasl%E9%85%8D%E7%BD%AE/</guid>
      <description>错误日志记录器会产生几种类型的报告： Supervisor报告 在Supervisor启动或者停止被监管的进程时 Progress报告 每次OTP监</description>
    </item>
    
    <item>
      <title>5</title>
      <link>https://yujian1018.github.io/book/erlang/5.%E8%BF%9B%E9%98%B6/5.7erlang%E7%B3%BB%E7%BB%9F%E9%99%90%E5%88%B6/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/5.%E8%BF%9B%E9%98%B6/5.7erlang%E7%B3%BB%E7%BB%9F%E9%99%90%E5%88%B6/</guid>
      <description>ets表 1400 erl -env ERL_MAX_ETS_TABLES 1000000 erl +e 1000000 并发数 erl +P 1000000 erlang:system_info(process_limit). 2^18=262144 最大值为2^27-1=134217727 erlang实际使用的进程数量限制可能比你设置的要大得多，这</description>
    </item>
    
    <item>
      <title>6</title>
      <link>https://yujian1018.github.io/book/erlang/6.%E9%A1%B9%E7%9B%AE/6.1the_seed/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/6.%E9%A1%B9%E7%9B%AE/6.1the_seed/</guid>
      <description>https://git.01cs.cc/yujian/the_seed</description>
    </item>
    
    <item>
      <title>6</title>
      <link>https://yujian1018.github.io/book/erlang/6.%E9%A1%B9%E7%9B%AE/6.2network/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/6.%E9%A1%B9%E7%9B%AE/6.2network/</guid>
      <description>https://git.01cs.cc/yujian/network</description>
    </item>
    
    <item>
      <title>6</title>
      <link>https://yujian1018.github.io/book/erlang/6.%E9%A1%B9%E7%9B%AE/6.3parse_tool/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/6.%E9%A1%B9%E7%9B%AE/6.3parse_tool/</guid>
      <description>https://git.01cs.cc/yujian/parse_tool</description>
    </item>
    
    <item>
      <title>6</title>
      <link>https://yujian1018.github.io/book/erlang/6.%E9%A1%B9%E7%9B%AE/6.4cache/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/6.%E9%A1%B9%E7%9B%AE/6.4cache/</guid>
      <description>https://git.01cs.cc/yujian/cache</description>
    </item>
    
    <item>
      <title>7</title>
      <link>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.1mnesia/7.1.10ets/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.1mnesia/7.1.10ets/</guid>
      <description>ETS基础 ETS查询时间是常量,例外是如果使用ordered_set查询时间与logN成正比(N为存储的数据量) ETS Table由进程创建,进程</description>
    </item>
    
    <item>
      <title>7</title>
      <link>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.1mnesia/7.1.1mnesia%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.1mnesia/7.1.1mnesia%E6%A8%A1%E5%BC%8F/</guid>
      <description>schema -&amp;gt; 分布式信息 mnesia:create_schema(NodeList). 该函数用来初始化一个新的空模式,在 Mnesia 启动之前这是一个强制性的必要步骤。 Mnesia 是一个真正分布式的数据库管理系统,而模式是一个系统表</description>
    </item>
    
    <item>
      <title>7</title>
      <link>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.1mnesia/7.1.2mnesia%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.1mnesia/7.1.2mnesia%E6%93%8D%E4%BD%9C/</guid>
      <description>mnesia:create_table(Name, Opts). [ {type, bag||set||ordered_set|| duplicate bag}, %默认值 set *{disc_only_copies||disc_copies||ram_copies, NodeList}, %默认值是 [node()],可以同时新建三种类型的表 {index,AttributeNameList}, %AttributeNameList 是一个原子类型的属性名列表 {snmp, SnmpStruct} %SnmpStruct 在 SNMP 用户指南中描述，表示</description>
    </item>
    
    <item>
      <title>7</title>
      <link>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.1mnesia/7.1.3mnesia%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.1mnesia/7.1.3mnesia%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</guid>
      <description>查询 mnesia:add_table_index( test, name). mnesia:del_table_index( test, name). mnesia:index_read(Table, Arg, Attr). 建表时，为该表建立索引使用元组{index, [attr1, attr2,....} mnesia:index_match_object( alias, Pattern, #alias.alias_name, read ). fun() -&amp;gt; mnesia:write( New ) end fun() -&amp;gt; mnesia:read( { table, Id } ) end fun() -&amp;gt; mnesia:delete( {product, Id} ) end fun() -&amp;gt; [R] = mnesia:read( table, Id,</description>
    </item>
    
    <item>
      <title>7</title>
      <link>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.1mnesia/7.1.4mnesia%E8%BF%87%E8%BD%BD%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.1mnesia/7.1.4mnesia%E8%BF%87%E8%BD%BD%E5%88%86%E6%9E%90/</guid>
      <description>dump_log_time_threshold %转储间隔次数 dump_log_write_threshold %转储次数 dc_dump_limit %出发dump的默认值，当filesize(.DCL) &amp;gt; filesize(.DCD) / dc_dump_limit，把*.DCL的记录存储</description>
    </item>
    
    <item>
      <title>7</title>
      <link>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.1mnesia/7.1.5mnesia%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.1mnesia/7.1.5mnesia%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7/</guid>
      <description>原文链接：http://hideto.iteye.com/blog/235413 本章描述了构建分布式、容错的Mnesia数据库相关的高级特性</description>
    </item>
    
    <item>
      <title>7</title>
      <link>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.1mnesia/7.1.6%E5%88%86%E5%B8%83%E5%BC%8F/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.1mnesia/7.1.6%E5%88%86%E5%B8%83%E5%BC%8F/</guid>
      <description>解决方案：erl -name a@yujian 1.在两台机器上分别建立各自一个节点，我使用我的电脑和我后面的电脑 我的机器 test机器 这时运行： mnesia:create_schema( [ yujian@yujian, test@DP-201001010138 ]).出现错误 我</description>
    </item>
    
    <item>
      <title>7</title>
      <link>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.1mnesia/7.1.7mnesia%E8%A1%A8%E5%88%86%E7%89%87/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.1mnesia/7.1.7mnesia%E8%A1%A8%E5%88%86%E7%89%87/</guid>
      <description>数据分片：本质把一张表分成多张表， 当使用mnesia:activity/4操作数据时，分片属性被使用，会到多张表中进程操作 mnesia:activity/4 WriteFun = fun( Keys ) -&amp;gt; [ mnesia:write(</description>
    </item>
    
    <item>
      <title>7</title>
      <link>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.1mnesia/7.1.8mnesia%E9%94%81/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.1mnesia/7.1.8mnesia%E9%94%81/</guid>
      <description>读锁。在记录的副本能被读取之前设置读锁。. 写锁。当事务写一条记录时,首先在这条记录的所有副本上设置写锁。 读表锁。如果事务要扫描整张表来搜索一</description>
    </item>
    
    <item>
      <title>7</title>
      <link>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.1mnesia/7.1.9dets/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.1mnesia/7.1.9dets/</guid>
      <description>select(Name, MatchSpec, N) dets:delete_all_objects(Name) </description>
    </item>
    
    <item>
      <title>7</title>
      <link>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.2ejabberd/7.2.1mod_echo.erl/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.2ejabberd/7.2.1mod_echo.erl/</guid>
      <description>Ejabberd扩展案例 源码：https://github.com/processone/ejabberd/blob/master/src/</description>
    </item>
    
    <item>
      <title>7</title>
      <link>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.2ejabberd/7.2.2hooksformoduledevelopers/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.2ejabberd/7.2.2hooksformoduledevelopers/</guid>
      <description>filter_packet (run_hook) ejabberd_hooks:run_fold(filter_packet, {OrigFrom, OrigTo, OrigPacket}, []). </description>
    </item>
    
    <item>
      <title>7</title>
      <link>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.2ejabberd/7.2.3eventslist/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.2ejabberd/7.2.3eventslist/</guid>
      <description>Here is the list of available events in ejabberd. The types of the corresponding hooks parameters is described below. adhoc_local_items(Acc, From, To, Lang) -&amp;gt; Adhoc adhoc_sm_items(Acc, From, To, Lang) -&amp;gt; Adhoc anonymous_purge_hook(User, Server) -&amp;gt; ok c2s_auth_result(bool(), User, Server, IP) -&amp;gt; ok c2s_broadcast_recipients(Acc, Server, StateData, Type, From, Packet) -&amp;gt; [] c2s_filter_packet(Acc, Server, C2SState, Feature, To, Packet) -&amp;gt; bool() c2s_filter_packet_in(Acc, JID, From, To) -&amp;gt; FixedPacket c2s_loop_debug({route, From, To, Packet}) -&amp;gt; ok c2s_loop_debug(Text) -&amp;gt; ok c2s_loop_debug({xmlstreamelement, Packet}) -&amp;gt; ok c2s_post_auth_features(Acc, Server) -&amp;gt; [] c2s_presence_in(Acc, {From, To, Packet}) -&amp;gt; C2SState c2s_stream_features(Acc, Server) -&amp;gt; [] c2s_unauthenticated_iq(Acc, Server, IQ, IP) -&amp;gt; empty | Packet c2s_update_presence(Acc, User, Server) -&amp;gt; Packet caps_update(From, To, get_features(Server, Caps)) -&amp;gt; ok csi_filter_stanza(Acc, Stanza) -&amp;gt; send disco_info(Acc, Host, Module, Node, Lang) -&amp;gt; [] disco_local_features(Acc, From, To, Node, Lang) -&amp;gt; Disco disco_local_identity(Acc, From, To, Node, Lang) -&amp;gt; [] disco_local_items(Acc, From, To, Node, Lang) -&amp;gt; Disco disco_sm_features(Acc, From, To, Node, Lang) -&amp;gt; Disco disco_sm_identity(Acc, From, To, Node, Lang) -&amp;gt; [] disco_sm_items(Acc, From, To, Node, Lang) -&amp;gt; Disco filter_packet(Acc) -&amp;gt; OrigPacket forbidden_session_hook(JID) -&amp;gt; ok http_request_debug({LocalPath, Request}) -&amp;gt; ok local_send_to_resource_hook(From, To, Packet) -&amp;gt; ok muc_filter_message(Stanza, MUCState, RoomJID, FromJID, FromNick) -&amp;gt; Stanza drop muc_filter_presence(Stanza, MUCState, RoomJID, FromJID, FromNick) -&amp;gt; Stanza drop offline_message_hook(From, To, Packet) -&amp;gt; ok presence_probe_hook(From, To, Pid) -&amp;gt; ok privacy_check_packet(Acc, User, Server, PrivacyList, {From, To, Packet}, Dir) -&amp;gt; Auth privacy_get_user_list(Acc, User, Server) -&amp;gt; #userlist{} privacy_iq_get(Acc, From, To, IQ, PrivacyList) -&amp;gt; {result, Packet} | {error, Error} privacy_iq_set(Acc, From, To, IQ) -&amp;gt; {result, Packet} | {error, Error} privacy_updated_list(Acc, PrivacyList, PrivList) -&amp;gt; bool() pubsub_create_node(ServerHost, Host, Node, NodeId, NodeOptions) -&amp;gt; ok pubsub_delete_node(ServerHost, Host, Node, NodeId) -&amp;gt; ok pubsub_publish_item(ServerHost, Node, Publisher, service_jid(Host), ItemId, Payload) -&amp;gt; ok register_user(User, Server) -&amp;gt; ok remove_user(User, Server) -&amp;gt; ok reopen_log_hook() -&amp;gt; ok resend_offline_messages_hook(Acc, User, Server) -&amp;gt; [] resend_subscription_requests_hook(Acc, User, Server) -&amp;gt; [] roster_get(Acc, {User, Server}) -&amp;gt; [] roster_get_jid_info(Acc, User, Server, From) -&amp;gt; []} roster_get_subscription_lists(Acc, User, Server) -&amp;gt; []} roster_get_versioning_feature(Acc, Server) -&amp;gt; [] roster_groups(Acc, ServerHost) -&amp;gt; [] roster_in_subscription(Acc, User, Server, From, SubscriptionInType, Reason) -&amp;gt; bool() roster_out_subscription(User, Server, To, SubscriptionOutType) -&amp;gt; ok roster_process_item(Acc, Server) -&amp;gt; RosterItem s2s_allow_host(Acc, Host, Host) -&amp;gt; Auth s2s_connect_hook(Host, Server) -&amp;gt; ok s2s_loop_debug({xmlstreamelement, Packet}) -&amp;gt; ok s2s_receive_packet(From, To, Packet) -&amp;gt; ok s2s_send_packet(From, To, Packet) -&amp;gt; ok s2s_stream_features(Acc, Server) -&amp;gt; [] set_presence_hook(User, Server, Resource, Presence) -&amp;gt; ok sm_register_connection_hook(SID, JID, Info) -&amp;gt; ok sm_remove_connection_hook(SID, JID, Info) -&amp;gt; ok unset_presence_hook(User, Server, Resource, Status) -&amp;gt; ok user_available_hook(JID) -&amp;gt; ok user_ping_timeout(JID) -&amp;gt; ok user_receive_packet(Packet, C2SState, JID, From, To) -&amp;gt; Packet user_send_packet(Packet, C2SState, From, To) -&amp;gt; Packet vcard_set(User, Server, VCARD) -&amp;gt; ok webadmin_menu_host(Acc, Host, Lang) -&amp;gt; [] webadmin_menu_hostnode(Acc, Host, Node, Lang) -&amp;gt; [] webadmin_user(Acc, User, Server, Lang) -&amp;gt; [] webadmin_user_parse_query(Acc, Action, User, Server, Query) -&amp;gt; [] Hooks parameters data types To = From = JID = ServerJID = #jid (see jlib.</description>
    </item>
    
    <item>
      <title>7</title>
      <link>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.3cowboy/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.3cowboy/</guid>
      <description>Web服务器，basho出品 git地址:https://github.com/ninenines/cowboy Dispatch组合 静态文件 e</description>
    </item>
    
    <item>
      <title>7</title>
      <link>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.4rebar/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.4rebar/</guid>
      <description>https://github.com/basho/rebar/ 配置文件说明：https://github.com/basho/rebar/blob/master/rebar.config.sample</description>
    </item>
    
    <item>
      <title>7</title>
      <link>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.4rebar/7.4.1rebarwiki/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.4rebar/7.4.1rebarwiki/</guid>
      <description>官方wiki https://github.com/rebar/rebar/wiki • Getting Started • Rebar and OTP Conventions • Rebar Commands • Dependency management • Dynamic configuration • Template Support • Built-in templates • Release Handling • Upgrades 1.Creating the project rebar create-app appid=appname 2.Compiling with rebar rebar.config {sub_dirs, [ &amp;ldquo;apps/dummy_proj&amp;rdquo;, &amp;ldquo;rel&amp;rdquo; ]}. {erl_opts, [debug_info, fail_on_warning]}. {require_otp_vsn, &amp;ldquo;R14&amp;rdquo;}. ./rebar compile 3.Running your app erl -pa apps/*/ebin -boot start_sasl -s dummy_proj 4.Upgrades Building version</description>
    </item>
    
    <item>
      <title>7</title>
      <link>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.4rebar/7.4.2rebar.config.script/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.4rebar/7.4.2rebar.config.script/</guid>
      <description>%% -*- mode: erlang;erlang-indent-level: 4;indent-tabs-mode: nil -*-  %% ex: ts=4 sw=4 ft=erlang et  ExtraDeps = [{retest, &amp;#34;.*&amp;#34;, {git, &amp;#34;git://github.com/dizzyd/retest.git&amp;#34;}}], case os:getenv(&amp;#34;REBAR_EXTRA_DEPS&amp;#34;) of false -&amp;gt; CONFIG; _ -&amp;gt; case lists:keysearch(deps, 1, CONFIG) of {value, {deps, Deps}} -&amp;gt; NDeps = Deps ++ ExtraDeps, lists:keyreplace(deps, 1, CONFIG, {deps, NDeps}); false -&amp;gt; CONFIG ++ [{deps, ExtraDeps}] end end. </description>
    </item>
    
    <item>
      <title>7</title>
      <link>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.5riakcs/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.5riakcs/</guid>
      <description>文档存储</description>
    </item>
    
    <item>
      <title>7</title>
      <link>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.6leofs/7.6.1%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/7.%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/7.6leofs/7.6.1%E7%AE%80%E4%BB%8B/</guid>
      <description>文档存储</description>
    </item>
    
    <item>
      <title>8</title>
      <link>https://yujian1018.github.io/book/erlang/8.%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/8.1%E8%B5%84%E6%96%99/8.1.2%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/8.%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/8.1%E8%B5%84%E6%96%99/8.1.2%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86/</guid>
      <description>erlang 是开源的，很多人都研究过源代码。但是，从erlang代码到c代码，这是个不小的跨度，而且代码也比较复杂。所以这里，我利用一些时间，整理下 e</description>
    </item>
    
    <item>
      <title>8</title>
      <link>https://yujian1018.github.io/book/erlang/8.%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/8.1%E8%B5%84%E6%96%99/8.1.3smp/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/8.%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/8.1%E8%B5%84%E6%96%99/8.1.3smp/</guid>
      <description>以下是一些Erlang SMP实现的细节和与性能与伸缩性相关一些简单介绍。 几周之内还有有一个关于多核如何运作以及未来如何发展的更详细的介绍。我</description>
    </item>
    
  </channel>
</rss>