<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>工具 on 清水的小站</title>
    <link>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7.html</link>
    <description>Recent content in 工具 on 清水的小站</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 30 Aug 2019 15:13:01 +0800</lastBuildDate><atom:link href="https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Erlang预处理器</title>
      <link>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.1erlang%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8.html</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.1erlang%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8.html</guid>
      <description>在Erlang模块被编译之前，首先会被名为epp的Erlang预处理器进行自动处理。这个预处理器会扩展任何存在于源文件中的宏，并且插入任何必</description>
    </item>
    
    <item>
      <title>Port</title>
      <link>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.2port.html</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.2port.html</guid>
      <description>port(socket)调优 示例：服务器监听端口，接受客户端请求。典型应用场景web服务器，需要实现高吞吐，低延迟的目标 Res = gen_tcp:listen(Port, [binary, {reuseaddr, true}, {nodelay, true}, {delay_send,true}, {high_watermark,64</description>
    </item>
    
    <item>
      <title>Epmd</title>
      <link>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.4epmd.html</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.4epmd.html</guid>
      <description>erlang集群是依靠epmd维护的，epmd是erlang集群节点间端口映射的守护进程，负责维护集群内的节点连接，提供节点名称到IP地址及</description>
    </item>
    
    <item>
      <title>断点工具</title>
      <link>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.5%E6%96%AD%E7%82%B9%E5%B7%A5%E5%85%B7.html</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.5%E6%96%AD%E7%82%B9%E5%B7%A5%E5%85%B7.html</guid>
      <description>erlang源代码 i.erl 编译方式: make:all([debug_info]). | c(test.erl,debug_info). 基本调试方法： im/0:打开调试器 i/1 :把文件添加到调试器中 ni :针对多个Node的用法 n/1 :与i/1相反 nn</description>
    </item>
    
    <item>
      <title>dialyzer</title>
      <link>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.6dialyzer.html</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.6dialyzer.html</guid>
      <description>1.使用dialyzer需要定义函数的-spec 2.使用dialyzer a.由于我们编写的代码需要使用到Erlang的函数库，在分析时，可以</description>
    </item>
    
    <item>
      <title>Erlang跟踪工具</title>
      <link>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.8erlang%E8%B7%9F%E8%B8%AA%E5%B7%A5%E5%85%B7.html</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.8erlang%E8%B7%9F%E8%B8%AA%E5%B7%A5%E5%85%B7.html</guid>
      <description>1.Trace Tool Builder（erlang跟踪工具） 主要特性： • 用一个函数调用来跟踪多个节点上的文件端口 • 可以往在formatting过程中读取的记录</description>
    </item>
    
    <item>
      <title>etop</title>
      <link>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.9etop.html</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.9etop.html</guid>
      <description>http://erlang.org/doc/apps/observer/etop_ug.html 平时用的最多的可能就是etop,两种用法: [1] 在/usr/local/lib/erlang/lib/observer-1.0/priv/bi</description>
    </item>
    
  </channel>
</rss>
