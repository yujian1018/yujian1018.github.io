<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>4.10profiling on My New Hugo Site</title>
    <link>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.10profiling/</link>
    <description>Recent content in 4.10profiling on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 30 Aug 2019 10:56:29 +0800</lastBuildDate>
    
	<atom:link href="https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.10profiling/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>4</title>
      <link>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.10profiling/4.10.1fprof/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.10profiling/4.10.1fprof/</guid>
      <description>fprof类似eprof，但是会把详细信息存储到文件中，方便数据统计分析。
只看某一函数的简单调用方法： 1&amp;gt; fprof:apply(Module, fun, Args). 2&amp;gt; fprof:profile(). 3&amp;gt; fprof:analyse(). 实际上在执行的时候，fprof:apply/3前后会自动添加trace([start, &amp;hellip;]) 和 trace(stop).
 fprof:trace([start, {file, &amp;ldquo;./fprof.trace&amp;rdquo;}, {procs, PidSpec}]). %% 或者可以trace多个Pid，[PidSpec]
fprof:trace(stop).
fprof:profile({file, &amp;ldquo;./fprof.trace&amp;rdquo;}).
fprof:analyse([{dest, &amp;ldquo;fprof.analysis&amp;rdquo;},{sort,own}]). %% 详细参数见： http://www.erlang.org/doc/man/fprof.html#analyse-2
 %是一种标记，每一个“段落”中，%表示被调用的函数主体，%以上为调用它的函数，%以下为它调用的函数。“段落”中的CNT列表示被调用次数，Acc表示包括%之上的函数在内所花费的时间，own表示不包括%之上的函数所用的时间。
suspend表示进程挂起。 也可以将fprof这类工具卸载想监控的代码前后。</description>
    </item>
    
    <item>
      <title>4</title>
      <link>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.10profiling/4.10.2eprof/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.10profiling/4.10.2eprof/</guid>
      <description> eprof:start().
eprof:profile([pid(x,x,x)]).
eprof:stop_profiling().
eprof:analyze().
eprof:stop().
  eprof:start_profiling([regNames], {gen, call, 4}).
eprof:stop_profiling().
eprof:analyze().
eprof:stop().
 </description>
    </item>
    
    <item>
      <title>4</title>
      <link>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.10profiling/4.10.3cprof/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/erlang/4.%E5%B7%A5%E5%85%B7/4.10profiling/4.10.3cprof/</guid>
      <description>用于统计一个函数中的每个函数的调用次数。相较于eprof和fprof，cprof对性能影响很小，官方说大约10% 使用举例（引自官网）
1&amp;gt; cprof:start(),R=calendar:day_of_the_week(1896,4,27),cprof:pause(),R. 1 2&amp;gt; cprof:analyse(calendar). {calendar,9, [{{calendar,df,2},1}, {{calendar,dm,1},1}, {{calendar,dy,1},1}, {{calendar,last_day_of_the_month1,2},1}, {{calendar,last_day_of_the_month,2},1}, {{calendar,is_leap_year1,1},1}, {{calendar,is_leap_year,1},1}, {{calendar,day_of_the_week,3},1}, {{calendar,date_to_gregorian_days,3},1}]} 3&amp;gt; cprof:stop(). 3271 该示例表明day_of_the_week这个函数需要调用9个函数完成计算。 同样cprof可以嵌入代码中。 </description>
    </item>
    
  </channel>
</rss>