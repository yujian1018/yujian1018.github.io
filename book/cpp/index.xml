<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C-CPP on 清水的小站</title>
    <link>https://yujian1018.github.io/book/cpp/</link>
    <description>Recent content in C-CPP on 清水的小站</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 30 Aug 2019 10:56:29 +0800</lastBuildDate>
    
	<atom:link href="https://yujian1018.github.io/book/cpp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2.1 c&#43;&#43;变量</title>
      <link>https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.1-c&#43;&#43;%E5%8F%98%E9%87%8F/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.1-c&#43;&#43;%E5%8F%98%E9%87%8F/</guid>
      <description>变量 标识（Identifiers） 有效标识由 字母(letter)， 数字(digits)和 下划线 ( _ )组成。 标识的长度没有限制，但是有些编译器</description>
    </item>
    
    <item>
      <title>2.2 数据类型</title>
      <link>https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>数据类型 名称 字节数 描述 范围 Char 1 字符（character）或整数（integer ）， 8位（bits）长 有符号（signed）: -128 到 127无符号</description>
    </item>
    
    <item>
      <title>2.3 转义字符</title>
      <link>https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.3-%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.3-%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/</guid>
      <description>转义字符 符号 描述 ASCII码值（十进制） \n 换行(LF) ，将当前位置移到下一行开头 010 \r 回车(CR) ，将当前位置移到本行开头 013 \t 水平制表(HT)</description>
    </item>
    
    <item>
      <title>2.4 运算符</title>
      <link>https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.4-%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.4-%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>运算符 优先级 运算符 名称或含义 使用形式 结合方向 说明 1 [] 数组下标 数组名[常量表达式] 左到右 () 圆括号 （表达式）/函数名( 形参表) . 成员选择（对象）</description>
    </item>
    
    <item>
      <title>2.5 控制结构</title>
      <link>https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.5-%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.5-%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</guid>
      <description>控制结构 1.if if(true){ }else if(true){ }else{ } 2.switch int switch_on = 1; switch(switch_on){ case 1: printf(&amp;#34;this case is 1\n&amp;#34;); break; default: break; } 3.for for(int i=0; i&amp;lt;=100; i++&amp;gt;){ printf(&amp;#34;i:%d!\n&amp;#34;, i); } int i; for(i=0; i&amp;lt;=0; i-=10000){ printf(&amp;#34;i:%d!\n&amp;#34;, i); } return 0; 4.while int m = 0; while(m &amp;lt;100&amp;gt;){ m++; } #include &amp;lt;iostream.h&amp;gt; int main () { int n; cout &amp;lt;&amp;lt; &amp;#34;Enter the starting number &amp;gt; &amp;#34;; cin</description>
    </item>
    
    <item>
      <title>2.6 Class</title>
      <link>https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.6-class/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.6-class/</guid>
      <description>Class 构造函数 构造函数的参数初始化表 析构函数 this指针详解 静态成员变量和静态成员函数 一般情况下，如果有N个同类的对象，那么每一个对象都分别有自</description>
    </item>
    
    <item>
      <title>2.7 关键字</title>
      <link>https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.7-%E5%85%B3%E9%94%AE%E5%AD%97/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.7-%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
      <description>关键字 const 在类中，如果你不希望某些数据被修改，可以借助 const 关键字加以限定。const 可以用来修饰成员变量、成员函数、对象以及对象的引用。 virtual 虚基类</description>
    </item>
    
    <item>
      <title>2.10 预处理指令</title>
      <link>https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.10-%E9%A2%84%E5%A4%84%E7%90%86%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.10-%E9%A2%84%E5%A4%84%E7%90%86%E6%8C%87%E4%BB%A4/</guid>
      <description>预处理指令 指令 说明 # 空指令，无任何效果 #include 包含一个源代码文件 #define 定义宏 #undef 取消已定义的宏 #if 如果给定条件为真，则编译下面代码 #ifdef 如果宏已经定义，则编译</description>
    </item>
    
    <item>
      <title>2.11 指针</title>
      <link>https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.11-%E6%8C%87%E9%92%88/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.11-%E6%8C%87%E9%92%88/</guid>
      <description>指针 定义 含义 int i; 定义整型变量 i。 int *p; p为指向整型数据的指针变量。 int a[n]; 定义整型数组a，它有n个元素。 int *p[n]; 定义指针数组p，它由n个指向整型数据的</description>
    </item>
    
    <item>
      <title>2.12 结构体、共用体和位运算</title>
      <link>https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.12-%E7%BB%93%E6%9E%84%E4%BD%93%E5%85%B1%E7%94%A8%E4%BD%93%E5%92%8C%E4%BD%8D%E8%BF%90%E7%AE%97/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.12-%E7%BB%93%E6%9E%84%E4%BD%93%E5%85%B1%E7%94%A8%E4%BD%93%E5%92%8C%E4%BD%8D%E8%BF%90%E7%AE%97/</guid>
      <description>结构体（Struct） struct stu{ char *name; //姓名 int num; //学号 char sex; //性别 float score; //成绩 }; struct stu s1 s1.name = &amp;#34;aa&amp;#34; s1.num=123 // 结构体数组 struct stu{ char *name; int num; char sex; float score; }class[5] = { {&amp;#34;Li ping&amp;#34;, 5, &amp;#39;M&amp;#39;, 45}, {&amp;#34;Zhang</description>
    </item>
    
    <item>
      <title>3.1 C标准库</title>
      <link>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.1-c%E6%A0%87%E5%87%86%E5%BA%93/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.1-c%E6%A0%87%E5%87%86%E5%BA%93/</guid>
      <description>头文件 说明 stdio.h 义了用于输入和输出的函数、类型和宏。 stdlib.h 包含了C语言的中最常用的系统函数。 string.h 包含了C语言的最常用的字符串操作函数。 ctype.h 主要提供两类重</description>
    </item>
    
    <item>
      <title>3.2 sstream</title>
      <link>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.2-sstream/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.2-sstream/</guid>
      <description>sstream 库定义了三种类：istringstream、ostringstream和stringstream stringstream通常是用来做数据转</description>
    </item>
    
    <item>
      <title>3.3 assert</title>
      <link>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.3-assert/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.3-assert/</guid>
      <description>#include &amp;lt;assert.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; int main() { int a; char str[50]; printf(&amp;#34;请输入一个整数值： &amp;#34;); scanf(&amp;#34;%d\n&amp;#34;, &amp;amp;a); assert(a &amp;gt;= 10); printf(&amp;#34;输入的整数是：%d\n&amp;#34;, a); pr</description>
    </item>
    
    <item>
      <title>3.4 ctype</title>
      <link>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.4-ctype/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.4-ctype/</guid>
      <description>简介 C 标准库的 ctype.h 头文件提供了一些函数，可用于测试和映射字符。 这些函数接受 int 作为参数，它的值必须是 EOF 或表示为一个无符号字符。 如果参数 c 满足描述</description>
    </item>
    
    <item>
      <title>3.5 float</title>
      <link>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.5-float/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.5-float/</guid>
      <description>简介 C 标准库的 float.h 头文件包含了一组与浮点值相关的依赖于平台的常量。这些常量是由 ANSI C 提出的，这让程序更具有可移植性。在讲解这些常量之前，最好先弄</description>
    </item>
    
    <item>
      <title>3.6 limits</title>
      <link>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.6-limits/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.6-limits/</guid>
      <description>简介 limits.h 头文件决定了各种变量类型的各种属性。定义在该头文件中的宏限制了各种变量类型（比如 char、int 和 long）的值。 这些限制指定了变量不</description>
    </item>
    
    <item>
      <title>3.7 locale</title>
      <link>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.7-locale/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.7-locale/</guid>
      <description>简介 locale.h 头文件定义了特定地域的设置，比如日期格式和货币符号。接下来我们将介绍一些宏，以及一个重要的结构 struct lconv 和两个重要的函数。</description>
    </item>
    
    <item>
      <title>3.10 signal</title>
      <link>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.10-signal/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.10-signal/</guid>
      <description>简介 signal.h 头文件定义了一个变量类型 sig_atomic_t、两个函数调用和一些宏来处理程序执行期间报告的不同信号。 库变量 下面是头文件 signal.h 中定义的变</description>
    </item>
    
    <item>
      <title>3.11 stdarg</title>
      <link>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.11-stdarg/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.11-stdarg/</guid>
      <description>#include&amp;lt;stdarg.h&amp;gt; #include&amp;lt;stdio.h&amp;gt; int sum(int, ...); int main(void) { printf(&amp;#34;10、20 和 30 的和 = %d\n&amp;#34;, sum(3, 10, 20, 30) ); printf(&amp;#34;4、20、25 和 30 的和 = %d\n&amp;#34;, sum(4, 4, 20, 25, 30) ); return 0; }</description>
    </item>
    
    <item>
      <title>3.12 stddef</title>
      <link>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.12-stddef/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.12-stddef/</guid>
      <description>简介 stddef .h 头文件定义了各种变量类型和宏。这些定义中的大部分也出现在其它头文件中。 库变量 下面是头文件 stddef.h 中定义的变量类型： 序号 变量 &amp;amp; 描述 1 ptrdiff_t 这是有</description>
    </item>
    
    <item>
      <title>3.13 stdio</title>
      <link>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.13-stdio/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.13-stdio/</guid>
      <description>atoi，atol，atof atoi()会扫描参数nptr字符串，检测到第一个数字或正负符号时开始做类型转换，之后检测到非数字或结束符 \0 时停</description>
    </item>
    
    <item>
      <title>3.14 stdlib</title>
      <link>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.14-stdlib/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.14-stdlib/</guid>
      <description>简介 stdli b .h 头文件定义了四个变量类型、一些宏和各种通用工具函数。 库变量 下面是头文件 stdlib.h 中定义的变量类型： 序号 变量 &amp;amp; 描述 1 size_t 这是无符号整数类型，它</description>
    </item>
    
    <item>
      <title>3.15 string</title>
      <link>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.15-string/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.15-string/</guid>
      <description>简介 string .h 头文件定义了一个变量类型、一个宏和各种操作字符数组的函数。 库变量 下面是头文件 string.h 中定义的变量类型： 序号 变量 &amp;amp; 描述 1 size_t 这是无符号整数类型</description>
    </item>
    
    <item>
      <title>3.16 time</title>
      <link>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.16-time/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.16-time/</guid>
      <description>简介 time.h 头文件定义了四个变量类型、两个宏和各种操作日期和时间的函数。 库变量 下面是头文件 time.h 中定义的变量类型： 序号 变量 &amp;amp; 描述 1 size_t 是无符号整数类型，</description>
    </item>
    
    <item>
      <title>3.17 printf</title>
      <link>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.17-printf/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.17-printf/</guid>
      <description>格式字符串 在Turbo C中格式字符串的一般形式为： %[标志][输出最小宽度][.精度][长度]类型。 %[flags][width][.precision]type 其中方括号[]中的项为可选项。 1) 类型。</description>
    </item>
    
    <item>
      <title>2.8 函数模板</title>
      <link>https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.8-%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.8-%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF/</guid>
      <description>template&amp;lt;typename T&amp;gt; T max(T a, T b, T c) { if (a &amp;gt; b) a = b; if (a &amp;gt; c) a = c; return a; } int main() { cout &amp;lt;&amp;lt; max(10, 11, 12) &amp;lt;&amp;lt; endl; return 0; } 模板类 #include &amp;lt;iostream&amp;gt; using namespace std; template&amp;lt;typename M, typename N&amp;gt; class point { private: M x; N y; public: point() : x(0), y(0) {} point(M x, N y)</description>
    </item>
    
    <item>
      <title>2.9 数据结构</title>
      <link>https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.9-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.9-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>Array int a[10]={12, 19, 22 , 993, 344}; int a[10] = {0}; char c[10] = {0}; float f[10] = {0}; float level[2], sum; 定义一个两个参数的数组，并且参数只能是float型 C语言规定，数组名就代表了该数组的地址。 C语</description>
    </item>
    
    <item>
      <title>3.8 math</title>
      <link>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.8-math/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.8-math/</guid>
      <description>简介 math.h 头文件定义了各种数学函数和一个宏。在这个库中所有可用的功能都带有一个 double 类型的参数，且都返回 double 类型的结果。</description>
    </item>
    
    <item>
      <title>3.9 setjmp</title>
      <link>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.9-setjmp/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.9-setjmp/</guid>
      <description>简介 setjmp.h 头文件定义了宏 setjmp()、函数 longjmp() 和变量类型 jmp_buf，该变量类型会绕过正常的函数调用和返回规则。 库变量 下面列出了头文件 setjmp.h 中定</description>
    </item>
    
    <item>
      <title>3.18 文件操作</title>
      <link>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.18-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.18-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</guid>
      <description>1. 文件和流的关系 C将每个文件简单地作为顺序字节流。每个文件用文件结束符结束，或者在特定字节数的地方结束，这个特定的字节数可以存储在系统维护的</description>
    </item>
    
    <item>
      <title>3.18 文件读写函数</title>
      <link>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.18-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.18-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E5%87%BD%E6%95%B0/</guid>
      <description>文件读写函数 fopen FILE *fopen(char *filename, char *mode); 函数用来打开一个文件 fclose int fclose(FILE *fp); fgetc() int fgetc (FILE *fp); 函数每次只能读写一个字符 fputc() int fputc ( int ch, FILE *fp ); 函数每次只能读写一个字符 fgets char *fgets ( char *str,</description>
    </item>
    
    <item>
      <title>README</title>
      <link>https://yujian1018.github.io/book/cpp/readme/</link>
      <pubDate>Fri, 30 Aug 2019 15:13:01 +0800</pubDate>
      
      <guid>https://yujian1018.github.io/book/cpp/readme/</guid>
      <description>好记性不如烂笔头 c-cpp笔记</description>
    </item>
    
  </channel>
</rss>