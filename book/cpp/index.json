[
{
	"uri": "https://yujian1018.github.io/book/cpp/1.-%E5%AD%A6%E4%B9%A0/",
	"title": "1. 学习",
	"tags": [],
	"description": "",
	"content": "c++ "
},
{
	"uri": "https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/",
	"title": "2.基础",
	"tags": [],
	"description": "",
	"content": "c++ "
},
{
	"uri": "https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.1-c++%E5%8F%98%E9%87%8F/",
	"title": "2.1 c++变量",
	"tags": [],
	"description": "",
	"content": "变量 标识（Identifiers） 有效标识由 字母(letter)， 数字(digits)和 下划线 ( _ )组成。 标识的长度没有限制，但是有些编译器只取前32个字符（剩下的字符会被忽略）。\n空格(spaces)，标点(punctuation marks)和符号(symbols) 都不可以出现在标识中。 只有字母(letters)，数字(digits) 和下划线()是合法的。并且变量标识必须以字母开头。标识也可能以下划线（）开头，但这种标识通常是保留给为外部连接用的。标识不可以以数字开头。\n必须注意的另一条规则是当你给变量起名字时不可以和C++语言的关键字或你所使用的编译器的特殊关键字同名，因为这样与这些关键字产生混淆。\n标准保留关键字\nasm, auto, bool, break, case, catch, char, class, const, const_cast, continue, default, delete, do, double, dynamic_cast, else, enum, explicit, extern, false, float, for, friend, goto, if, inline, int, long, mutable, namespace, new, operator, private, protected, public, register, reinterpret_cast, return, short, signed, sizeof, static, static_cast, struct, switch, template, this, throw, true, try, typedef, typeid, typename, union, unsigned, using, virtual, void, volatile, wchar_t, while\rand, and_eq, bitand, bitor, compl, not, not_eq, or, or_eq, xor, xor_eq\r栈。变量，局部变量，参数变量 堆。new delete 自由存储区 用户主动申请的malloc 全局/静态存储区 全局变量，静态变量 常量存储区。 定义的常量\n"
},
{
	"uri": "https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.2-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
	"title": "2.2 数据类型",
	"tags": [],
	"description": "",
	"content": "数据类型    名称 字节数 描述 范围     Char 1 字符（character）或整数（integer ）， 8位（bits）长 有符号（signed）: -128 到 127无符号（unsigned）: 0 到 255   short int (short) 2 短整数（integer ）16位（bits）长 有符号（signed）: -32768 到 32767 无符号（unsigned）: 0 到 65535   long int (long) 4 长整数（integer ）32位（bits）长 有符号（signed）:-2147483648 到 2147483647 无符号（unsigned）: 0 到 4294967295   int 4 整数（integer） 有符号(signed): -2147483648 到 2147483647 无符号（unsigned): 0 到 4294967295   float 4 浮点数（floating point number） 3.4e + / - 38 （7 个数字（7digits））   double 8 双精度浮点数（double precision floating point number） 1.7e + / - 308 (15 digits)   long double 8 长双精度浮点数（long double precision floating point number） 1.7e + / - 308 (15 digits)   bool 1 布尔Boolean值。它只能是真(true)或假(false)两值之一。 true 或 false   wchar_t 2 宽字符(Wide character) 。这是为存储两字节(2 bytes) 长的国际字符而设计的类型。 一个宽字符（1 wide characters） * 字节数一列和范围一列可能根据程序编译和运行的系统不同而有所不同。这里列出的数值是多数32位系统的常用数据。对于其他系统，通常的说法是整型(int)具有根据系统结构建议的自然长度（即一个字one word的长度），而4中整型数据char, short, int, long的长度必须是递增的，也就是说按顺序每一类型必须大于等于其前面一个类型的长度。同样的规则也适用于浮点数类型float, double和 long double，也是按递增顺序。    除以上列出的基本数据类型外，还有指针（pointer）和void 参数表示类型，我们将在后面看到。\n   说明 字符型 短整型 整型 长整型 单精度浮点型 双精度浮点型 无类型     数据类型 char short int long float double void    在32位环境中，各种数据类型的长度一般如下：\n   说明 字符型 短整型 整型 长整型 单精度浮点型 双精度浮点型     数据类型 char short int long float double   长度 1 2 4 4 4 8    整数 int 称为整型，short 称为短整型，long 称为长整型，它们的长度（所占字节数）关系为：\rshort \u0026lt;= int \u0026lt;= long\r它们具体占用几个字节C语言并没有规定，C语言只做了宽泛的限制：\rshort 至少占用2个字节。\rint 建议为一个机器字长。32位环境下机器字长为4字节，64位环境下机器字长为8字节。\rshort 的长度不能大于 int，long 的长度不能小于 int。\r在64位环境下，不同的操作系统会有不同的结果，如下所示（长度以字节计）：\r    操作系统 short int long     Win64 2 4 4   类Unix系统（包括 Unix、Linux、OS X、BSD、Solaris 等） 2 4 8    int a_length = sizeof a;\rint b_length = sizeof(int);\runsigned 定义无符号，不设置符号位\r十进制数由 0~9 十个数字组成，没有前缀. 237、-568、65535、1627\r进制数由 0~7 八个数字组成，必须以0开头，即以0作为八进制数的前缀。015（十进制为13）、-0101（十进制为-65）、0177777（十进制为65535）\r十六进制数由数字0~9、字母A~F或a~f组成，前缀为0X或0x。0X2A（十进制为42）、-0XA0（十进制为-160)、0xffff（十进制为65535）\r可以用后缀L或l来表示长整型数.\r十进制长整型数：158L、358000L\r八进制长整型数：012L、077L、0200000L\r十六进制长整型数：0X15L (十进制为21)、0XA5L、0X10000L\r可以用后缀U或u来表示无符号数，例如 358u、0x38Au等\r 浮点数 float 称为单精度浮点数，double 称为双精度浮点数。不像整数，小数的长度始终是固定的，float 占用4个字节，double 占用8个字节\r将整数赋值给 float 变量时会转换为小数\rfloat b=0.302f;\r小数默认为 double 类型，加上后缀f才是float类型。\r 字符 char 称为字符类型，只能用单引号' '来包围，不能用双引号\u0026quot; \u0026quot;包围。\r而字符串只能用双引号\u0026quot; \u0026quot;包围，不能用单引号' '包围。\r 数据类型转换 数据类型转换就是将数据（变量、表达式的结果）从一种类型转换到另一种类型。例如，为了保存小数你可以将int类型的变量转换为double类型。\r数据类型转换的一般格式为：\r(type_name) expression\rtype_name为要转换到的数据类型，expression为表达式。\r类型转换运算符( )的优先级高于/\r(double) sum / count会先将 sum 转换为 double 类型，然后再进行除法运算。如果写作(double) (sum / count)，那么运行结果就是 3.000000\r这种由程序员显式进行的转换称为强制类型转换。\r除了强制类型转换，在不同数据类型的混合运算中编译器也会隐式地进行数据类型转换，称为自动类型转换。\r自动类型转换遵循下面的规则：\r1.若参与运算的数据类型不同，则先转换成同一类型，然后进行运算。\r2.转换按数据长度增加的方向进行，以保证精度不降低。例如int型和long型运算时，先把int量转成long型后再进行运算。\r3.所有的浮点运算都是以双精度进行的，即使仅含float单精度量运算的表达式，也要先转换成double型，再作运算。\r4.Char型和short型参与运算时，必须先转换成int型。\r5.在赋值运算中，赋值号两边的数据类型不同时，需要把右边表达式的类型将转换为左边变量的类型。如果右边表达式的数据类型长度比左边长时，将丢失一部分数据，这样会降低精度。\r "
},
{
	"uri": "https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.3-%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/",
	"title": "2.3 转义字符",
	"tags": [],
	"description": "",
	"content": "转义字符    符号 描述 ASCII码值（十进制）     \\n 换行(LF) ，将当前位置移到下一行开头 010   \\r 回车(CR) ，将当前位置移到本行开头 013   \\t 水平制表(HT) （跳到下一个TAB位置） 009   \\v 垂直制表(VT) 011   \\b backspace 退格(BS) ，将当前位置移到前一列 008   \\f page feed 换页(FF)，将当前位置移到下页开头 012   \\a 响铃(BEL) 警告alert (beep) 007   ' 单引号single quotes (')    \u0026quot; 双引号double quotes (\u0026quot;)    ? 问号question (?)    \\ 反斜杠inverted slash ()     "
},
{
	"uri": "https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.4-%E8%BF%90%E7%AE%97%E7%AC%A6/",
	"title": "2.4 运算符",
	"tags": [],
	"description": "",
	"content": "运算符    优先级 运算符 名称或含义 使用形式 结合方向 说明     1 [] 数组下标 数组名[常量表达式] 左到右     () 圆括号 （表达式）/函数名( 形参表)     . 成员选择（对象） 对象.成员名      -\u0026gt; 成员选择（指针） 对象指针-\u0026gt; 成员名    2 - 负号运算符 -表达式 右到左 单目运算符    (类型) 强制类型转换 (数据类型)表达式      ++ 自增运算符 ++变量名/变量名++  单目运算符    \u0026ndash; 自减运算符 \u0026ndash;变量名/变量名\u0026ndash;  单目运算符    * 取值运算符 *指针变量  单目运算符    \u0026amp; 取地址运算符 \u0026amp;变量名  单目运算符    ! 逻辑非运算符 !表达式  单目运算符    ~ 按位取反运算符 ~表达式  单目运算符    sizeof 长度运算符 sizeof(表达式)     3 / 除 表达式/表达式 左到右 双目运算符    * 乘 表达式*表达式  双目运算符    % 余数（取模） 整型表达式/整型表达式  双目运算符   4 + 加 表达式+表达式 左到右 双目运算符    - 减 表达式-表达式  双目运算符   5 \u0026laquo; 左移 变量\u0026laquo;表达式 左到右 双目运算符    \u0026raquo; 右移 变量\u0026raquo;表达式  双目运算符   6 \u0026gt; 大于 表达式\u0026gt;表达式 左到右 双目运算符    \u0026gt;= 大于等于 表达式\u0026gt;=表达式  双目运算符    \u0026lt; 小于 表达式\u0026lt;表达式  双目运算符    \u0026lt;= 小于等于 表达式\u0026lt;=表达式  双目运算符   7 == 等于 表达式==表达式 左到右 双目运算符    != 不等于 表达式!= 表达式  双目运算符   8 \u0026amp; 按位与 表达式\u0026amp;表达式 左到右 双目运算符   9 ^ 按位异或 表达式^表达式 左到右 双目运算符   10   按位或 表达式 表达式   11 \u0026amp;\u0026amp; 逻辑与 表达式\u0026amp;\u0026amp;表达式 左到右 双目运算符   12    逻辑或 表达式   13 ?: 条件运算符 表达式1? 表达式2: 表达式3 右到左 三目运算符   14 = 赋值运算符 变量=表达式 右到左     /= 除后赋值 变量/=表达式      *= 乘后赋值 变量*=表达式      %= 取模后赋值 变量%=表达式      += 加后赋值 变量+=表达式      -= 减后赋值 变量-=表达式      \u0026laquo;= 左移后赋值 变量\u0026laquo;=表达式      \u0026raquo;= 右移后赋值 变量\u0026raquo;=表达式      \u0026amp;= 按位与后赋值 变量\u0026amp;=表达式      ^= 按位异或后赋值 变量^=表达式      |= 按位或后赋值 变量|=表达式     15 , 逗号运算符 表达式,表达式,… 左到右 从左向右顺序运算    赋值Assignation (=)\r数学运算符Arithmetic operators ( +, -, *, /, % )\r+ 加addition\r- 减subtraction\r* 乘multiplication\r/ 除division\r% 取模module\r组合运算符Compound assignation operators (+=, -=, *=, /=, %=, \u0026gt;\u0026gt;=, \u0026lt;\u0026lt;=, \u0026amp;=, ^=, |=)\r递增和递减Increase and decrease\r关系运算符Relational operators ( ==, !=, \u0026gt;, \u0026lt;, \u0026gt;=, \u0026lt;= )\r== 相等Equal\r!= 不等Different\r\u0026gt; 大于Greater than\r\u0026lt; 小于Less than\r\u0026gt;= 大于等于Greater or equal than\r\u0026lt;= 小于等于Less or equal than\r逻辑运算符Logic operators ( !, \u0026amp;\u0026amp;, || )\r运算符 ! 等同于boolean 运算NOT （取非），它只有一个操作数(operand)，写在它的右边。它做的唯一工作就是取该操作数的反面值，也就是说如果操作数值为真true，那么运算后值变为假false，如果操作数值为假false，则运算结果为真true。它就好像是说取与操作数相反的值。\r逗号运算符\r位运算符Bitwise Operators ( \u0026amp;, |, ^, ~, \u0026lt;\u0026lt;, \u0026gt;\u0026gt; )\r变量类型转换运算符Explicit type casting operators\rsizeof()\r其它运算符\r在本教程后面的章节里我们将看到更多的运算符，比如指向指针的运算或面向对象编程特有的运算，等等\r运算符的优先度 Precedence of operators\r运算符重载 operator+(const complex \u0026amp; A)const\r1) 首先，并不是所有的运算符都可以重载。能够重载的运算符包括：\r+ - * / % ^ \u0026amp; | ~ ! = \u0026lt; \u0026gt; += -= *= /= %= ^= \u0026amp;= |=\r\u0026lt;\u0026lt; \u0026gt;\u0026gt; \u0026lt;\u0026lt;= \u0026gt;\u0026gt;= == != \u0026lt;= \u0026gt;= \u0026amp;\u0026amp; || ++ -- , -\u0026gt;* -\u0026gt; () []\rnew new[] delete delete[]\r上述操作符中，[] 是下标操作符，() 是函数调用操作符。自增自减操作符的前置和后置形式都可以重载。长度运算符”sizeof“、条件运算符”: ?“、成员选择符”.“、对象选择符”.*“和域解析操作符”::“不能被重载。\r2) 重载不能改变运算符的优先级和结合性\rc4 = c1 + c2 * c3;语句等同于c4 = c1 + ( c2 * c3 )\r"
},
{
	"uri": "https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.5-%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/",
	"title": "2.5 控制结构",
	"tags": [],
	"description": "",
	"content": "控制结构 1.if if(true){\r}else if(true){\r}else{\r}\r2.switch int switch_on = 1;\rswitch(switch_on){\rcase 1:\rprintf(\u0026#34;this case is 1\\n\u0026#34;);\rbreak;\rdefault:\rbreak;\r}\r3.for for(int i=0; i\u0026lt;=100; i++\u0026gt;){\rprintf(\u0026#34;i:%d!\\n\u0026#34;, i);\r}\rint i;\rfor(i=0; i\u0026lt;=0; i-=10000){\rprintf(\u0026#34;i:%d!\\n\u0026#34;, i);\r}\rreturn 0;\r4.while int m = 0;\rwhile(m \u0026lt;100\u0026gt;){\rm++;\r}\r#include \u0026lt;iostream.h\u0026gt;\rint main ()\r{\rint n;\rcout \u0026lt;\u0026lt; \u0026#34;Enter the starting number \u0026gt; \u0026#34;;\rcin \u0026gt;\u0026gt; n;\rwhile (n\u0026gt;0) {\rcout \u0026lt;\u0026lt; n \u0026lt;\u0026lt; \u0026#34;, \u0026#34;;\r--n;\r}\rcout \u0026lt;\u0026lt; \u0026#34;FIRE!\u0026#34;;\rreturn 0;\r}\rdo while do-while循环与while循环的不同在于：它会先执行循环体，然后再判断表达式是否为真，如果为真则继续循环；如果为假，则终止循环。因此，do-while 循环至少要执行一次循环体。\r do{\r语句块\r}while(表达式);\rint i=1, sum=0;\rdo{\rsum+=i;\ri++;\r}while(i\u0026lt;=100);\rprintf(\u0026#34;%d\\n\u0026#34;, sum);\rreturn 0;\r5.break break与continue的对比：break 用来结束所有循环，循环语句不再有执行的机会；continue 用来结束本次循环，直接跳到下一次循环，如果循环条件成立，还会继续循环。\r 条件结构Conditional structure: if and else\n重复结构 Iteration structures 或循环loops\nwhile (表达式expression) 语句statement\ndo 语句statement while (条件condition);\n它的功能与while 循环一抹一样，除了在do-while循环中是先执行statement 然后才检查条件condition ，而不想while循环中先检查条件然后才执行statement。这样，即使条件condition从来没有被满足过，statement 仍至少被执行一次。例如，下面的程序重复输出（echoes）用户输入的任何数值，直到用户输入0为止\n# include \u0026lt;iostream.h\u0026gt;\r\rint main ()\r{\runsigned long n;\rdo {\rcout \u0026lt;\u0026lt; \u0026#34;Enter number (0 to end): \u0026#34;;\rcin \u0026gt;\u0026gt; n;\rcout \u0026lt;\u0026lt; \u0026#34;You entered: \u0026#34; \u0026lt;\u0026lt; n \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;;\r} while (n != 0);\rreturn 0;\r}\rfor (initialization; condition; increase) statement;\n分支控制和跳转(Bifurcation of control and jumps)\nbreak 语句\n通过使用break语句，即使在结束条件没有满足的情况下，我们也可以跳出一个循环。它可以被用来结束一个无限循环（infinite loop），或强迫循环在其自然结束之前结束。例如，我们想要在倒计数自然结束之前强迫它停止（也许因为一个引擎故障）\ncontinue 语句\ncontinue语句使得程序跳过当前循环中剩下的部分而直接进入下一次循环，就好像循环中语句块的结尾已经到了使得循环进入下一次重复。\ngoto 语句\n通过使用goto语句可以使程序从一点跳转到另外一点。你必须谨慎只用这条语句，因为它的执行可以忽略任何嵌套限制。\nexit 函数\nexit是一个在cstdlib (stdlib.h)库中定义的函数。\nexit的目的是一个特定的退出代码来结束程序的运行\n选择结构The selective Structure: switch\nswitch 语句的语法比较特殊。它的目标是对一个表达式检查多个可能常量值，有些像我们在本节开头学习的把几个if 和else if 语句连接起来的结构。\n异常 Try{}\rCatch(exception e){\r}\r"
},
{
	"uri": "https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.6-class/",
	"title": "2.6 Class",
	"tags": [],
	"description": "",
	"content": "Class 构造函数 构造函数的参数初始化表\n析构函数 this指针详解 静态成员变量和静态成员函数 一般情况下，如果有N个同类的对象，那么每一个对象都分别有自己的成员变量，不同对象的成员变量各自有值，互不相干。但是有时我们希望有某一个或几个成员变量为所有对象共有，这样可以实现数据共享。\n可以使用全局变量来达到共享数据的目的。例如在一个程序文件中有多个函数，每一个函数都可以改变全局变量的值，全局变量的值为各函数共享。但是用全局变量的安全性得不到保证，由于在各处都可以自由地修改全局变量的值，很有可能偶然失误，全局变量的值就被修改，导致程序的失败。因此在实际开发中很少使用全局变量。\n如果想在同类的多个对象之间实现数据共享，也不要用全局变量，那么可以使用静态成员变量。\n初始化实例时，填写静态变量改变规则\nclass Student{\rprivate:\rchar *name;\rint age;\rfloat score;\rstatic int num; //将num定义为静态成员变量\rpublic:\rStudent(char *, int, float);\rvoid say();\r};\r继承 权限，继承方式 派生类的构造和析构函数 名字遮蔽 多继承\n虚基类 virtual\n基类和派生类的赋值 注意指针对象\n虚析构函数 注意内存回收\n纯虚函数和抽象类 纯虚函数没有函数体，只有函数声明，在虚函数声明结尾加上=0，表明此函数为纯虚函数。\n"
},
{
	"uri": "https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.7-%E5%85%B3%E9%94%AE%E5%AD%97/",
	"title": "2.7 关键字",
	"tags": [],
	"description": "",
	"content": "关键字 const 在类中，如果你不希望某些数据被修改，可以借助 const 关键字加以限定。const 可以用来修饰成员变量、成员函数、对象以及对象的引用。\nvirtual 虚基类\n   关键字 说明 描述     #define 宏定义，末尾没有分号结尾    \u0026amp; 地址符\u0026amp;，用以获得变量的地址    * 指针运算符（或称“间接访问” 运算符）    auto 声明自动变量    short 声明短整型变量或函数    int 声明整型变量或函数    long 声明长整型变量或函数    float 声明浮点型变量或函数    double 声明双精度变量或函数    char 声明字符型变量或函数    struct 声明结构体变量或函数    union 声明共用数据类型    enum 声明枚举类型    typedef 用以给数据类型取别名    const 声明只读变量    unsigned 声明无符号类型变量或函数    signed 声明有符号类型变量或函数    extern 声明变量是在其他文件正声明    register 声明寄存器变量    static 声明静态变量 首先static的最主要功能是隐藏，其次因为static变量存放在静态存储区，所以它具备持久性和默认值0。   volatile 说明变量在程序执行中可被隐含地改变    void 声明函数无返回值或无参数，声明无类型指针    if 条件语句    else 条件语句否定分支（与 if 连用）    switch 用于开关语句    case 开关语句分支    for 一种循环语句 for(int i = 0; i\u0026lt;300; i++){}   do 循环语句的循环体    while 循环语句的循环条件 while(condition){}   goto 无条件跳转语句    continue 结束当前循环，开始下一轮循环    break 跳出当前循环,完全跳出循环，不再往下执行，执行循环体外面的代码    default 开关语句中的“其他”分支    sizeof 计算数据类型长度    return 子程序返回语句（可以带参数，也可不带参数）循环条件     "
},
{
	"uri": "https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.10-%E9%A2%84%E5%A4%84%E7%90%86%E6%8C%87%E4%BB%A4/",
	"title": "2.10 预处理指令",
	"tags": [],
	"description": "",
	"content": "预处理指令    指令 说明     # 空指令，无任何效果   #include 包含一个源代码文件   #define 定义宏   #undef 取消已定义的宏   #if 如果给定条件为真，则编译下面代码   #ifdef 如果宏已经定义，则编译下面代码   #ifndef 如果宏没有定义，则编译下面代码   #elif 如果前面的#if给定条件不为真，当前条件为真，则编译下面代码   #endif 结束一个#if……#else条件编译块    #include\r使用库函数之前，应该用#include引入对应的头文件。这种以#号开头的命令称为预处理命令。\r使用尖括号\u0026lt; \u0026gt;和双引号\u0026quot; \u0026quot;的区别在于头文件的搜索路径不同，包含标准库的头文件一般用尖括号，包含自定义的头文件一般用双引号。\r#define\r宏定义是由源程序中的宏定义命令#define完成的，宏代换是由预处理程序完成的。\r宏定义的一般形式为：\r#define 宏名 字符串\r#表示这是一条预处理命令，所有的预处理命令都以#开头。define是预处理命令。宏名是标识符的一种，命名规则和标识符相同。字符串可以是常数、表达式等。\r这里所说的字符串是一般意义上的字符序列，不要和C语言中的字符串等同，它不需要双引号。\r程序中反复使用的表达式就可以使用宏定义\r带参数宏定义\r带参宏定义的一般形式为：#define 宏名(形参列表) 字符串\r例如：\r#define M(y) y*y+3*y //宏定义\r// Code\rk=M(5); //宏调用\r条件编译\r第一种形式的格式为：\r#ifdef 标识符\r程序段1\r#else\r程序段2\r#endif\r它的功能是，如果标识符已被 #define 命令定义过则对程序段1进行编译；否则对程序段2进行编译。如果没有程序段2（它为空），本格式中的#else可以没有，即可以写为：\r#ifdef 标识符\r程序段\r#endif\r第二种形式的格式为：\r#ifndef 标识符\r程序段1 #else 程序段2 #endif\r它的功能是，如果标识符未被#define命令定义过则对程序段1进行编译，否则对程序段2进行编译。\r第三种形式的格式为：\r#if 常量表达式\r程序段1\r#else 程序段2\r#endif\r它的功能是，如常量表达式的值为真（非0），则对程序段1 进行编译，否则对程序段2进行编译。因此可以使程序在不同条件下，完成不同的功能。\r "
},
{
	"uri": "https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.11-%E6%8C%87%E9%92%88/",
	"title": "2.11 指针",
	"tags": [],
	"description": "",
	"content": "指针    定义 含义     int i; 定义整型变量 i。   int *p; p为指向整型数据的指针变量。   int a[n]; 定义整型数组a，它有n个元素。   int *p[n]; 定义指针数组p，它由n个指向整型数据的指针元素组成。   int (*p)[n]; p为指向含n个元素的一维数组的指针变量。   int f(); f 为一个返回整型的函数。   int *p(); p为一个返回指针的函数，该指针指向整型数据。   int (*p)(); p为指向函数的指针，该函数返回一个整型值。   int **p; p是一个指针变量，它又指向另外一个指针变量，该指针变量指向整型数据。    1) 指针变量可以加（减）一个整数，例如p++、p+i、p-=i。\r一个指针变量加（减）一个整数并不是简单地将原值加（减）一个整数，而是将该指针变量的原值（是一个地址）和它指向的变量所占用的内存单元字节数加（减）。\r2) 指针变量赋值：将一个变量的地址赋给一个指针变量。\r1. p=\u0026amp;a; //将变量a的地址赋给p\r2. p=array; //将数组array的首地址赋给p\r3. p=\u0026amp;array[i]; //将数组array第i个元素的地址赋给p\r4. p=max; //max为已定义的函数，将max的入口地址赋给p\r5. p1=p2; //p1和p2都是指针变量，将p2的值赋给p1\r注意，不能将一个数值直接赋给指针变量，例如p=1000;是没有意义的，一般会引起程序崩溃。\r3) 指针变量可以有空值，即该指针变量不指向任何变量，如p=NULL;。\r4) 两个指针变量可以相减：如果两个指针变量指向同一个数组的元素，则两个指针变量值之差是两个指针之间的元素个数。\r\u0026amp;：取地址运算符；\r*：指针运算符（或称“间接访问” 运算符）。\rInt *array\rarray=array+2, 在数组中，当前指针向下移动两位\r "
},
{
	"uri": "https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.12-%E7%BB%93%E6%9E%84%E4%BD%93%E5%85%B1%E7%94%A8%E4%BD%93%E5%92%8C%E4%BD%8D%E8%BF%90%E7%AE%97/",
	"title": "2.12 结构体、共用体和位运算",
	"tags": [],
	"description": "",
	"content": "结构体（Struct） struct stu{\rchar *name; //姓名\r int num; //学号\r char sex; //性别\r float score; //成绩\r};\rstruct stu s1\rs1.name = \u0026#34;aa\u0026#34;\rs1.num=123\r// 结构体数组\rstruct stu{\rchar *name;\rint num;\rchar sex;\rfloat score;\r}class[5] = {\r{\u0026#34;Li ping\u0026#34;, 5, \u0026#39;M\u0026#39;, 45},\r{\u0026#34;Zhang ping\u0026#34;, 4, \u0026#39;M\u0026#39;, 62.5},\r{\u0026#34;He fang\u0026#34;, 1, \u0026#39;F\u0026#39;, 92.5},\r{\u0026#34;Cheng ling\u0026#34;, 2, \u0026#39;F\u0026#39;, 87},\r{\u0026#34;Wang ming\u0026#34;, 3, \u0026#39;M\u0026#39;, 58}\r};\r// 结构体和指针\r\rstruct stu{\rchar *name;\rint num;\rchar sex;\rfloat score;\r} *pstu, stu1, stu2;\r(*pstu).num pstu-\u0026gt;num\r// 枚举（Enum）\r#include \u0026lt;stdio.h\u0026gt;\rint main(){\renum week{\rsun, mon, tue, wed, thu, fri, sat\r} a, b, c;\ra = sun;\rb = mon;\rc = tue;\rprintf(\u0026#34;%d, %d, %d\\n\u0026#34;,a,b,c);\rreturn 0;\r}\r## 共用体（共同体）\r\r```c++\rtypedef 语言类型定义符\rtypedef int INTEGER;\rINTEGER a, b;\ra = 1;\rb = 2;\r位运算    运算符 说明 描述     \u0026amp; 按位与 只有参与\u0026amp;运算的两个位都为1时，结果才为1，否则为0   | 按位或 参与或运算   ^ 按位异或 参与异或运算^的两个二进制位不同时，结果为1，相同时结果为0。   ~ 取反 取反运算符~为单目运算符，右结合性，作用是对参与运算的数的各二进位按位取反。   \u0026laquo; 左移 左移运算符\u0026laquo;用来把操作数的各二进位全部左移若干位，高位丢弃，低位补0。   \u0026raquo; 右移 右移运算符\u0026raquo;用来把操作数的各二进位全部右移若干位，低位丢弃，高位补0（或1）。    位域或位段\rstruct bs{\runsigned a:4;\runsigned :0; //空域\r unsigned b:4; //从下一单元开始存放\r unsigned c:4\r}\rstruct k{\rint a:1;\rint :2; //该2位不能使用\r int b:3;\rint c:2;\r};\r"
},
{
	"uri": "https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/",
	"title": "3. 库函数",
	"tags": [],
	"description": "",
	"content": "c++ "
},
{
	"uri": "https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.1-c%E6%A0%87%E5%87%86%E5%BA%93/",
	"title": "3.1 C标准库",
	"tags": [],
	"description": "",
	"content": "   头文件 说明     stdio.h 义了用于输入和输出的函数、类型和宏。   stdlib.h 包含了C语言的中最常用的系统函数。   string.h 包含了C语言的最常用的字符串操作函数。   ctype.h 主要提供两类重要的函数：字符测试函数和字符大小转化函数。   assert.h 提供C语言断言功能，唯一的目的是提供宏assert的定义。   limits.h 指明了基本数据类型的取值范围。   stddef.h 定义了一些标准定义，许多定义也会出现在其他的头文件里。   time.h 获取时间与日期，对时间与日期数据操作及格式化的头文件。   float.h 定义了浮点型数值的最大最小限。   math.h 义了与数学计算有关的函数。   error.h 误处理。   locale.h 定义了本地化设置相关的函数。   setjmp.h 定义了一种特别的函数调用和函数返回顺序的方式。   signal.h 提供了一些函数用以处理执行过程中所产生的信号。   stdarg.h 可变参数列表，定义了一些宏，当函数参数未知时去获取函数的参数。    "
},
{
	"uri": "https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.2-sstream/",
	"title": "3.2 sstream",
	"tags": [],
	"description": "",
	"content": "sstream 库定义了三种类：istringstream、ostringstream和stringstream\nstringstream通常是用来做数据转换的。\n相比c库的转换，它更加安全，自动和直接。\n#include \u0026lt;string\u0026gt;\r#include \u0026lt;sstream\u0026gt;\r#include \u0026lt;iostream\u0026gt; \rint main()\r{\rstd::stringstream stream;\rstd::string result;\rint i = 1000;\rstream \u0026lt;\u0026lt; i; //将int输入流\r stream \u0026gt;\u0026gt; result; //从stream中抽取前面插入的int值\r std::cout \u0026lt;\u0026lt; result \u0026lt;\u0026lt; std::endl; // print the string \u0026#34;1000\u0026#34;\r stream.clear(); //在进行多次转换前，必须清除stream\r} "
},
{
	"uri": "https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.3-assert/",
	"title": "3.3 assert",
	"tags": [],
	"description": "",
	"content": "#include \u0026lt;assert.h\u0026gt;\r#include \u0026lt;stdio.h\u0026gt;\r\rint main() {\rint a;\rchar str[50];\rprintf(\u0026#34;请输入一个整数值： \u0026#34;);\rscanf(\u0026#34;%d\\n\u0026#34;, \u0026amp;a);\rassert(a \u0026gt;= 10);\rprintf(\u0026#34;输入的整数是：%d\\n\u0026#34;, a);\rprintf(\u0026#34;请输入字符串： \u0026#34;);\rscanf(\u0026#34;%s\\n\u0026#34;, \u0026amp;str);\rassert(str != NULL);\rprintf(\u0026#34;输入的字符串是： %s\\n\u0026#34;, str);\rreturn 0;\r}\ra.out: assert.c:15: main: Assertion `a \u0026gt;= 10\u0026#39; failed.\r已放弃 (核心已转储)\r"
},
{
	"uri": "https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.4-ctype/",
	"title": "3.4 ctype",
	"tags": [],
	"description": "",
	"content": "简介 C 标准库的 ctype.h 头文件提供了一些函数，可用于测试和映射字符。\r这些函数接受 int 作为参数，它的值必须是 EOF 或表示为一个无符号字符。\r如果参数 c 满足描述的条件，则这些函数返回非零（true）。如果参数 c 不满足描述的条件，则这些函数返回零。\r "
},
{
	"uri": "https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.5-float/",
	"title": "3.5 float",
	"tags": [],
	"description": "",
	"content": "简介 C 标准库的 float.h 头文件包含了一组与浮点值相关的依赖于平台的常量。这些常量是由 ANSI C 提出的，这让程序更具有可移植性。在讲解这些常量之前，最好先弄清楚浮点数是由下面四个元素组成的：\r组件 组件描述\rS 符号 ( +/- )\rb 指数表示的基数，2 表示二进制，10 表示十进制，16 表示十六进制，等等...\re 指数，一个介于最小值 emin 和最大值 emax 之间的整数。\rp 精度，基数 b 的有效位数\r基于以上 4 个组成部分，一个浮点数的值如下：\rfloating-point = ( S ) p x be\r或\rfloating-point = (+/-) precision x baseexponent\r "
},
{
	"uri": "https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.6-limits/",
	"title": "3.6 limits",
	"tags": [],
	"description": "",
	"content": "简介 limits.h 头文件决定了各种变量类型的各种属性。定义在该头文件中的宏限制了各种变量类型（比如 char、int 和 long）的值。\r这些限制指定了变量不能存储任何超出这些限制的值，例如一个无符号可以存储的最大值是 255。\r库宏\r下面的值是特定实现的，且是通过 #define 指令来定义的，这些值都不得低于下边所给出的值。\r    宏 值 描述     CHAR_BIT 8 定义一个字节的比特数。   SCHAR_MIN -128 定义一个有符号字符的最小值。   SCHAR_MAX 127 定义一个有符号字符的最大值。   UCHAR_MAX 255 定义一个无符号字符的最大值。   CHAR_MIN 0 定义类型 char 的最小值，如果 char 表示负值，则它的值等于 SCHAR_MIN，否则等于0。   CHAR_MAX 127 定义类型 char 的最大值，如果 char 表示负值，则它的值等于 SCHAR_MAX，否则等于UCHAR_MAX。   MB_LEN_MAX 1 定义多字节字符中的最大字节数。   SHRT_MIN -32768 定义一个短整型的最小值。   SHRT_MAX +32767 定义一个短整型的最大值。   USHRT_MAX 65535 定义一个无符号短整型的最大值。   INT_MIN -32768 定义一个整型的最小值。   INT_MAX +32767 定义一个整型的最大值。   UINT_MAX 65535 定义一个无符号整型的最大值。   LONG_MIN -2147483648 定义一个长整型的最小值。   LONG_MAX +2147483647 定义一个长整型的最大值。   ULONG_MAX 4294967295 定义一个无符号长整型的最大值。    "
},
{
	"uri": "https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.7-locale/",
	"title": "3.7 locale",
	"tags": [],
	"description": "",
	"content": "简介 locale.h 头文件定义了特定地域的设置，比如日期格式和货币符号。接下来我们将介绍一些宏，以及一个重要的结构 struct lconv 和两个重要的函数。\r "
},
{
	"uri": "https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.10-signal/",
	"title": "3.10 signal",
	"tags": [],
	"description": "",
	"content": "简介 signal.h 头文件定义了一个变量类型 sig_atomic_t、两个函数调用和一些宏来处理程序执行期间报告的不同信号。\r 库变量 下面是头文件 signal.h 中定义的变量类型：\r序号 变量 \u0026amp; 描述\r1 sig_atomic_t 这是 int 类型，在信号处理程序中作为变量使用。它是一个对象的整数类型，该对象可以作为一个原子实体访问，即使存在异步信号时，该对象可以作为一个原子实体访问。\r 库宏 下面是头文件 signal.h 中定义的宏，这些宏将在下列两个函数中使用。SIG_ 宏与 signal 函数一起使用来定义信号的功能。\r序号 宏 \u0026amp; 描述\r1 SIG_DFL\r默认的信号处理程序。\r2 SIG_ERR\r表示一个信号错误。\r3 SIG_IGN\r忽视信号。\rSIG 宏用于表示以下各种条件的信号码：\r序号 宏 \u0026amp; 描述\r1 SIGABRT\r程序异常终止。\r2 SIGFPE\r算术运算出错，如除数为 0 或溢出。\r3 SIGILL\r非法函数映象，如非法指令。\r4 SIGINT\r中断信号，如 ctrl-C。\r5 SIGSEGV\r非法访问存储器，如访问不存在的内存单元。\r6 SIGTERM\r发送给本程序的终止请求信号。\r 库函数 下面是头文件 signal.h 中定义的函数：\r序号 函数 \u0026amp; 描述\r1 void (*signal(int sig, void (*func)(int)))(int)\r该函数设置一个函数来处理信号，即信号处理程序。\r2 int raise(int sig)\r该函数会促使生成信号 sig。sig 参数与 SIG 宏兼容。\r "
},
{
	"uri": "https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.11-stdarg/",
	"title": "3.11 stdarg",
	"tags": [],
	"description": "",
	"content": "#include\u0026lt;stdarg.h\u0026gt;\r#include\u0026lt;stdio.h\u0026gt;\r\rint sum(int, ...);\rint main(void)\r{\rprintf(\u0026#34;10、20 和 30 的和 = %d\\n\u0026#34;, sum(3, 10, 20, 30) );\rprintf(\u0026#34;4、20、25 和 30 的和 = %d\\n\u0026#34;, sum(4, 4, 20, 25, 30) );\rreturn 0;\r}\rint sum(int num_args, ...)\r{\rint val = 0;\rva_list ap;\rint i;\rva_start(ap, num_args);\rfor(i = 0; i \u0026lt; num_args; i++)\r{\rval += va_arg(ap, int);\r}\rva_end(ap);\rreturn val;\r}\r"
},
{
	"uri": "https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.12-stddef/",
	"title": "3.12 stddef",
	"tags": [],
	"description": "",
	"content": "简介 stddef .h 头文件定义了各种变量类型和宏。这些定义中的大部分也出现在其它头文件中。\r 库变量 下面是头文件 stddef.h 中定义的变量类型：\r序号 变量 \u0026amp; 描述\r1 ptrdiff_t\r这是有符号整数类型，它是两个指针相减的结果。\r2 size_t 这是无符号整数类型，它是 sizeof 关键字的结果。\r3 wchar_t 这是一个宽字符常量大小的整数类型。\r 库宏 下面是头文件 stddef.h 中定义的宏：\r序号 宏 \u0026amp; 描述\r1 NULL\r这个宏是一个空指针常量的值。\r2 offsetof(type, member-designator)\r这会生成一个类型为 size_t 的整型常量，它是一个结构成员相对于结构开头的字节偏移量。成员是由 member-designator 给定的，结构的名称是在 type 中给定的。\r "
},
{
	"uri": "https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.13-stdio/",
	"title": "3.13 stdio",
	"tags": [],
	"description": "",
	"content": "atoi，atol，atof atoi()会扫描参数nptr字符串，检测到第一个数字或正负符号时开始做类型转换，之后检测到非数字或结束符 \\0 时停止转换，返回整型数。\r itoa 功能:把一整数转换为字符串\r用法:char *itoa(int value, char *string, int radix);\r详细解释:itoa是英文integer to array(将int整型数转化为一个字符串,并将值保存在数组string中)的缩写.\r参数：\rvalue: 待转化的整数。\rradix: 是基数的意思,即先将value转化为radix进制的数，范围介于2-36，比如10表示10进制，16表示16进制。\r* string: 保存转换后得到的字符串。\r返回值：\rchar * : 指向生成的字符串， 同*string。\r备注:该函数的头文件是\u0026quot;stdlib.h\u0026quot;\r 四舍五入 if( x \u0026gt; 0.0 )\rreturn (int)( x + 0.5 );\relse\rreturn (int)( x - 0.5 );\r头文件：#include \u0026lt;stdio.h\u0026gt;\rscanf() 函数用来格式化输入数据，即按用户指定的格式从键盘上把数据读入到指定的变量中。其原型为：\rint scanf ( char * format [ ,argument, ... ]);\r【参数】format为格式化控制字符串，可以由三类字符构成。\r1) 格式化说明符\r------------------------------------------------------------\r格式字符 说明\r------------------------------------------------------------\r%a 读入一个浮点值(仅C99有效)\r%A 同上\r%c 读入一个字符\r%d 读入十进制整数\r%i 读入十进制，八进制，十六进制整数\r%o 读入八进制整数\r%x 读入十六进制整数\r%X 同上\r%c 读入一个字符\r%s 读入一个字符串\r%f 读入一个浮点数\r%F 同上\r%e 同上\r%E 同上\r%g 同上\r%G 同上\r%p 读入一个指针\r%u 读入一个无符号十进制整数\r%n 至此已读入值的等价字符数\r%[] 扫描字符集合\r%% 读%符号\r另外，还有附加格式说明字符，用于追加在上面的格式说明符后面\r-----------------------------------------------------------------\r修饰符 说明\r-----------------------------------------------------------------\rL/l 长度修饰符，输入\u0026quot;长\u0026quot;数据\rh 长度修饰符，输入\u0026quot;短\u0026quot;数据\rW 整型常数，指定输入数据所占宽度\r* 星号，空读一个数据\rhh 同 h，但仅对C99有效\rll 同 l，但仅对C99有效\r2) 空白字符\r空白字符会使scanf()函数在读操作中略去输入中的一个或多个空白字符，空白符可以是space,tab,newline等等，直到第一个非空白符出现为止。\r3) 非空白字符\r一个非空白字符会使scanf()函数在读入时剔除掉与这个非空白字符相同的字符。\rargument 为需要读入的所有变量的地址。\r注意，是变量地址，而不是变量标识符：\r如果是一般的变量，通常要在变量名前加上\u0026quot;\u0026amp;\u0026quot;取得地址，但输出时是用变量名。\r如果是数组，用数组名就代表了该数组的首地址，输出时也是用数组名\r如果是指针，直接用指针名本身，不要加上“*”，输出时也用该指针即可。\r【返回值】成功则返回被赋值的参数的个数。如果 format 和 argument 匹配错误，或者遇到结束符，那么返回值可能小于参数的个数。\r如果读取发生错误，将会返回 EOF，并设置错误标识，后续可以通过 ferror() 检测。\r如果遇到结束符，将会设置文件结束标识，后续可以通过 feof() 检测。\r如果在读取宽字符的时候发生编码错误，那么将会把 errno 设置为 EILSEQ。\r格式字符串\r格式字符串的一般形式为：\r%[*][输入数据宽度][长度]类型\r其中有方括号[]的项为任选项。各项的意义如下。\r1) 类型\r表示输入数据的类型，其格式符和意义如下表所示\r格式 字符意义\rd 输入十进制整数\ro 输入八进制整数\rx 输入十六进制整数\ru 输入无符号十进制整数\rf或e 输入实型数(用小数形式或指数形式)\rc 输入单个字符\rs 输入字符串\r2) “*”符\r用以表示该输入项，读入后不赋予相应的变量，即跳过该输入值。如：\rscanf(\u0026quot;%d %*d %d\u0026quot;,\u0026amp;a,\u0026amp;b);\r当输入为：1 2 3时，把1赋予a，2被跳过，3赋予b。\r3) 宽度\r用十进制整数指定输入的宽度（即字符数）。例如：\rscanf(\u0026quot;%5d\u0026quot;,\u0026amp;a);\r输入12345678只把12345赋予变量a，其余部分被截去。又如：\rscanf(\u0026quot;%4d%4d\u0026quot;,\u0026amp;a,\u0026amp;b);\r输入12345678将把1234赋予a，而把5678赋予b。\r4) 长度\r长度格式符为l和h，l表示输入长整型数据（如%ld）和双精度浮点数（如%lf）。h表示输入短整型数据。\r使用scanf函数还必须注意以下几点：\rscanf函数中没有精度控制，如：scanf(\u0026quot;%5.2f\u0026quot;,\u0026amp;a);是非法的。不能企图用此语句输入小数为2位的实数。\rscanf中要求给出变量地址，如给出变量名则会出错。如 scanf(\u0026quot;%d\u0026quot;,a);是非法的，应改为scnaf(\u0026quot;%d\u0026quot;,\u0026amp;a);才是合法的。\r在输入多个数值数据时，若格式控制串中没有非格式字符作输入数据之间的间隔则可用空格，TAB或回车作间隔。C编译在碰到空格，TAB，回车或非法数据(如对“%d”输入“12A”时，A即为非法数据)时即认为该数据结束。\r在输入字符数据时，若格式控制串中无非格式字符，则认为所有输入的字符均为有效字符。\r例如：\rscanf(\u0026quot;%c%c%c\u0026quot;,\u0026amp;a,\u0026amp;b,\u0026amp;c);\r输入 d、e、f 则把'd'赋予a，' ' 赋予b，'e'赋予c。只有当输入为 def 时，才能把'd'赋于a，'e'赋予b，'f'赋予c。\r如果在格式控制中加入空格作为间隔，如：\rscanf (\u0026quot;%c %c %c\u0026quot;,\u0026amp;a,\u0026amp;b,\u0026amp;c);\r则输入时各数据之间可加空格。\r【例4-8】\r# include \u0026lt;stdio.h\u0026gt;\rint main(void)\r{\rchar a,b;\rprintf(\u0026quot;input character a,b\\n\u0026quot;);\rscanf(\u0026quot;%c%c\u0026quot;,\u0026amp;a,\u0026amp;b);\rprintf(\u0026quot;%c%c\\n\u0026quot;,a,b);\rreturn 0;\r}\r由于scanf函数\u0026quot;%c%c\u0026quot;中没有空格，输入M N，结果输出只有M。而输入改为MN时则可输出MN两字符。\r【例4-9】\r# include \u0026lt;stdio.h\u0026gt;\rint main(void){\rchar a,b;\rprintf(\u0026quot;input character a,b\\n\u0026quot;);\rscanf(\u0026quot;%c %c\u0026quot;,\u0026amp;a,\u0026amp;b);\rprintf(\u0026quot;\\n%c%c\\n\u0026quot;,a,b);\rreturn 0;\r}\r本例表示scanf格式控制串\u0026quot;%c %c\u0026quot;之间有空格时，输入的数据之间可以有空格间隔。\r5) 如果格式控制串中有非格式字符则输入时也要输入该非格式字符。\r例如：\rscanf(\u0026quot;%d,%d,%d\u0026quot;,\u0026amp;a,\u0026amp;b,\u0026amp;c);\r其中用非格式符“ , ”作间隔符，故输入时应为：5,6,7。又如：\rscanf(\u0026quot;a=%d,b=%d,c=%d\u0026quot;,\u0026amp;a,\u0026amp;b,\u0026amp;c);\r则输入应为：a=5,b=6,c=7。\r 简介 stdio .h 头文件定义了三个变量类型、一些宏和各种函数来执行输入和输出。\r 库变量 下面是头文件 stdio.h 中定义的变量类型：\r序号 变量 \u0026amp; 描述\r1 size_t 这是无符号整数类型，它是 sizeof 关键字的结果。\r2 FILE 这是一个适合存储文件流信息的对象类型。\r3 fpos_t 这是一个适合存储文件中任何位置的对象类型。\r 库宏 下面是头文件 stdio.h 中定义的宏：\r序号 宏 \u0026amp; 描述\r1 NULL\r这个宏是一个空指针常量的值。\r2 _IOFBF、_IOLBF 和 _IONBF 这些宏扩展了带有特定值的整型常量表达式，并适用于 setvbuf 函数的第三个参数。\r3 BUFSIZ\r这个宏是一个整数，该整数代表了 setbuf 函数使用的缓冲区大小。\r4 EOFM 这个宏是一个表示已经到达文件结束的负整数。\r5 FOPEN_MAX 这个宏是一个整数，该整数代表了系统可以同时打开的文件数量。\r6 FILENAME_MAX 这个宏是一个整数，该整数代表了字符数组可以存储的文件名的最大长度。如果实现没有任何限制，则该值应为推荐的最大值。\r7 L_tmpnam 这个宏是一个整数，该整数代表了字符数组可以存储的由 tmpnam 函数创建的临时文件名的最大长度。\r8 SEEK_CUR、SEEK_END 和 SEEK_SET 这些宏是在These macros are used in the fseek 函数中使用，用于在一个文件中定位不同的位置。\r9 TMP_MAX 这个宏是 tmpnam 函数可生成的独特文件名的最大数量。\r10 stderr、stdin 和 stdout 这些宏是指向 FILE 类型的指针，分别对应于标准错误、标准输入和标准输出流。\r 库函数 下面是头文件 stdio.h 中定义的函数：\r为了更好地理解函数，请按照下面的序列学习这些函数，因为第一个函数中创建的文件会在后续的函数中使用到。\r序号 函数 \u0026amp; 描述\r1 int fclose(FILE *stream)\r关闭流 stream。刷新所有的缓冲区。\r2 void clearerr(FILE *stream)\r清除给定流 stream 的文件结束和错误标识符。\r3 int feof(FILE *stream)\r测试给定流 stream 的文件结束标识符。\r4 int ferror(FILE *stream)\r测试给定流 stream 的错误标识符。\r5 int fflush(FILE *stream)\r刷新流 stream 的输出缓冲区。\r6 int fgetpos(FILE *stream, fpos_t *pos)\r获取流 stream 的当前文件位置，并把它写入到 pos。\r7 FILE *fopen(const char *filename, const char *mode)\r使用给定的模式 mode 打开 filename 所指向的文件。\r8 size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)\r从给定流 stream 读取数据到 ptr 所指向的数组中。\r9 FILE *freopen(const char *filename, const char *mode, FILE *stream)\r把一个新的文件名 filename 与给定的打开的流 stream 关联，同时关闭流中的旧文件。\r10 int fseek(FILE *stream, long int offset, int whence)\r设置流 stream 的文件位置为给定的偏移 offset，参数 offset 意味着从给定的 whence 位置查找的字节数。\r11 int fsetpos(FILE *stream, const fpos_t *pos)\r设置给定流 stream 的文件位置为给定的位置。参数 pos 是由函数 fgetpos 给定的位置。\r12 long int ftell(FILE *stream)\r返回给定流 stream 的当前文件位置。\r13 size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)\r把 ptr 所指向的数组中的数据写入到给定流 stream 中。\r14 int remove(const char *filename)\r删除给定的文件名 filename，以便它不再被访问。\r15 int rename(const char *old_filename, const char *new_filename)\r把 old_filename 所指向的文件名改为 new_filename。\r16 void rewind(FILE *stream)\r设置文件位置为给定流 stream 的文件的开头。\r17 void setbuf(FILE *stream, char *buffer)\r定义流 stream 应如何缓冲。\r18 int setvbuf(FILE *stream, char *buffer, int mode, size_t size)\r另一个定义流 stream 应如何缓冲的函数。\r19 FILE *tmpfile(void)\r以二进制更新模式(wb+)创建临时文件。\r20 char *tmpnam(char *str)\r生成并返回一个有效的临时文件名，该文件名之前是不存在的。\r21 int fprintf(FILE *stream, const char *format, ...)\r发送格式化输出到流 stream 中。\r22 int printf(const char *format, ...)\r发送格式化输出到标准输出 stdout。\r23 int sprintf(char *str, const char *format, ...)\r发送格式化输出到字符串。\r24 int vfprintf(FILE *stream, const char *format, va_list arg)\r使用参数列表发送格式化输出到流 stream 中。\r25 int vprintf(const char *format, va_list arg)\r使用参数列表发送格式化输出到标准输出 stdout。\r26 int vsprintf(char *str, const char *format, va_list arg)\r使用参数列表发送格式化输出到字符串。\r27 int fscanf(FILE *stream, const char *format, ...)\r从流 stream 读取格式化输入。\r28 int scanf(const char *format, ...)\r从标准输入 stdin 读取格式化输入。\r29 int sscanf(const char *str, const char *format, ...)\r从字符串读取格式化输入。\r30 int fgetc(FILE *stream)\r从指定的流 stream 获取下一个字符（一个无符号字符），并把位置标识符往前移动。\r31 char *fgets(char *str, int n, FILE *stream)\r从指定的流 stream 读取一行，并把它存储在 str 所指向的字符串内。当读取 (n-1) 个字符时，或者读取到换行符时，或者到达文件末尾时，它会停止，具体视情况而定。\r32 int fputc(int char, FILE *stream)\r把参数 char 指定的字符（一个无符号字符）写入到指定的流 stream 中，并把位置标识符往前移动。\r33 int fputs(const char *str, FILE *stream)\r把字符串写入到指定的流 stream 中，但不包括空字符。\r34 int getc(FILE *stream)\r从指定的流 stream 获取下一个字符（一个无符号字符），并把位置标识符往前移动。\r35 int getchar(void)\r从标准输入 stdin 获取一个字符（一个无符号字符）。\r36 char *gets(char *str)\r从标准输入 stdin 读取一行，并把它存储在 str 所指向的字符串中。当读取到换行符时，或者到达文件末尾时，它会停止，具体视情况而定。\r37 int putc(int char, FILE *stream)\r把参数 char 指定的字符（一个无符号字符）写入到指定的流 stream 中，并把位置标识符往前移动。\r38 int putchar(int char)\r把参数 char 指定的字符（一个无符号字符）写入到标准输出 stdout 中。\r39 int puts(const char *str)\r把一个字符串写入到标准输出 stdout，直到空字符，但不包括空字符。换行符会被追加到输出中。\r40 int ungetc(int char, FILE *stream)\r把字符 char（一个无符号字符）推入到指定的流 stream 中，以便它是下一个被读取到的字符。\r41 void perror(const char *str)\r把一个描述性错误消息输出到标准错误 stderr。首先输出字符串 str，后跟一个冒号，然后是一个空格。\r "
},
{
	"uri": "https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.14-stdlib/",
	"title": "3.14 stdlib",
	"tags": [],
	"description": "",
	"content": "简介 stdli b .h 头文件定义了四个变量类型、一些宏和各种通用工具函数。\n库变量 下面是头文件 stdlib.h 中定义的变量类型：\r序号 变量 \u0026amp; 描述\r1 size_t 这是无符号整数类型，它是 sizeof 关键字的结果。\r2 wchar_t 这是一个宽字符常量大小的整数类型。\r3 div_t 这是 div 函数返回的结构。\r4 ldiv_t 这是 ldiv 函数返回的结构。\r 库宏 下面是头文件 stdlib.h 中定义的宏：\r序号 宏 \u0026amp; 描述\r1 NULL\r这个宏是一个空指针常量的值。\r2 EXIT_FAILURE\r这是 exit 函数失败时要返回的值。\r3 EXIT_SUCCESS\r这是 exit 函数成功时要返回的值。\r4 RAND_MAX 这个宏是 rand 函数返回的最大值。\r5 MB_CUR_MAX 这个宏表示在多字节字符集中的最大字符数，不能大于 MB_LEN_MAX。\r 库函数 下面是头文件 stdlib.h 中定义的函数：\r序号 函数 \u0026amp; 描述\r1 double atof(const char *str)\r把参数 str 所指向的字符串转换为一个浮点数（类型为 double 型）。\r2 int atoi(const char *str)\r把参数 str 所指向的字符串转换为一个整数（类型为 int 型）。\r3 long int atol(const char *str)\r把参数 str 所指向的字符串转换为一个长整数（类型为 long int 型）。\r4 double strtod(const char *str, char **endptr)\r把参数 str 所指向的字符串转换为一个浮点数（类型为 double 型）。\r5 long int strtol(const char *str, char **endptr, int base)\r把参数 str 所指向的字符串转换为一个长整数（类型为 long int 型）。\r6 unsigned long int strtoul(const char *str, char **endptr, int base)\r把参数 str 所指向的字符串转换为一个无符号长整数（类型为 unsigned long int 型）。\r7 void *calloc(size_t nitems, size_t size)\r分配所需的内存空间，并返回一个指向它的指针。\r8 void free(void *ptr)\r释放之前调用 calloc、malloc 或 realloc 所分配的内存空间。\r9 void *malloc(size_t size)\r分配所需的内存空间，并返回一个指向它的指针。\r10 void *realloc(void *ptr, size_t size)\r尝试重新调整之前调用 malloc 或 calloc 所分配的 ptr 所指向的内存块的大小。\r11 void abort(void)\r使一个异常程序终止。\r12 int atexit(void (*func)(void))\r当程序正常终止时，调用指定的函数 func。\r13 void exit(int status)\r使程序正常终止。\r14 char *getenv(const char *name)\r搜索 name 所指向的环境字符串，并返回相关的值给字符串。\r15 int system(const char *string)\r由 string 指定的命令传给要被命令处理器执行的主机环境。\r16 void *bsearch(const void *key, const void *base, size_t nitems, size_t size, int (*compar)(const void *, const void *))\r执行二分查找。\r17 void qsort(void *base, size_t nitems, size_t size, int (*compar)(const void *, const void*))\r数组排序。\r18 int abs(int x)\r返回 x 的绝对值。\r19 div_t div(int numer, int denom)\r分子除以分母。\r20 long int labs(long int x)\r返回 x 的绝对值。\r21 ldiv_t ldiv(long int numer, long int denom)\r分子除以分母。\r22 int rand(void)\r返回一个范围在 0 到 RAND_MAX 之间的伪随机数。\r23 void srand(unsigned int seed)\r该函数播种由函数 rand 使用的随机数发生器。\r24 int mblen(const char *str, size_t n)\r返回参数 str 所指向的多字节字符的长度。\r25 size_t mbstowcs(schar_t *pwcs, const char *str, size_t n)\r把参数 str 所指向的多字节字符的字符串转换为参数 pwcs 所指向的数组。\r26 int mbtowc(whcar_t *pwc, const char *str, size_t n)\r检查参数 str 所指向的多字节字符。\r27 size_t wcstombs(char *str, const wchar_t *pwcs, size_t n)\r把数组 pwcs 中存储的编码转换为多字节字符，并把它们存储在字符串 str 中。\r28 int wctomb(char *str, wchar_t wchar)\r检查对应于参数 wchar 所给出的多字节字符的编码。\r "
},
{
	"uri": "https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.15-string/",
	"title": "3.15 string",
	"tags": [],
	"description": "",
	"content": "简介 string .h 头文件定义了一个变量类型、一个宏和各种操作字符数组的函数。\r 库变量 下面是头文件 string.h 中定义的变量类型：\r序号 变量 \u0026amp; 描述\r1 size_t 这是无符号整数类型，它是 sizeof 关键字的结果。\r 库宏 下面是头文件 string.h 中定义的宏：\r序号 宏 \u0026amp; 描述\r1 NULL\r这个宏是一个空指针常量的值。\r 库函数 下面是头文件 string.h 中定义的函数：\r序号 函数 \u0026amp; 描述\r1 void *memchr(const void *str, int c, size_t n)\r在参数 str 所指向的字符串的前 n 个字节中搜索第一次出现字符 c（一个无符号字符）的位置。\r2 int memcmp(const void *str1, const void *str2, size_t n)\r把 str1 和 str2 的前 n 个字节进行比较。\r3 void *memcpy(void *dest, const void *src, size_t n)\r从 src 复制 n 个字符到 dest。\r4 void *memmove(void *dest, const void *src, size_t n)\r另一个用于从 str2 复制 n 个字符到 str1 的函数。\r5 void *memset(void *str, int c, size_t n)\r复制字符 c（一个无符号字符）到参数 str 所指向的字符串的前 n 个字符。\r6 char *strcat(char *dest, const char *src)\r把 src 所指向的字符串追加到 dest 所指向的字符串的结尾。\r7 char *strncat(char *dest, const char *src, size_t n)\r把 src 所指向的字符串追加到 dest 所指向的字符串的结尾，直到 n 字符长度为止。\r8 char *strchr(const char *str, int c)\r在参数 str 所指向的字符串中搜索第一次出现字符 c（一个无符号字符）的位置。\r9 int strcmp(const char *str1, const char *str2)\r把 str1 所指向的字符串和 str2 所指向的字符串进行比较。\r10 int strncmp(const char *str1, const char *str2, size_t n)\r把 str1 和 str2 进行比较，最多比较前 n 个字节。\r11 int strcoll(const char *str1, const char *str2)\r把 str1 和 str2 进行比较，结果取决于 LC_COLLATE 的位置设置。\r12 char *strcpy(char *dest, const char *src)\r把 src 所指向的字符串复制到 dest。\r13 char *strncpy(char *dest, const char *src, size_t n)\r把 src 所指向的字符串复制到 dest，最多复制 n 个字符。\r14 size_t strcspn(const char *str1, const char *str2)\r检索字符串 str1 开头连续有几个字符都不含字符串 str2 中的字符。\r15 char *strerror(int errnum)\r从内部数组中搜索错误号 errnum，并返回一个指向错误消息字符串的指针。\r16 size_t strlen(const char *str)\r计算字符串 str 的长度，直到空结束字符，但不包括空结束字符。\r17 char *strpbrk(const char *str1, const char *str2)\r检索字符串 str1 中第一个匹配字符串 str2 中字符的字符，不包含空结束字符。也就是说，依次检验字符串 str1 中的字符，当被检验字符在字符串 str2 中也包含时，则停止检验，并返回该字符位置。\r18 char *strrchr(const char *str, int c)\r在参数 str 所指向的字符串中搜索最后一次出现字符 c（一个无符号字符）的位置。\r19 size_t strspn(const char *str1, const char *str2)\r检索字符串 str1 中第一个不在字符串 str2 中出现的字符下标。\r20 char *strstr(const char *haystack, const char *needle)\r在字符串 haystack 中查找第一次出现字符串 needle（不包含空结束字符）的位置。\r21 char *strtok(char *str, const char *delim)\r分解字符串 str 为一组字符串，delim 为分隔符。\r22 size_t strxfrm(char *dest, const char *src, size_t n)\r根据程序当前的区域选项中的 LC_COLLATE 来转换字符串 src 的前 n 个字符，并把它们放置在字符串 dest 中。\r strlen strlen 是 string length 的缩写，用来获得字符串的长度。所谓长度，就是包含多少个字符（不包括字符串结束标志 '\\0'）。\r语法格式为：strlen(arrayName);\rstrlen 将返回字符串的长度，它是一个整数。\r strcat strcat 是 string catenate 的缩写，意思是把两个字符串拼接在一起，语法格式为：\rstrcat(arrayName1, arrayName2);\rarrayName1、arrayName2 为需要拼接的字符串。\r strcpy strcpy 是 string copy 的缩写，意思是字符串复制，语法格式为：\rstrcpy(arrayName1, arrayName2);\rstrcpy 会把 arrayName2 中的字符串拷贝到 arrayName1 中，串结束标志 '\\0' 也一同拷贝。\r strcmp strcmp 是 string compare 的缩写，意思是字符串比较，语法格式为：\rstrcmp(arrayName1, arrayName2);\rarrayName1 和 arrayName2 是需要比较的两个字符串。\r字符本身没有大小之分，strcmp() 是以各个字符在ASCII 码表上对应的数值进行比较的。strcmp() 首先将 arrayName1 中第0个字符的 ASCII 码值减去 arrayName2 中第0个字符的 ASCII 码值，若差值为 0，则说明两个字符相同，再继续比较下个字符，若差值不为 0 则将差值返回。例如字符串\u0026quot;Ac\u0026quot;和\u0026quot;ba\u0026quot;比较则会返回字符\u0026quot;A\u0026quot;(65)和'b'(98)的差值(－33)。\r返回值：若 arrayName1 和 arrayName2 相同，则返回0；若 arrayName1 大于 arrayName2，则返回大于 0 的值；若 arrayName1 小于 arrayName2，则返回小于0 的值。\r "
},
{
	"uri": "https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.16-time/",
	"title": "3.16 time",
	"tags": [],
	"description": "",
	"content": "简介 time.h 头文件定义了四个变量类型、两个宏和各种操作日期和时间的函数。\r 库变量 下面是头文件 time.h 中定义的变量类型：\r序号 变量 \u0026amp; 描述\r1 size_t 是无符号整数类型，它是 sizeof 关键字的结果。\r2 clock_t 这是一个适合存储处理器时间的类型。\r3 time_t is 这是一个适合存储日历时间类型。\r4 struct tm 这是一个用来保存时间和日期的结构。\rtm 结构的定义如下：\rstruct tm {\rint tm_sec; /* 秒，范围从 0 到 59 */\rint tm_min; /* 分，范围从 0 到 59 */\rint tm_hour; /* 小时，范围从 0 到 23 */\rint tm_mday; /* 一月中的第几天，范围从 1 到 31 */\rint tm_mon; /* 月，范围从 0 到 11 */\rint tm_year; /* 自 1900 年起的年数 */\rint tm_wday; /* 一周中的第几天，范围从 0 到 6 */\rint tm_yday; /* 一年中的第几天，范围从 0 到 365 */\rint tm_isdst; /* 夏令时 */\r};\r 库宏 下面是头文件 time.h 中定义的宏：\r序号 宏 \u0026amp; 描述\r1 NULL\r这个宏是一个空指针常量的值。\r2 CLOCKS_PER_SEC 这个宏表示每秒的处理器时钟个数。\r 库函数 下面是头文件 time.h 中定义的函数：\r序号 函数 \u0026amp; 描述\r1 char *asctime(const struct tm *timeptr)\r返回一个指向字符串的指针，它代表了结构 timeptr 的日期和时间。\r2 clock_t clock(void)\r返回程序执行起（一般为程序的开头），处理器时钟所使用的时间。\r3 char *ctime(const time_t *timer)\r返回一个表示当地时间的字符串，当地时间是基于参数 timer。\r4 double difftime(time_t time1, time_t time2)\r返回 time1 和 time2 之间相差的秒数 (time1-time2)。\r5 struct tm *gmtime(const time_t *timer)\rtimer 的值被分解为 tm 结构，并用协调世界时（UTC）也被称为格林尼治标准时间（GMT）表示。\r6 struct tm *localtime(const time_t *timer)\rtimer 的值被分解为 tm 结构，并用本地时区表示。\r7 time_t mktime(struct tm *timeptr)\r把 timeptr 所指向的结构转换为一个依据本地时区的 time_t 值。\r8 size_t strftime(char *str, size_t maxsize, const char *format, const struct tm *timeptr)\r根据 format 中定义的格式化规则，格式化结构 timeptr 表示的时间，并把它存储在 str 中。\r9 time_t time(time_t *timer)\r计算当前日历时间，并把它编码成 time_t 格式。\r "
},
{
	"uri": "https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.17-printf/",
	"title": "3.17 printf",
	"tags": [],
	"description": "",
	"content": "格式字符串 在Turbo C中格式字符串的一般形式为：\r%[标志][输出最小宽度][.精度][长度]类型。\r%[flags][width][.precision]type\r其中方括号[]中的项为可选项。\r1) 类型。 也就是以什么类型输出，比如 %d、%f、%c，type 就分别对应 d、f、c；%-9d中 type 对应 d。type 必须有。\r格式字符 意义 c 输出单个字符 s 输出字符串 f 以小数形式输出单、双精度实数 默认保留六位小数，不足六位以 0 补齐，超过六位按四舍五入截断\rd 以十进制形式输出带符号整数(正数不输出符号) o 以八进制形式输出无符号整数(不输出前缀0) x,X 以十六进制形式输出无符号整数(不输出前缀Ox) u 以十进制形式输出无符号整数 e,E 以指数形式输出单、双精度实数 g,G 以%f或%e中较短的输出宽度输出单、双精度实数 2) 标志。标志字符为 -、+、# 和空格四种，其意义下表所示：\r标志字符 含 义\r- 左对齐\r+ 输出符号（正号或负号）\r空格 输出值为正时冠以空格，为负时冠以负号\r# 对c、s、d、u类无影响；\r对o类，在输出时加前缀o；\r对x类，在输出时加前缀0x；\r对e、g、f 类当结果有小数时才给出小数点。\r3) 输出最小宽度。width 表示最小输出宽度，也就是占几个字符的位置；%-9d中 width 对应 9。\r用十进制整数来表示输出的最少位数。若实际位数多于定义的宽度，则按实际位数输出，若实际位数少于定义的宽度则补以空格或0。\r4) 精度\r精度格式符以“.”开头，后跟十进制整数。\r本项的意义是：如果输出数字，则表示小数的位数；\r如果输出的是字符，则表示输出字符的个数；\r若实际位数大于所定义的精度数，则截去超过的部分。\r不足的宽度以 0 补齐\r5) 长度\r长度格式符为h、l两种，h表示按短整型量输出，l表示按长整型量输出。\r例子：\rint a=15;\rlong float b=123.1234567;\rdouble c=12345678.1234567;\rchar d='p';\rprintf(\u0026quot;a=%d\\n\u0026quot;, a);\rprintf(\u0026quot;a(%%d)=%d, a(%%5d)=%5d, a(%%o)=%o, a(%%x)=%x\\n\\n\u0026quot;,a,a,a,a); // %% 可以输出 %\rprintf(\u0026quot;a=%f\\n\u0026quot;, b);\rprintf(\u0026quot;b(%%f)=%f, b(%%lf)=%lf, b(%%5.4lf)=%5.4lf, b(%%e)=%e\\n\\n\u0026quot;,b,b,b,b);\rprintf(\u0026quot;c=%f\\n\u0026quot;, c);\rprintf(\u0026quot;c(%%lf)=%lf, c(%%f)=%f, c(%%8.4lf)=%8.4lf\\n\\n\u0026quot;,c,c,c);\rprintf(\u0026quot;d=%c\\n\u0026quot;, d);\rprintf(\u0026quot;d(%%c)=%c, d(%%8c)=%8c\\n\u0026quot;,d,d);\r "
},
{
	"uri": "https://yujian1018.github.io/book/cpp/4.-%E5%86%85%E7%BD%AE%E5%B7%A5%E5%85%B7/",
	"title": "4. 内置工具",
	"tags": [],
	"description": "",
	"content": "c++ "
},
{
	"uri": "https://yujian1018.github.io/book/cpp/5.-%E8%BF%9B%E9%98%B6/",
	"title": "5. 进阶",
	"tags": [],
	"description": "",
	"content": "c++ "
},
{
	"uri": "https://yujian1018.github.io/book/cpp/6.-%E9%A1%B9%E7%9B%AE/",
	"title": "6. 项目",
	"tags": [],
	"description": "",
	"content": "c++ "
},
{
	"uri": "https://yujian1018.github.io/book/cpp/7.-%E9%A1%B9%E7%9B%AE%E7%A0%94%E7%A9%B6/",
	"title": "7. 项目研究",
	"tags": [],
	"description": "",
	"content": "c++ "
},
{
	"uri": "https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.8-%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF/",
	"title": "2.8 函数模板",
	"tags": [],
	"description": "",
	"content": "template\u0026lt;typename T\u0026gt;\rT max(T a, T b, T c) {\rif (a \u0026gt; b) a = b;\rif (a \u0026gt; c) a = c;\rreturn a;\r}\rint main() {\rcout \u0026lt;\u0026lt; max(10, 11, 12) \u0026lt;\u0026lt; endl;\rreturn 0;\r}\r模板类\r#include \u0026lt;iostream\u0026gt;\r\rusing namespace std;\rtemplate\u0026lt;typename M, typename N\u0026gt;\rclass point {\rprivate:\rM x;\rN y;\rpublic:\rpoint() : x(0), y(0) {}\rpoint(M x, N y) : x(x), y(y) {}\rvoid set_xy(M x, N y);\rM get_x();\rN get_y();\r};\rtemplate\u0026lt;typename M, typename N\u0026gt;\rvoid point\u0026lt;M, N\u0026gt;::set_xy(M x, N y) {\rthis-\u0026gt;x = x;\rthis-\u0026gt;y = y;\r}\rtemplate\u0026lt;typename M, typename N\u0026gt;\rM point\u0026lt;M, N\u0026gt;::get_x() {\rreturn x;\r}\rint main() {\rpoint\u0026lt;int, float \u0026gt; p(10, 12.3);\rPoint\u0026lt;float, float\u0026gt; *p = new Point\u0026lt;float, int\u0026gt;(10.6, 109);\rcout \u0026lt;\u0026lt; p.get_x() \u0026lt;\u0026lt; endl;\rreturn 0;\r}\r"
},
{
	"uri": "https://yujian1018.github.io/book/cpp/2.-%E5%9F%BA%E7%A1%80/2.9-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",
	"title": "2.9 数据结构",
	"tags": [],
	"description": "",
	"content": "Array int a[10]={12, 19, 22 , 993, 344}; int a[10] = {0};\rchar c[10] = {0};\rfloat f[10] = {0};\rfloat level[2], sum; 定义一个两个参数的数组，并且参数只能是float型 C语言规定，数组名就代表了该数组的地址。\rC语言还规定，数组名所代表的地址为第0个元素的地址，例如char c[10];，c就代表c[0]的地址。第0个元素的地址就是数组的起始地址，称为首地址。也就是说，数组名表示数组的首地址。\r数组的定义格式为：\rtype arrayName[length]\rtype 为数据类型，arrayName 为数组名，length 为数组长度。 需要注意的是：\r在不支持C99的编译器中，length 必须是一个数值常量，不能是变量，例如 VC6.0、VS2010 等；在支持C99的编译器中，length 还可以是变量，例如 C-Free 5.0、GCC等。\r数组在内存中占用一段连续的空间，数组名表示的是这段内存空间的首地址。\r2) 访问数组中某个元素的格式为：\rarrayName[index]\rindex 为数组下标。注意 index 的值必须大于等于零，并且小于数组长度，否则会发生数组越界，出现意想不到的错误。\r 2.变元向量 argv[]  "
},
{
	"uri": "https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.8-math/",
	"title": "3.8 math",
	"tags": [],
	"description": "",
	"content": "简介 math.h 头文件定义了各种数学函数和一个宏。在这个库中所有可用的功能都带有一个 double 类型的参数，且都返回 double 类型的结果。\r "
},
{
	"uri": "https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.9-setjmp/",
	"title": "3.9 setjmp",
	"tags": [],
	"description": "",
	"content": "简介 setjmp.h 头文件定义了宏 setjmp()、函数 longjmp() 和变量类型 jmp_buf，该变量类型会绕过正常的函数调用和返回规则。\r 库变量 下面列出了头文件 setjmp.h 中定义的变量：\r序号 变量 \u0026amp; 描述\r1 jmp_buf 这是一个用于存储宏 setjmp() 和函数 longjmp() 相关信息的数组类型。\r 库宏 下面是这个库中定义的唯一的一个宏：\r序号 宏 \u0026amp; 描述\r1 int setjmp(jmp_buf environment)\r这个宏把当前环境保存在变量 environment 中，以便函数 longjmp() 后续使用。如果这个宏直接从宏调用中返回，则它会返回零，但是如果它从 longjmp() 函数调用中返回，则它会返回一个非零值。\r 库函数 下面是头文件 setjmp.h 中定义的唯一的一个函数：\r序号 函数 \u0026amp; 描述\r1 void longjmp(jmp_buf environment, int value)\r该函数恢复最近一次调用 setjmp() 宏时保存的环境，jmp_buf 参数的设置是由之前调用 setjmp() 生成的。\r "
},
{
	"uri": "https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.18-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/",
	"title": "3.18 文件操作",
	"tags": [],
	"description": "",
	"content": "1. 文件和流的关系\rC将每个文件简单地作为顺序字节流。每个文件用文件结束符结束，或者在特定字节数的地方结束，这个特定的字节数可以存储在系统维护的管理数据结构中。当打开文件时，就建立了和文件的关系。\r在开始执行程序的时候，将自动打开3个文件和相关的流：标准输入流、标准输出流和标准错误。流提供了文件和程序的通信通道。打开一个文件将返回指向FILE结构(在stdio.h中定义)的指针，它包含用于处理文件的信息，也就是说，这个结构包含文件描述符。文件描述符是操作系统数组(打开文件列表的索引)。每个数组元素包含一个文件控制块(FCB, File Control Block)，操作系统用它来管理特定的文件。\r标准输入、标准输出和标准错误是用文件指针stdin、stdout和stderr来处理的。\rC语言把磁盘文件看成是字符（或字节）的序列，按照存储信息的形式来说，文件主要是有文本文件和二进制文件。文本文件由一个个字符组成，每个字节存放一个ASCII码制，代表一个字符。二进制文件把内存中的数据按其在内存中的存储形式原样放入磁盘空间。\r二进制文件以及文本文件都可以看做是“数据流”。\r2. C语言文件管理的实现\rC程序用不同的FILE结构管理每个文件。程序员可以使用文件，但不需要知道FILE结构的细节。实际上，FILE结构是间接地操作系统的文件控制块(FCB)来实现对文件的操作的。例如FILE结构体中的_file实际上就是一个文件描述符，作为进入打开文件表索引的整数。\r3. 操作系统文件管理简介\r文件是存放在物理磁盘上的，包括文件控制块(FCB)和数据块。文件控制块通常包括文件权限、日期（创建、读取、修改）、拥有者、文件大小、数据块信息。数据块用来存储实际的内容。对于打开的文件，操作系统是这样管理的：\r1\r系统维护了两张表，一张是系统级打开文件表，一张是进程级打开文件表（每个进程有一个）。\r系统级打开文件表复制了文件控制块的信息等；进程级打开文件表保存了指向系统级文件表的指针及其他信息。\r系统级文件表每一项都保存一个计数器，即该文件打开的次数。我们初次打开一个文件时，系统首先查看该文件是否已在系统级文件表中，如果不在，则创建该项信息，否则，计数器加1。当我们关闭一个文件时，相应的计数也会减1，当减到0时，系统将系统级文件表中的项删除。\r进程打开一个文件时，会在进程级文件表中添加一项。每项的信息包括当前文件偏移量（读写文件的位置）、存取权限、和一个指向系统级文件表中对应文件项的指针。系统级文件表中的每一项通过文件描述符（一个非负整数）来标识。\rFILE结构体中的_file成员应该是指向进程级打开文件表，然后，通过进程级打开文件表可以找到系统级打开文件表，进而可以通过FCB操作物理磁盘上面的文件。\r每打开一次文件，哪怕多次打开的都是同一个文件，进程级打开文件表中应该都会添加一个记录。如果是打开的是同一个文件，这多条记录对应着同一个物理磁盘文件。由于每一次打开文件所进行的操作都是通过进程级打开文件表中不同的记录来实现的，这样，相当于每次打开文件的操作是相对独立的。\r4. 缓冲区\r当我们从键盘输入数据的时候，数据并不是直接被我们得到，而是放在了缓冲区中，然后我们从缓冲区中得到我们想要的数据 。如果我们通过setbuf()或setvbuf()函数将缓冲区设置10个字节的大小，而我们从键盘输入了20个字节大小的数据，这样我们输入的前10个数据会放在缓冲区中，因为我们设置的缓冲区的大小只能够装下10个字节大小的数据，装不下20个字节大小的数据。那么剩下的那10个字节大小的数据怎么办呢？暂时放在了输入流中。请看下图：\r上面的箭头表示的区域就相当是一个输入流，红色的地方相当于一个开关，这个开关可以控制往深绿色区域（标注的是缓冲区）里放进去的数据，输入20个字节的数据只往缓冲区中放进去了10个字节，剩下的10个字节的数据就被停留在了输入流里！等待下去往缓冲区中放入！接下来系统是如何来控制这个缓冲区呢？\r再说一下 FILE 结构体中几个相关成员的含义：\rcnt // 剩余的字符，如果是输入缓冲区，那么就表示缓冲区中还有多少个字符未被读取\rptr // 下一个要被读取的字符的地址\rbase // 缓冲区基地址\r在上面我们向缓冲区中放入了10个字节大小的数据，FILE结构体中的 cnt 变为了10 ，说明此时缓冲区中有10个字节大小的数据可以读，同时我们假设缓冲区的基地址也就是 base 是0x00428e60 ，它是不变的 ，而此时 ptr 的值也为0x00428e60 ，表示从0x00428e60这个位置开始读取数据，当我们从缓冲区中读取5个数据的时候，cnt 变为了5 ，表示缓冲区还有5个数据可以读，ptr 则变为了0x0042e865表示下次应该从这个位置开始读取缓冲区中的数据 ，如果接下来我们再读取5个数据的时候，cnt 则变为了0 ，表示缓冲区中已经没有任何数据了，ptr 变为了0x0042869表示下次应该从这个位置开始从缓冲区中读取数据，但是此时缓冲区中已经没有任何数据了，所以要将输入流中的剩下的那10个数据放进来，这样缓冲区中又有了10个数据，此时 cnt 变为了10 ，注意了刚才我们讲到 ptr 的值是0x00428e69 ，而当缓冲区中重新放进来数据的时候这个 ptr 的值变为了0x00428e60 ，这是因为当缓冲区中没有任何数据的时候要将 ptr 这个值进行一下刷新，使其指向缓冲区的基地址也就是0x0042e860这个值！因为下次要从这个位置开始读取数据！\r在这里有点需要说明：当我们从键盘输入字符串的时候需要敲一下回车键才能够将这个字符串送入到缓冲区中，那么敲入的这个回车键(\\r)会被转换为一个换行符\\n，这个换行符\\n也会被存储在缓冲区中并且被当成一个字符来计算！比如我们在键盘上敲下了123456这个字符串，然后敲一下回车键（\\r）将这个字符串送入了缓冲区中，那么此时缓冲区中的字节个数是7 ，而不是6。\r缓冲区的刷新就是将指针 ptr 变为缓冲区的基地址 ，同时 cnt 的值变为0 ，因为缓冲区刷新后里面是没有数据的！\r5. 缓冲区操作（设置、清除）\r(1).清除文件缓冲区函数： int fflush(FILE *stream); int flushall(); fflush()函数将清除由stream指向的文件缓冲区里的内容，常用于写完一些数据后，立即用该函数清除缓冲区，以免误操作时，破坏原来的数据。 flushall()将清除所有打开文件所对应的文件缓冲区。\r(2).设置文件缓冲区函数 void setbuf(FILE *stream,char *buf); void setvbuf(FILE *stream,char *buf,int type,unsigned size); 这两个函数将使得打开文件后，用户可建立自己的文件缓冲区，而不使用fopen()函数打开文件设定的默认缓冲区。\r程序输出有两种方式：一种是即时处理方式，另一种是先暂存起来，然后再大块写入的方式，前者往往造成较高的系统负担。因此，c语言实现通常都允许程序员进行实际的写操作之前控制产生的输出数据量。这种控制能力一般是通过库函数setbuf实现的。如果buf是一个大小适当的字符数组，那么：setbuf(stdout，buf);语句将通知输入/输出库，所有写入到stdout的输出都应该使用buf作为输出缓冲区，直到buf缓冲区被填满或者程序员直接调用fflush（译注：对于由写操作打开的文件，调用fflush将导致输出缓冲区的内容被实际地写入该文件），buf缓冲区中的内容才实际写入到stdout中。缓冲区的大小由系统头文件\u0026lt;stdio.h\u0026gt;中的BUFSIZ定义。\r函数setvbuf()用来设定文件流的缓冲区，其原型为：int setvbuf(FILE * stream, char * buf, int type, unsigned size);【参数】stream为文件流指针，buf为缓冲区首地址，type为缓冲区类型，size为缓冲区内字节的数量。\r参数类型type说明如下：\r_IOFBF (满缓冲)：当缓冲区为空时，从流读入数据。或当缓冲区满时，向流写入数据。\r_IOLBF (行缓冲)：每次从流中读入一行数据或向流中写入—行数据。\r_IONBF (无缓冲)：直接从流中读入数据或直接向流中写入数据，而没有缓冲区。\r【返回值】成功返回0，失败返回非0。\rsetbuf()和setvbuf()函数的实际意义在于：用户打开一个文件后，可以建立自己的文件缓冲区，而不必使用fopen()函数打开文件时设定的默认缓冲区。这样就可以让用户自己来控制缓冲区，包括改变缓冲区大小、定时刷新缓冲区、改变缓冲区类型、删除流中默认的缓冲区、为不带缓冲区的流开辟缓冲区等。\r说明：在打开文件流后，读取内容之前，调用setvbuf()可以用来设置文件流的缓冲区。\r文件的随机读写函数\r前面介绍的文件的字符/字符串读写，均是进行文件的顺序读写，即总是从文件的开头开始进行读写。这显然不能满足我们的要求，C语言提供了移动文件指针和随机读写的函数，它们是：移动文件指针函数： long ftell(FILE *stream); int rewind(FILE *stream); fseek(FILE *stream,long offset,int origin); 函数ftell()用来得到文件指针离文件开头的偏移量。当返回值是-1时表示出错。rewind()函数用于文件指针移到文件的开头，当移动成功时，返回0，否则返回一个非0值。fseek()函数用于把文件指针以origin为起点移动offset个字节，其中origin指出的位置可有以下几种： origin 数值 代表的具体位置 SEEK_SET 0 文件开头 SEEK_CUR 1 文件指针当前位置 SEEK_END 2 文件尾 例如： fseek(fp,10L,0); 把文件指针从文件开头移到第10字节处，由于offset参数要求是长整型数，故其数后带L。 fseek(fp,-15L,2); 把文件指针从文件尾向前移动15字节。\r6. 文件操作相关函数\r一、打开文件操作：FILE *fopen(char *filename, char *mode)\rfilename： 采用绝对或相对路径的目标文件名\rmode： 文件的类型和操作要求\r返回值： 目标文件指针或空指针值NULL(打开异常时)\r文件类型 ：t (text): 文本文件（可省略不写）； b (banary): 二进制文件\r从文件编码的方式来看，文件可分为ASCII码文件和二进制码文件两种。\rASCII文件也称为文本文件，这种文件在磁盘中存放时每个字符对应一个字节，用于存放对应的ASCII码。ASCII码文件可在屏幕上按字符显示。二进制文件是按二进制的编码方式来存放文件的。\r二进制文件虽然也可在屏幕上显示，但其内容无法读懂。\rC系统在处理这些文件时，并不区分类型，都看成是字符流，按字节进行处理。输入输出字符流的开始和结束只由程序控制而不受物理符号(如回车符)的控制。 因此也把这种文件称作“流式文件”。把一个文本文件读入内存时，要将ASCII码转换成二进制码， 而把文件以文本方式写入磁盘时，也要把二进制码转换成ASCII码，因此文本文件的读写要花费较多的转换时间。对二进制文件的读写不存在这种转换。\r文件操作类型：r (read): 读【目标文件必须存在，否则报错】\rw (write): 写【目标不存在时自动创建】\ra (append): 追加【目标文件必须存在，否则报错】\r+ : 读和写\r操作类型组合方式\r操 作 说 明 \u0026quot;rt\u0026quot;\r只读打开一个文本文件，只允许读数据\r\u0026quot;wt\u0026quot;\r只写打开或建立一个文本文件，只允许写数据\r\u0026quot;at\u0026quot;\r追加打开一个文本文件，并在文件末尾写数据\r\u0026quot;rb\u0026quot;\r只读打开一个二进制文件，只允许读数据\r\u0026quot;wb\u0026quot;\r只写打开或建立一个二进制文件，只允许写数据\r\u0026quot;ab\u0026quot;\r追加打开一个二进制文件，并在文件末尾写数据\r\u0026quot;rt+\u0026quot;\r读写打开一个文本文件，允许读和写\r\u0026quot;wt+\u0026quot;\r读写打开或建立一个文本文件，允许读写\r\u0026quot;at+\u0026quot;\r读写打开一个文本文件，允许读，或在文件末追加数据\r\u0026quot;rb+\u0026quot;\r读写打开一个二进制文件，允许读和写\r\u0026quot;wb+\u0026quot;\r读写打开或建立一个二进制文件，允许读和写\r\u0026quot;ab+\u0026quot;\r读写打开一个二进制文件，允许读，或在文件末追加数据\r2) 凡用“r”打开一个文件时，该文件必须已经存在，且只能从该文件读出。\r3) 用“w”打开的文件只能向该文件写入。若打开的文件不存在，则以指定的文件名建立该文件，若打开的文件已经存在，则将该文件删去，重建一个新文件。\r4) 若要向一个已存在的文件追加新的信息，只能用“a”方式打开文件。但此时该文件必须是存在的，否则将会出错。\r5) 在打开一个文件时，如果出错，fopen将返回一个空指针值NULL。在程序中可以用这一信息来判别是否完成打开文件的工作，并作相应的处理。\r二、关闭文件操作：int fclose(FILE *fp)\rfp： 待关闭文件的文件指针。返回值： 0（正常关闭），非0（关闭异常）\r三、 读字符函数： int fgetc(FILE *fp)\rfp： 待读文件的文件指针。返回值： 读出字符的ASCII码或EOF(文件结束时)\rfgetc函数的功能是从指定的文件中读一个字符。在文件内部有一个位置指针。用来指向文件的当前读写字节。在文件打开时，该指针总是指向文件的第一个字节。使用fgetc 函数后， 该位置指针将向后移动一个字节。文件结束时，该指针指向EOF， 因此可连续多次使用fgetc函数，读取多个字符直至遇到EOF为止。 应注意文件指针和文件内部的位置指针不是一回事。文件指针是指向整个文件的，须在程序中定义说明，只要不重新赋值，文件指针的值是不变的。文件内部的位置指针用以指示文件内部的当前读写位置，每读写一次，该指针均向后移动，它不需在程序中定义说明，而是由系统自动设置的。\r对于fgetc函数的使用有以下几点说明：1) 在fgetc函数调用中，读取的文件必须是以读或读写方式打开的。2) 读取字符的结果也可以不向字符变量赋值， 例如： fgetc(fp); 但是读出的字符不能保存。3) 在文件内部有一个位置指针。用来指向文件的当前读写字节。在文件打开时，该指针总是指向文件的第一个字节。使用fgetc 函数后，该位置指针将向后移动一个字节。因此可连续多次使用fgetc函数，读取多个字符。\r四、 写字符函数： int fputc(int ch, file *fp)\rch： 待写入文件的字符的ASCII码。fp： 待写文件的文件指针。返回值： 如写入成功则返回写入的字符， 否则返回EOF。\rputc函数的使用也要说明几点：1) 被写入的文件可以用写、读写、追加方式打开，用写或读写方式写入字符从文件首开始。如需保留原有文件内容，希望写入的字符被写入的文件若不存在，则创建该文件。2) 每写入一个字符，文件内部位置指针向后移动一个字节。3) fputc函数有一个返回值，如写入成功则返回写入的字符，否则返回一个EOF。可用此来判断写符，写入一个文件，再把该文件内容读出显示在屏幕上。\r五、读字符串函数：char *fgets(char *str, int num, FILE *fp)\rstr： 保存从文件读取出来的字符串。num： 表示从文件中读出的字符串不超过 n-1个字符。在读入的最后一个字符后加上串结束标志'/0'。fp： 待读文件的文件指针。返回值： 字符数组的首地址或者NULL（当读到文件末尾或发生错误时返回）\r功能描述： 读字符串函数fgets函数的功能是从指定的文件中读一个字符串到字符数组中，如：fgets(str,n,fp)的意义是从fp所指的文件中读出n-1个字符送入字符数组str中。\r对fgets函数有两点说明：1. 在读出n-1个字符之前，如遇到了换行符或EOF，则读出结束。2. fgets函数也有返回值，其返回值是字符数组的首地址。\r六、写字符串函数： int fputs(char *str, file *fp)\rstr： 待写入文件的字符串。fp： 待写文件的文件指针。返回值： 非负整数（成功），EOF(失败) 。\r功能描述： fputs函数的功能是向指定的文件写入一个字符串\r七、数据块读写函数： int fwrite(void *buf, int size, int count, FILE *fp) | int fread(void *buf, int size, int count, FILE *fp)\rbuf： 在fread函数中，它表示存放输入数据的首地址。在fwrite函数中，它表示存放输出数据的首地址。size： 表示数据块的字节。count： 表示要读写的数据块块数。fp：表示文件指针 。返回： 已读取或已写入的数据块块数\r八、 格式化读写函数 int fscanf(FILE *fp, char *format,…) | int fprintf(FILE *fp, char *format,…)\rfscanf函数，fprintf函数与前面使用的scanf和printf 函数的功能相似，都是格式化读写函数。 两者的区别在于 fscanf 函数和fprintf函数的读写对象不是键盘和显示器，而是磁盘文件。\r九、文件的随机读写\r前面介绍的对文件的读写方式都是顺序读写， 即读写文件只能从头开始，顺序读写各个数据。 但在实际问题中常要求只读写文件中某一指定的部分。 为了解决这个问题可移动文件内部的位置指针到需要读写的位置，再进行读写，这种读写称为随机读写。 实现随机读写的关键是要按要求移动位置指针，这称为文件的定位。文件定位移动文件内部位置指针的函数主要有两个， 即 rewind 函数和fseek函数。\rrewind函数前面已多次使用过，其调用形式为： rewind(文件指针)； 它的功能是把文件内部的位置指针移到文件首。 下面主要介绍fseek函数。\rfseek函数用来移动文件内部位置指针，其调用形式为： fseek(文件指针，位移量，起始点)； 其中：“文件指针”指向被移动的文件。 “位移量”表示移动的字节数，要求位移量是long型数据，以便在文件长度大于64KB 时不会出错。当用常量表示位移量时，要求加后缀“L”。“起始点”表示从何处开始计算位移量，规定的起始点有三种：文件首，当前位置和文件尾。其表示方法如下：\r起始点 表示符号 数字表示\r──────────────────────────\r文件首 SEEK—SET 0\r当前位置 SEEK—CUR 1\r文件末尾 SEEK—END 2\r十、文件检测函数\rC语言中常用的文件检测函数有以下几个。一、文件结束检测函数feof函数调用格式： feof(文件指针)； 功能：判断文件是否处于文件结束位置，如文件结束，则返回值为1，否则为0。二、读写文件出错检测函数ferror函数调用格式： ferror(文件指针)； 功能：检查文件在用各种输入输出函数进行读写时是否出错。 如ferror返回值为0表示未出错，否则表示有错。三、文件出错标志和文件结束标志置0函数clearerr函数调用格式： clearerr(文件指针); 功能：本函数用于清除出错标志和文件结束标志，使它们为0值。\r "
},
{
	"uri": "https://yujian1018.github.io/book/cpp/3.-%E5%BA%93%E5%87%BD%E6%95%B0/3.18-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%E5%87%BD%E6%95%B0/",
	"title": "3.18 文件读写函数",
	"tags": [],
	"description": "",
	"content": "文件读写函数 fopen FILE *fopen(char *filename, char *mode); 函数用来打开一个文件\rfclose int fclose(FILE *fp); fgetc() int fgetc (FILE *fp); 函数每次只能读写一个字符\rfputc() int fputc ( int ch, FILE *fp ); 函数每次只能读写一个字符\rfgets char *fgets ( char *str, int n, FILE *fp ); 有局限性，每次最多只能从文件中读取一行内容，因为 fgets 遇到换行符就结束读取。\rfputs int fputs( char *str, FILE *fp ); fread size_t fread ( void *ptr, size_t size, size_t count, FILE *fp ); 读取多行内容\rfwrite size_t fwrite ( void * ptr, size_t size, size_t count, FILE *fp ); rewind(fp); void rewind ( FILE *fp ); //将文件中的位置指针重新定位到文件开头\rfseek() int fseek ( FILE *fp, long offset, int origin ); 来将位置指针移动到任意位置\roffset 为偏移量，也就是要移动的字节数。之所以为 long 类型，是希望移动的范围更大，能处理的文件更大\rorigin 为起始位置\r文件开头 SEEK_SET 0\r当前位置 SEEK_CUR 1\r文件末尾 SEEK_END 2\rfscanf int fscanf ( FILE *fp, char * format, ... ); FILE *fp;\rint i, j;\rchar *str, ch;\rfscanf(fp, \u0026quot;%d %s\u0026quot;, \u0026amp;i, str);\rfprintf(fp,\u0026quot;%d %c\u0026quot;, j, ch);\rfprintf() int fprintf ( FILE *fp, char * format, ... ); 它的原型为：FILE *fopen(char *filename, char *mode);\rFilename为文件名（包括文件路径），mode为打开方式，它们都是字符串。\rfopen() 会获取文件信息，包括文件名、文件状态、当前读写位置等，并将这些信息保存到一个FILE类型的结构体变量中，然后将该变量的地址返回。\rFILE是在stdio.h头文件中定义的一个结构体，用来保存文件信息。\r如果希望接收 fopen() 的返回值，就需要定义一个 FILE 类型的指针。\r例如：\rFILE *fp = (\u0026quot;demo.txt\u0026quot;, \u0026quot;r\u0026quot;);表示以“只读”方式打开当前目录下的 demo.txt 文件，并使 fp 指向该文件，这样就可以通过 fp 来操作 demo.txt 了。\rfp 通常被称为文件指针。\r又如：FILE *fp = fopen(\u0026quot;D:\\\\demo.txt\u0026quot;,\u0026quot;rb\u0026quot;);表示以二进制方式打开 D 盘下的 demo.txt 文件，允许读和写。\r打开方式 说明\rr 以只读方式打开文件，只允许读取，不允许写入。该文件必须存在。\rr+ 以读/写方式打开文件，允许读取和写入。该文件必须存在。\rrb+ 以读/写方式打开一个二进制文件，允许读/写数据。\rrt+ 以读/写方式打开一个文本文件，允许读和写。\rw 以只写方式打开文件，若文件存在则长度清为0，即该文件内容消失，若不存在则创建该文件。\rw+ 以读/写方式打开文件，若文件存在则文件长度清为零，即该文件内容会消失。若文件不存在则建立该文件。\ra 以追加的方式打开只写文件。若文件不存在，则会建立该文件，如果文件存在，写入的数据会被加到文件尾，即文件原先的内容会被保留（EOF符保留)。\ra+ 以追加方式打开可读/写的文件。若文件不存在，则会建立该文件，如果文件存在，则写入的数据会被加到文件尾后，即文件原先的内容会被保留（原来的EOF符 不保留)。\rwb 以只写方式打开或新建一个二进制文件，只允许写数据。\rwb+ 以读/写方式打开或建立一个二进制文件，允许读和写。\rwt+ 以读/写方式打开或建立一个文本文件，允许读写。\rat+ 以读/写方式打开一个文本文件，允许读或在文本末追加数据。\rab+ 以读/写方式打开一个二进制文件，允许读或在文件末追加数据。\r1) 文件打开方式由r、w、a、t、b、+ 六个字符拼成，各字符的含义是：\r• r(read)：读\r• w(write)：写\r• a(append)：追加\r• t(text)：文本文件，可省略不写\r• b(banary)：二进制文件\r• +：读和写\r2) 如果没有“b”字符，文件以文本方式打开。\r3) 凡用“r”打开一个文件时，该文件必须已经存在。\r4) 在打开一个文件时，如果出错，fopen将返回一个空指针值NULL。在程序中可以用这一信息来判别是否完成打开文件的工作，并作相应的处理。\r5) 把一个文本文件读入内存时，要将ASCII码转换成二进制码，而把文件以文本方式写入磁盘时，也要把二进制码转换成ASCII码，因此文本文件的读写要花费较多的转换时间。对二进制文件的读写不存在这种转换。\r6) 标准输入文件 stdin（键盘）、标准输出文件 stdout（显示器）、标准错误文件 stderr（显示器）是由系统打开的，可直接使用。\r "
},
{
	"uri": "https://yujian1018.github.io/book/cpp/8.-%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/",
	"title": "8. 资料整理",
	"tags": [],
	"description": "",
	"content": "c++ "
},
{
	"uri": "https://yujian1018.github.io/book/cpp/readme/",
	"title": "README",
	"tags": [],
	"description": "",
	"content": "好记性不如烂笔头 c-cpp笔记\n"
},
{
	"uri": "https://yujian1018.github.io/book/cpp/",
	"title": "C-CPP",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://yujian1018.github.io/book/cpp/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
}]